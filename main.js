!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=28)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return xs})),n.d(t,"b",(function(){return Dt})),n.d(t,"c",(function(){return Zq})),n.d(t,"d",(function(){return Ki})),n.d(t,"e",(function(){return zt})),n.d(t,"f",(function(){return He})),n.d(t,"g",(function(){return wo})),n.d(t,"h",(function(){return Ht})),n.d(t,"i",(function(){return Qt})),n.d(t,"j",(function(){return W})),n.d(t,"k",(function(){return Ka})),n.d(t,"l",(function(){return Qi})),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t});function i(){}Object.assign(i.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var n=this._listeners[e];if(void 0!==n){var i=n.indexOf(t);-1!==i&&n.splice(i,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners[e.type];if(void 0!==t){e.target=this;for(var n=t.slice(0),i=0,r=n.length;i<r;i++)n[i].call(this,e)}}}});for(var r=[],a=0;a<256;a++)r[a]=(a<16?"0":"")+a.toString(16);var o,q={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(r[255&e]+r[e>>8&255]+r[e>>16&255]+r[e>>24&255]+"-"+r[255&t]+r[t>>8&255]+"-"+r[t>>16&15|64]+r[t>>24&255]+"-"+r[63&n|128]+r[n>>8&255]+"-"+r[n>>16&255]+r[n>>24&255]+r[255&i]+r[i>>8&255]+r[i>>16&255]+r[i>>24&255]).toUpperCase()},clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,i,r){return i+(e-t)*(r-i)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},smoothstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*(3-2*e)},smootherstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*q.DEG2RAD},radToDeg:function(e){return e*q.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))},setQuaternionFromProperEuler:function(e,t,n,i,r){var a=Math.cos,o=Math.sin,q=a(n/2),l=o(n/2),s=a((t+i)/2),c=o((t+i)/2),h=a((t-i)/2),u=o((t-i)/2),m=a((i-t)/2),p=o((i-t)/2);"XYX"===r?e.set(q*c,l*h,l*u,q*s):"YZY"===r?e.set(l*u,q*c,l*h,q*s):"ZXZ"===r?e.set(l*h,l*u,q*c,q*s):"XZX"===r?e.set(q*c,l*p,l*m,q*s):"YXY"===r?e.set(l*m,q*c,l*p,q*s):"ZYZ"===r?e.set(l*p,l*m,q*c,q*s):console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.")}};function l(e,t){this.x=e||0,this.y=t||0}function s(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(l.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(l.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},cross:function(e){return this.x*e.y-this.y*e.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){return Math.atan2(-this.y,-this.x)+Math.PI},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y;return t*t+n*n},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var n=Math.cos(t),i=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*n-a*i+e.x,this.y=r*i+a*n+e.y,this}}),Object.assign(s.prototype,{isMatrix3:!0,set:function(e,t,n,i,r,a,o,q,l){var s=this.elements;return s[0]=e,s[1]=i,s[2]=o,s[3]=t,s[4]=r,s[5]=q,s[6]=n,s[7]=a,s[8]=l,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this},extractBasis:function(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,i=t.elements,r=this.elements,a=n[0],o=n[3],q=n[6],l=n[1],s=n[4],c=n[7],h=n[2],u=n[5],m=n[8],p=i[0],d=i[3],f=i[6],x=i[1],g=i[4],v=i[7],_=i[2],y=i[5],b=i[8];return r[0]=a*p+o*x+q*_,r[3]=a*d+o*g+q*y,r[6]=a*f+o*v+q*b,r[1]=l*p+s*x+c*_,r[4]=l*d+s*g+c*y,r[7]=l*f+s*v+c*b,r[2]=h*p+u*x+m*_,r[5]=h*d+u*g+m*y,r[8]=h*f+u*v+m*b,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],o=e[5],q=e[6],l=e[7],s=e[8];return t*a*s-t*o*l-n*r*s+n*o*q+i*r*l-i*a*q},getInverse:function(e,t){void 0!==t&&console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");var n=e.elements,i=this.elements,r=n[0],a=n[1],o=n[2],q=n[3],l=n[4],s=n[5],c=n[6],h=n[7],u=n[8],m=u*l-s*h,p=s*c-u*q,d=h*q-l*c,f=r*m+a*p+o*d;if(0===f)return this.set(0,0,0,0,0,0,0,0,0);var x=1/f;return i[0]=m*x,i[1]=(o*h-u*a)*x,i[2]=(s*a-o*l)*x,i[3]=p*x,i[4]=(u*r-o*c)*x,i[5]=(o*q-s*r)*x,i[6]=d*x,i[7]=(a*c-h*r)*x,i[8]=(l*r-a*q)*x,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,n,i,r,a,o){var q=Math.cos(r),l=Math.sin(r);this.set(n*q,n*l,-n*(q*a+l*o)+a+e,-i*l,i*q,-i*(-l*a+q*o)+o+t,0,0,1)},scale:function(e,t){var n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this},rotate:function(e){var t=Math.cos(e),n=Math.sin(e),i=this.elements,r=i[0],a=i[3],o=i[6],q=i[1],l=i[4],s=i[7];return i[0]=t*r+n*q,i[3]=t*a+n*l,i[6]=t*o+n*s,i[1]=-n*r+t*q,i[4]=-n*a+t*l,i[7]=-n*o+t*s,this},translate:function(e,t){var n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this},equals:function(e){for(var t=this.elements,n=e.elements,i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<9;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}});var c={getDataURL:function(e){var t;if("undefined"==typeof HTMLCanvasElement)return e.src;if(e instanceof HTMLCanvasElement)t=e;else{void 0===o&&(o=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),o.width=e.width,o.height=e.height;var n=o.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=o}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}},h=0;function u(e,t,n,i,r,a,o,c,m,p){Object.defineProperty(this,"id",{value:h++}),this.uuid=q.generateUUID(),this.name="",this.image=void 0!==e?e:u.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:u.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:1001,this.wrapT=void 0!==i?i:1001,this.magFilter=void 0!==r?r:1006,this.minFilter=void 0!==a?a:1008,this.anisotropy=void 0!==m?m:1,this.format=void 0!==o?o:1023,this.internalFormat=null,this.type=void 0!==c?c:1009,this.offset=new l(0,0),this.repeat=new l(1,1),this.center=new l(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new s,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==p?p:3e3,this.version=0,this.onUpdate=null}function m(e,t,n,i){this.x=e||0,this.y=t||0,this.z=n||0,this.w=void 0!==i?i:1}function p(e,t,n){this.width=e,this.height=t,this.scissor=new m(0,0,e,t),this.scissorTest=!1,this.viewport=new m(0,0,e,t),n=n||{},this.texture=new u(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:1006,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function d(e,t,n){p.call(this,e,t,n),this.samples=4}function f(e,t,n,i){this._x=e||0,this._y=t||0,this._z=n||0,this._w=void 0!==i?i:1}u.DEFAULT_IMAGE=void 0,u.DEFAULT_MAPPING=300,u.prototype=Object.assign(Object.create(i.prototype),{constructor:u,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var i=this.image;if(void 0===i.uuid&&(i.uuid=q.generateUUID()),!t&&void 0===e.images[i.uuid]){var r;if(Array.isArray(i)){r=[];for(var a=0,o=i.length;a<o;a++)r.push(c.getDataURL(i[a]))}else r=c.getDataURL(i);e.images[i.uuid]={uuid:i.uuid,url:r}}n.image=i.uuid}return t||(e.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case 1e3:e.x=e.x-Math.floor(e.x);break;case 1001:e.x=e.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case 1e3:e.y=e.y-Math.floor(e.y);break;case 1001:e.y=e.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}}),Object.defineProperty(u.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.defineProperties(m.prototype,{width:{get:function(){return this.z},set:function(e){this.z=e}},height:{get:function(){return this.w},set:function(e){this.w=e}}}),Object.assign(m.prototype,{isVector4:!0,set:function(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,n=this.y,i=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*t+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*t+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*t+a[7]*n+a[11]*i+a[15]*r,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,n,i,r,a=e.elements,o=a[0],q=a[4],l=a[8],s=a[1],c=a[5],h=a[9],u=a[2],m=a[6],p=a[10];if(Math.abs(q-s)<.01&&Math.abs(l-u)<.01&&Math.abs(h-m)<.01){if(Math.abs(q+s)<.1&&Math.abs(l+u)<.1&&Math.abs(h+m)<.1&&Math.abs(o+c+p-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var d=(o+1)/2,f=(c+1)/2,x=(p+1)/2,g=(q+s)/4,v=(l+u)/4,_=(h+m)/4;return d>f&&d>x?d<.01?(n=0,i=.707106781,r=.707106781):(i=g/(n=Math.sqrt(d)),r=v/n):f>x?f<.01?(n=.707106781,i=0,r=.707106781):(n=g/(i=Math.sqrt(f)),r=_/i):x<.01?(n=.707106781,i=.707106781,r=0):(n=v/(r=Math.sqrt(x)),i=_/r),this.set(n,i,r,t),this}var y=Math.sqrt((m-h)*(m-h)+(l-u)*(l-u)+(s-q)*(s-q));return Math.abs(y)<.001&&(y=1),this.x=(m-h)/y,this.y=(l-u)/y,this.z=(s-q)/y,this.w=Math.acos((o+c+p-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),p.prototype=Object.assign(Object.create(i.prototype),{constructor:p,isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),d.prototype=Object.assign(Object.create(p.prototype),{constructor:d,isWebGLMultisampleRenderTarget:!0,copy:function(e){return p.prototype.copy.call(this,e),this.samples=e.samples,this}}),Object.assign(f,{slerp:function(e,t,n,i){return n.copy(e).slerp(t,i)},slerpFlat:function(e,t,n,i,r,a,o){var q=n[i+0],l=n[i+1],s=n[i+2],c=n[i+3],h=r[a+0],u=r[a+1],m=r[a+2],p=r[a+3];if(c!==p||q!==h||l!==u||s!==m){var d=1-o,f=q*h+l*u+s*m+c*p,x=f>=0?1:-1,g=1-f*f;if(g>Number.EPSILON){var v=Math.sqrt(g),_=Math.atan2(v,f*x);d=Math.sin(d*_)/v,o=Math.sin(o*_)/v}var y=o*x;if(q=q*d+h*y,l=l*d+u*y,s=s*d+m*y,c=c*d+p*y,d===1-o){var b=1/Math.sqrt(q*q+l*l+s*s+c*c);q*=b,l*=b,s*=b,c*=b}}e[t]=q,e[t+1]=l,e[t+2]=s,e[t+3]=c}}),Object.defineProperties(f.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this._onChangeCallback()}}}),Object.assign(f.prototype,{isQuaternion:!0,set:function(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=e._x,i=e._y,r=e._z,a=e.order,o=Math.cos,q=Math.sin,l=o(n/2),s=o(i/2),c=o(r/2),h=q(n/2),u=q(i/2),m=q(r/2);return"XYZ"===a?(this._x=h*s*c+l*u*m,this._y=l*u*c-h*s*m,this._z=l*s*m+h*u*c,this._w=l*s*c-h*u*m):"YXZ"===a?(this._x=h*s*c+l*u*m,this._y=l*u*c-h*s*m,this._z=l*s*m-h*u*c,this._w=l*s*c+h*u*m):"ZXY"===a?(this._x=h*s*c-l*u*m,this._y=l*u*c+h*s*m,this._z=l*s*m+h*u*c,this._w=l*s*c-h*u*m):"ZYX"===a?(this._x=h*s*c-l*u*m,this._y=l*u*c+h*s*m,this._z=l*s*m-h*u*c,this._w=l*s*c+h*u*m):"YZX"===a?(this._x=h*s*c+l*u*m,this._y=l*u*c+h*s*m,this._z=l*s*m-h*u*c,this._w=l*s*c-h*u*m):"XZY"===a&&(this._x=h*s*c-l*u*m,this._y=l*u*c-h*s*m,this._z=l*s*m+h*u*c,this._w=l*s*c+h*u*m),!1!==t&&this._onChangeCallback(),this},setFromAxisAngle:function(e,t){var n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this},setFromRotationMatrix:function(e){var t,n=e.elements,i=n[0],r=n[4],a=n[8],o=n[1],q=n[5],l=n[9],s=n[2],c=n[6],h=n[10],u=i+q+h;return u>0?(t=.5/Math.sqrt(u+1),this._w=.25/t,this._x=(c-l)*t,this._y=(a-s)*t,this._z=(o-r)*t):i>q&&i>h?(t=2*Math.sqrt(1+i-q-h),this._w=(c-l)/t,this._x=.25*t,this._y=(r+o)/t,this._z=(a+s)/t):q>h?(t=2*Math.sqrt(1+q-i-h),this._w=(a-s)/t,this._x=(r+o)/t,this._y=.25*t,this._z=(l+c)/t):(t=2*Math.sqrt(1+h-i-q),this._w=(o-r)/t,this._x=(a+s)/t,this._y=(l+c)/t,this._z=.25*t),this._onChangeCallback(),this},setFromUnitVectors:function(e,t){var n=e.dot(t)+1;return n<1e-6?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()},angleTo:function(e){return 2*Math.acos(Math.abs(q.clamp(this.dot(e),-1,1)))},rotateTowards:function(e,t){var n=this.angleTo(e);if(0===n)return this;var i=Math.min(1,t/n);return this.slerp(e,i),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var n=e._x,i=e._y,r=e._z,a=e._w,o=t._x,q=t._y,l=t._z,s=t._w;return this._x=n*s+a*o+i*l-r*q,this._y=i*s+a*q+r*o-n*l,this._z=r*s+a*l+n*q-i*o,this._w=a*s-n*o-i*q-r*l,this._onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var n=this._x,i=this._y,r=this._z,a=this._w,o=a*e._w+n*e._x+i*e._y+r*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;var q=1-o*o;if(q<=Number.EPSILON){var l=1-t;return this._w=l*a+t*this._w,this._x=l*n+t*this._x,this._y=l*i+t*this._y,this._z=l*r+t*this._z,this.normalize(),this._onChangeCallback(),this}var s=Math.sqrt(q),c=Math.atan2(s,o),h=Math.sin((1-t)*c)/s,u=Math.sin(t*c)/s;return this._w=a*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},fromBufferAttribute:function(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}});var x=new v,g=new f;function v(e,t,n){this.x=e||0,this.y=t||0,this.z=n||0}Object.assign(v.prototype,{isVector3:!0,set:function(e,t,n){return this.x=e,this.y=t,this.z=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(g.setFromEuler(e))},applyAxisAngle:function(e,t){return this.applyQuaternion(g.setFromAxisAngle(e,t))},applyMatrix3:function(e){var t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this},applyNormalMatrix:function(e){return this.applyMatrix3(e).normalize()},applyMatrix4:function(e){var t=this.x,n=this.y,i=this.z,r=e.elements,a=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*a,this},applyQuaternion:function(e){var t=this.x,n=this.y,i=this.z,r=e.x,a=e.y,o=e.z,q=e.w,l=q*t+a*i-o*n,s=q*n+o*t-r*i,c=q*i+r*n-a*t,h=-r*t-a*n-o*i;return this.x=l*q+h*-r+s*-o-c*-a,this.y=s*q+h*-a+c*-r-l*-o,this.z=c*q+h*-o+l*-a-s*-r,this},project:function(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)},unproject:function(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)},transformDirection:function(e){var t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i,this.y=r[1]*t+r[5]*n+r[9]*i,this.z=r[2]*t+r[6]*n+r[10]*i,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this},clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},cross:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var n=e.x,i=e.y,r=e.z,a=t.x,o=t.y,q=t.z;return this.x=i*q-r*o,this.y=r*a-n*q,this.z=n*o-i*a,this},projectOnVector:function(e){var t=e.lengthSq();if(0===t)return this.set(0,0,0);var n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)},projectOnPlane:function(e){return x.copy(this).projectOnVector(e),this.sub(x)},reflect:function(e){return this.sub(x.copy(e).multiplyScalar(2*this.dot(e)))},angleTo:function(e){var t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;var n=this.dot(e)/t;return Math.acos(q.clamp(n,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)},setFromSphericalCoords:function(e,t,n){var i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this},setFromCylindrical:function(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)},setFromCylindricalCoords:function(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},setFromMatrix3Column:function(e,t){return this.fromArray(e.elements,3*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}});var _=new v,y=new E,b=new v(0,0,0),w=new v(1,1,1),M=new v,S=new v,T=new v;function E(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(E.prototype,{isMatrix4:!0,set:function(e,t,n,i,r,a,o,q,l,s,c,h,u,m,p,d){var f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=i,f[1]=r,f[5]=a,f[9]=o,f[13]=q,f[2]=l,f[6]=s,f[10]=c,f[14]=h,f[3]=u,f[7]=m,f[11]=p,f[15]=d,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new E).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this},copyPosition:function(e){var t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this},extractBasis:function(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this},extractRotation:function(e){var t=this.elements,n=e.elements,i=1/_.setFromMatrixColumn(e,0).length(),r=1/_.setFromMatrixColumn(e,1).length(),a=1/_.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromEuler:function(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,n=e.x,i=e.y,r=e.z,a=Math.cos(n),o=Math.sin(n),q=Math.cos(i),l=Math.sin(i),s=Math.cos(r),c=Math.sin(r);if("XYZ"===e.order){var h=a*s,u=a*c,m=o*s,p=o*c;t[0]=q*s,t[4]=-q*c,t[8]=l,t[1]=u+m*l,t[5]=h-p*l,t[9]=-o*q,t[2]=p-h*l,t[6]=m+u*l,t[10]=a*q}else if("YXZ"===e.order){var d=q*s,f=q*c,x=l*s,g=l*c;t[0]=d+g*o,t[4]=x*o-f,t[8]=a*l,t[1]=a*c,t[5]=a*s,t[9]=-o,t[2]=f*o-x,t[6]=g+d*o,t[10]=a*q}else if("ZXY"===e.order){d=q*s,f=q*c,x=l*s,g=l*c;t[0]=d-g*o,t[4]=-a*c,t[8]=x+f*o,t[1]=f+x*o,t[5]=a*s,t[9]=g-d*o,t[2]=-a*l,t[6]=o,t[10]=a*q}else if("ZYX"===e.order){h=a*s,u=a*c,m=o*s,p=o*c;t[0]=q*s,t[4]=m*l-u,t[8]=h*l+p,t[1]=q*c,t[5]=p*l+h,t[9]=u*l-m,t[2]=-l,t[6]=o*q,t[10]=a*q}else if("YZX"===e.order){var v=a*q,_=a*l,y=o*q,b=o*l;t[0]=q*s,t[4]=b-v*c,t[8]=y*c+_,t[1]=c,t[5]=a*s,t[9]=-o*s,t[2]=-l*s,t[6]=_*c+y,t[10]=v-b*c}else if("XZY"===e.order){v=a*q,_=a*l,y=o*q,b=o*l;t[0]=q*s,t[4]=-c,t[8]=l*s,t[1]=v*c+b,t[5]=a*s,t[9]=_*c-y,t[2]=y*c-_,t[6]=o*s,t[10]=b*c+v}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){return this.compose(b,e,w)},lookAt:function(e,t,n){var i=this.elements;return T.subVectors(e,t),0===T.lengthSq()&&(T.z=1),T.normalize(),M.crossVectors(n,T),0===M.lengthSq()&&(1===Math.abs(n.z)?T.x+=1e-4:T.z+=1e-4,T.normalize(),M.crossVectors(n,T)),M.normalize(),S.crossVectors(T,M),i[0]=M.x,i[4]=S.x,i[8]=T.x,i[1]=M.y,i[5]=S.y,i[9]=T.y,i[2]=M.z,i[6]=S.z,i[10]=T.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,i=t.elements,r=this.elements,a=n[0],o=n[4],q=n[8],l=n[12],s=n[1],c=n[5],h=n[9],u=n[13],m=n[2],p=n[6],d=n[10],f=n[14],x=n[3],g=n[7],v=n[11],_=n[15],y=i[0],b=i[4],w=i[8],M=i[12],S=i[1],T=i[5],E=i[9],z=i[13],A=i[2],L=i[6],C=i[10],R=i[14],P=i[3],O=i[7],N=i[11],D=i[15];return r[0]=a*y+o*S+q*A+l*P,r[4]=a*b+o*T+q*L+l*O,r[8]=a*w+o*E+q*C+l*N,r[12]=a*M+o*z+q*R+l*D,r[1]=s*y+c*S+h*A+u*P,r[5]=s*b+c*T+h*L+u*O,r[9]=s*w+c*E+h*C+u*N,r[13]=s*M+c*z+h*R+u*D,r[2]=m*y+p*S+d*A+f*P,r[6]=m*b+p*T+d*L+f*O,r[10]=m*w+p*E+d*C+f*N,r[14]=m*M+p*z+d*R+f*D,r[3]=x*y+g*S+v*A+_*P,r[7]=x*b+g*T+v*L+_*O,r[11]=x*w+g*E+v*C+_*N,r[15]=x*M+g*z+v*R+_*D,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},determinant:function(){var e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],a=e[1],o=e[5],q=e[9],l=e[13],s=e[2],c=e[6],h=e[10],u=e[14];return e[3]*(+r*q*c-i*l*c-r*o*h+n*l*h+i*o*u-n*q*u)+e[7]*(+t*q*u-t*l*h+r*a*h-i*a*u+i*l*s-r*q*s)+e[11]*(+t*l*c-t*o*u-r*a*c+n*a*u+r*o*s-n*l*s)+e[15]*(-i*o*s-t*q*c+t*o*h+i*a*c-n*a*h+n*q*s)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e,t,n){var i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this},getInverse:function(e,t){void 0!==t&&console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");var n=this.elements,i=e.elements,r=i[0],a=i[1],o=i[2],q=i[3],l=i[4],s=i[5],c=i[6],h=i[7],u=i[8],m=i[9],p=i[10],d=i[11],f=i[12],x=i[13],g=i[14],v=i[15],_=m*g*h-x*p*h+x*c*d-s*g*d-m*c*v+s*p*v,y=f*p*h-u*g*h-f*c*d+l*g*d+u*c*v-l*p*v,b=u*x*h-f*m*h+f*s*d-l*x*d-u*s*v+l*m*v,w=f*m*c-u*x*c-f*s*p+l*x*p+u*s*g-l*m*g,M=r*_+a*y+o*b+q*w;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);var S=1/M;return n[0]=_*S,n[1]=(x*p*q-m*g*q-x*o*d+a*g*d+m*o*v-a*p*v)*S,n[2]=(s*g*q-x*c*q+x*o*h-a*g*h-s*o*v+a*c*v)*S,n[3]=(m*c*q-s*p*q-m*o*h+a*p*h+s*o*d-a*c*d)*S,n[4]=y*S,n[5]=(u*g*q-f*p*q+f*o*d-r*g*d-u*o*v+r*p*v)*S,n[6]=(f*c*q-l*g*q-f*o*h+r*g*h+l*o*v-r*c*v)*S,n[7]=(l*p*q-u*c*q+u*o*h-r*p*h-l*o*d+r*c*d)*S,n[8]=b*S,n[9]=(f*m*q-u*x*q-f*a*d+r*x*d+u*a*v-r*m*v)*S,n[10]=(l*x*q-f*s*q+f*a*h-r*x*h-l*a*v+r*s*v)*S,n[11]=(u*s*q-l*m*q-u*a*h+r*m*h+l*a*d-r*s*d)*S,n[12]=w*S,n[13]=(u*x*o-f*m*o+f*a*p-r*x*p-u*a*g+r*m*g)*S,n[14]=(f*s*o-l*x*o-f*a*c+r*x*c+l*a*g-r*s*g)*S,n[15]=(l*m*o-u*s*o+u*a*c-r*m*c-l*a*p+r*s*p)*S,this},scale:function(e){var t=this.elements,n=e.x,i=e.y,r=e.z;return t[0]*=n,t[4]*=i,t[8]*=r,t[1]*=n,t[5]*=i,t[9]*=r,t[2]*=n,t[6]*=i,t[10]*=r,t[3]*=n,t[7]*=i,t[11]*=r,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))},makeTranslation:function(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var n=Math.cos(t),i=Math.sin(t),r=1-n,a=e.x,o=e.y,q=e.z,l=r*a,s=r*o;return this.set(l*a+n,l*o-i*q,l*q+i*o,0,l*o+i*q,s*o+n,s*q-i*a,0,l*q-i*o,s*q+i*a,r*q*q+n,0,0,0,0,1),this},makeScale:function(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(e,t,n){return this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,n){var i=this.elements,r=t._x,a=t._y,o=t._z,q=t._w,l=r+r,s=a+a,c=o+o,h=r*l,u=r*s,m=r*c,p=a*s,d=a*c,f=o*c,x=q*l,g=q*s,v=q*c,_=n.x,y=n.y,b=n.z;return i[0]=(1-(p+f))*_,i[1]=(u+v)*_,i[2]=(m-g)*_,i[3]=0,i[4]=(u-v)*y,i[5]=(1-(h+f))*y,i[6]=(d+x)*y,i[7]=0,i[8]=(m+g)*b,i[9]=(d-x)*b,i[10]=(1-(h+p))*b,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this},decompose:function(e,t,n){var i=this.elements,r=_.set(i[0],i[1],i[2]).length(),a=_.set(i[4],i[5],i[6]).length(),o=_.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),e.x=i[12],e.y=i[13],e.z=i[14],y.copy(this);var q=1/r,l=1/a,s=1/o;return y.elements[0]*=q,y.elements[1]*=q,y.elements[2]*=q,y.elements[4]*=l,y.elements[5]*=l,y.elements[6]*=l,y.elements[8]*=s,y.elements[9]*=s,y.elements[10]*=s,t.setFromRotationMatrix(y),n.x=r,n.y=a,n.z=o,this},makePerspective:function(e,t,n,i,r,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,q=2*r/(t-e),l=2*r/(n-i),s=(t+e)/(t-e),c=(n+i)/(n-i),h=-(a+r)/(a-r),u=-2*a*r/(a-r);return o[0]=q,o[4]=0,o[8]=s,o[12]=0,o[1]=0,o[5]=l,o[9]=c,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=u,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(e,t,n,i,r,a){var o=this.elements,q=1/(t-e),l=1/(n-i),s=1/(a-r),c=(t+e)*q,h=(n+i)*l,u=(a+r)*s;return o[0]=2*q,o[4]=0,o[8]=0,o[12]=-c,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*s,o[14]=-u,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var t=this.elements,n=e.elements,i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<16;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}});var z=new E,A=new f;function L(e,t,n,i){this._x=e||0,this._y=t||0,this._z=n||0,this._order=i||L.DefaultOrder}function C(){this.mask=1}L.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],L.DefaultOrder="XYZ",Object.defineProperties(L.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this._onChangeCallback()}}}),Object.assign(L.prototype,{isEuler:!0,set:function(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._order=i||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this},setFromRotationMatrix:function(e,t,n){var i=q.clamp,r=e.elements,a=r[0],o=r[4],l=r[8],s=r[1],c=r[5],h=r[9],u=r[2],m=r[6],p=r[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(i(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(m,c),this._z=0)):"YXZ"===t?(this._x=Math.asin(-i(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(l,p),this._z=Math.atan2(s,c)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===t?(this._x=Math.asin(i(m,-1,1)),Math.abs(m)<.9999999?(this._y=Math.atan2(-u,p),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(s,a))):"ZYX"===t?(this._y=Math.asin(-i(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(m,p),this._z=Math.atan2(s,a)):(this._x=0,this._z=Math.atan2(-o,c))):"YZX"===t?(this._z=Math.asin(i(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(l,p))):"XZY"===t?(this._z=Math.asin(-i(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(m,c),this._y=Math.atan2(l,a)):(this._x=Math.atan2(-h,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==n&&this._onChangeCallback(),this},setFromQuaternion:function(e,t,n){return z.makeRotationFromQuaternion(e),this.setFromRotationMatrix(z,t,n)},setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(e){return A.setFromEuler(this),this.setFromQuaternion(A,e)},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new v(this._x,this._y,this._z)},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}}),Object.assign(C.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},enableAll:function(){this.mask=-1},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},disableAll:function(){this.mask=0},test:function(e){return 0!=(this.mask&e.mask)}});var R=0,P=new v,O=new f,N=new E,D=new v,I=new v,k=new v,U=new f,B=new v(1,0,0),F=new v(0,1,0),j=new v(0,0,1),H={type:"added"},G={type:"removed"};function V(){Object.defineProperty(this,"id",{value:R++}),this.uuid=q.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=V.DefaultUp.clone();var e=new v,t=new L,n=new f,i=new v(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new E},normalMatrix:{value:new s}}),this.matrix=new E,this.matrixWorld=new E,this.matrixAutoUpdate=V.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new C,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function W(){V.call(this),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}V.DefaultUp=new v(0,1,0),V.DefaultMatrixAutoUpdate=!0,V.prototype=Object.assign(Object.create(i.prototype),{constructor:V,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){return O.setFromAxisAngle(e,t),this.quaternion.multiply(O),this},rotateOnWorldAxis:function(e,t){return O.setFromAxisAngle(e,t),this.quaternion.premultiply(O),this},rotateX:function(e){return this.rotateOnAxis(B,e)},rotateY:function(e){return this.rotateOnAxis(F,e)},rotateZ:function(e){return this.rotateOnAxis(j,e)},translateOnAxis:function(e,t){return P.copy(e).applyQuaternion(this.quaternion),this.position.add(P.multiplyScalar(t)),this},translateX:function(e){return this.translateOnAxis(B,e)},translateY:function(e){return this.translateOnAxis(F,e)},translateZ:function(e){return this.translateOnAxis(j,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(N.getInverse(this.matrixWorld))},lookAt:function(e,t,n){e.isVector3?D.copy(e):D.set(e,t,n);var i=this.parent;this.updateWorldMatrix(!0,!1),I.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?N.lookAt(I,D,this.up):N.lookAt(D,I,this.up),this.quaternion.setFromRotationMatrix(N),i&&(N.extractRotation(i.matrixWorld),O.setFromRotationMatrix(N),this.quaternion.premultiply(O.inverse()))},add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(H)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var n=this.children.indexOf(e);return-1!==n&&(e.parent=null,this.children.splice(n,1),e.dispatchEvent(G)),this},attach:function(e){return this.updateWorldMatrix(!0,!1),N.getInverse(this.matrixWorld),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),N.multiply(e.parent.matrixWorld)),e.applyMatrix4(N),e.updateWorldMatrix(!1,!1),this.add(e),this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var n=0,i=this.children.length;n<i;n++){var r=this.children[n].getObjectByProperty(e,t);if(void 0!==r)return r}},getWorldPosition:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new v),this.updateMatrixWorld(!0),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),e=new f),this.updateMatrixWorld(!0),this.matrixWorld.decompose(I,e,k),e},getWorldScale:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new v),this.updateMatrixWorld(!0),this.matrixWorld.decompose(I,U,e),e},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new v),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);for(var t=this.children,n=0,i=t.length;n<i;n++)t[n].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)},updateWorldMatrix:function(e,t){var n=this.parent;if(!0===e&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t)for(var i=this.children,r=0,a=i.length;r<a;r++)i[r].updateWorldMatrix(!1,!0)},toJSON:function(e){var t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var i={};function r(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON()),this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var q=0,l=o.length;q<l;q++){var s=o[q];r(e.shapes,s)}else r(e.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var c=[];for(q=0,l=this.material.length;q<l;q++)c.push(r(e.materials,this.material[q]));i.material=c}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(q=0;q<this.children.length;q++)i.children.push(this.children[q].toJSON(e).object)}if(t){var h=d(e.geometries),u=d(e.materials),m=d(e.textures),p=d(e.images);o=d(e.shapes);h.length>0&&(n.geometries=h),u.length>0&&(n.materials=u),m.length>0&&(n.textures=m),p.length>0&&(n.images=p),o.length>0&&(n.shapes=o)}return n.object=i,n;function d(e){var t=[];for(var n in e){var i=e[n];delete i.metadata,t.push(i)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var n=0;n<e.children.length;n++){var i=e.children[n];this.add(i.clone())}return this}}),W.prototype=Object.assign(Object.create(V.prototype),{constructor:W,isScene:!0,copy:function(e,t){return V.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.environment&&(this.environment=e.environment.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=V.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.environment&&(t.object.environment=this.environment.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t},dispose:function(){this.dispatchEvent({type:"dispose"})}});var X=[new v,new v,new v,new v,new v,new v,new v,new v],Y=new v,J=new oe,Z=new v,K=new v,$=new v,Q=new v,ee=new v,te=new v,ne=new v,ie=new v,re=new v,ae=new v;function oe(e,t){this.min=void 0!==e?e:new v(1/0,1/0,1/0),this.max=void 0!==t?t:new v(-1/0,-1/0,-1/0)}function qe(e,t,n,i,r){var a,o;for(a=0,o=e.length-3;a<=o;a+=3){ae.fromArray(e,a);var q=r.x*Math.abs(ae.x)+r.y*Math.abs(ae.y)+r.z*Math.abs(ae.z),l=t.dot(ae),s=n.dot(ae),c=i.dot(ae);if(Math.max(-Math.max(l,s,c),Math.min(l,s,c))>q)return!1}return!0}Object.assign(oe.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0,q=0,l=e.length;q<l;q+=3){var s=e[q],c=e[q+1],h=e[q+2];s<t&&(t=s),c<n&&(n=c),h<i&&(i=h),s>r&&(r=s),c>a&&(a=c),h>o&&(o=h)}return this.min.set(t,n,i),this.max.set(r,a,o),this},setFromBufferAttribute:function(e){for(var t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0,q=0,l=e.count;q<l;q++){var s=e.getX(q),c=e.getY(q),h=e.getZ(q);s<t&&(t=s),c<n&&(n=c),h<i&&(i=h),s>r&&(r=s),c>a&&(a=c),h>o&&(o=h)}return this.min.set(t,n,i),this.max.set(r,a,o),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var n=Y.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this},setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new v),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new v),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(e){e.updateWorldMatrix(!1,!1);var t=e.geometry;void 0!==t&&(null===t.boundingBox&&t.computeBoundingBox(),J.copy(t.boundingBox),J.applyMatrix4(e.matrixWorld),this.union(J));for(var n=e.children,i=0,r=n.length;i<r;i++)this.expandByObject(n[i]);return this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new v),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(e){return this.clampPoint(e.center,Y),Y.distanceToSquared(e.center)<=e.radius*e.radius},intersectsPlane:function(e){var t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant},intersectsTriangle:function(e){if(this.isEmpty())return!1;this.getCenter(ne),ie.subVectors(this.max,ne),Z.subVectors(e.a,ne),K.subVectors(e.b,ne),$.subVectors(e.c,ne),Q.subVectors(K,Z),ee.subVectors($,K),te.subVectors(Z,$);var t=[0,-Q.z,Q.y,0,-ee.z,ee.y,0,-te.z,te.y,Q.z,0,-Q.x,ee.z,0,-ee.x,te.z,0,-te.x,-Q.y,Q.x,0,-ee.y,ee.x,0,-te.y,te.x,0];return!!qe(t,Z,K,$,ie)&&(!!qe(t=[1,0,0,0,1,0,0,0,1],Z,K,$,ie)&&(re.crossVectors(Q,ee),qe(t=[re.x,re.y,re.z],Z,K,$,ie)))},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new v),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return Y.copy(e).clamp(this.min,this.max).sub(e).length()},getBoundingSphere:function(e){return void 0===e&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=.5*this.getSize(Y).length(),e},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(e){return this.isEmpty()||(X[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),X[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),X[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),X[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),X[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),X[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),X[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),X[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(X)),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var le=new oe;function se(e,t){this.center=void 0!==e?e:new v,this.radius=void 0!==t?t:0}Object.assign(se.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(e,t){var n=this.center;void 0!==t?n.copy(t):le.setFromPoints(e).getCenter(n);for(var i=0,r=0,a=e.length;r<a;r++)i=Math.max(i,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var n=this.center.distanceToSquared(e);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new v),t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(e){return void 0===e&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new oe),e.set(this.center,this.center),e.expandByScalar(this.radius),e},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}});var ce=new v,he=new v,ue=new v,me=new v,pe=new v,de=new v,fe=new v;function xe(e,t){this.origin=void 0!==e?e:new v,this.direction=void 0!==t?t:new v(0,0,-1)}Object.assign(xe.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new v),t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(e){return this.origin.copy(this.at(e,ce)),this},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new v),t.subVectors(e,this.origin);var n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(e){var t=ce.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ce.copy(this.direction).multiplyScalar(t).add(this.origin),ce.distanceToSquared(e))},distanceSqToSegment:function(e,t,n,i){he.copy(e).add(t).multiplyScalar(.5),ue.copy(t).sub(e).normalize(),me.copy(this.origin).sub(he);var r,a,o,q,l=.5*e.distanceTo(t),s=-this.direction.dot(ue),c=me.dot(this.direction),h=-me.dot(ue),u=me.lengthSq(),m=Math.abs(1-s*s);if(m>0)if(a=s*c-h,q=l*m,(r=s*h-c)>=0)if(a>=-q)if(a<=q){var p=1/m;o=(r*=p)*(r+s*(a*=p)+2*c)+a*(s*r+a+2*h)+u}else a=l,o=-(r=Math.max(0,-(s*a+c)))*r+a*(a+2*h)+u;else a=-l,o=-(r=Math.max(0,-(s*a+c)))*r+a*(a+2*h)+u;else a<=-q?o=-(r=Math.max(0,-(-s*l+c)))*r+(a=r>0?-l:Math.min(Math.max(-l,-h),l))*(a+2*h)+u:a<=q?(r=0,o=(a=Math.min(Math.max(-l,-h),l))*(a+2*h)+u):o=-(r=Math.max(0,-(s*l+c)))*r+(a=r>0?l:Math.min(Math.max(-l,-h),l))*(a+2*h)+u;else a=s>0?-l:l,o=-(r=Math.max(0,-(s*a+c)))*r+a*(a+2*h)+u;return n&&n.copy(this.direction).multiplyScalar(r).add(this.origin),i&&i.copy(ue).multiplyScalar(a).add(he),o},intersectSphere:function(e,t){ce.subVectors(e.center,this.origin);var n=ce.dot(this.direction),i=ce.dot(ce)-n*n,r=e.radius*e.radius;if(i>r)return null;var a=Math.sqrt(r-i),o=n-a,q=n+a;return o<0&&q<0?null:o<0?this.at(q,t):this.at(o,t)},intersectsSphere:function(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null},intersectPlane:function(e,t){var n=this.distanceToPlane(e);return null===n?null:this.at(n,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var n,i,r,a,o,q,l=1/this.direction.x,s=1/this.direction.y,c=1/this.direction.z,h=this.origin;return l>=0?(n=(e.min.x-h.x)*l,i=(e.max.x-h.x)*l):(n=(e.max.x-h.x)*l,i=(e.min.x-h.x)*l),s>=0?(r=(e.min.y-h.y)*s,a=(e.max.y-h.y)*s):(r=(e.max.y-h.y)*s,a=(e.min.y-h.y)*s),n>a||r>i?null:((r>n||n!=n)&&(n=r),(a<i||i!=i)&&(i=a),c>=0?(o=(e.min.z-h.z)*c,q=(e.max.z-h.z)*c):(o=(e.max.z-h.z)*c,q=(e.min.z-h.z)*c),n>q||o>i?null:((o>n||n!=n)&&(n=o),(q<i||i!=i)&&(i=q),i<0?null:this.at(n>=0?n:i,t)))},intersectsBox:function(e){return null!==this.intersectBox(e,ce)},intersectTriangle:function(e,t,n,i,r){pe.subVectors(t,e),de.subVectors(n,e),fe.crossVectors(pe,de);var a,o=this.direction.dot(fe);if(o>0){if(i)return null;a=1}else{if(!(o<0))return null;a=-1,o=-o}me.subVectors(this.origin,e);var q=a*this.direction.dot(de.crossVectors(me,de));if(q<0)return null;var l=a*this.direction.dot(pe.cross(me));if(l<0)return null;if(q+l>o)return null;var s=-a*me.dot(fe);return s<0?null:this.at(s/o,r)},applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}});var ge=new v,ve=new v,_e=new s;function ye(e,t){this.normal=void 0!==e?e:new v(1,0,0),this.constant=void 0!==t?t:0}Object.assign(ye.prototype,{isPlane:!0,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(e,t,n){var i=ge.subVectors(n,t).cross(ve.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new v),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(e,t){void 0===t&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new v);var n=e.delta(ge),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(e.start)?t.copy(e.start):void 0;var r=-(e.start.dot(this.normal)+this.constant)/i;return r<0||r>1?void 0:t.copy(n).multiplyScalar(r).add(e.start)},intersectsLine:function(e){var t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return void 0===e&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new v),e.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(e,t){var n=t||_e.getNormalMatrix(e),i=this.coplanarPoint(ge).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this},translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}});var be=new v,we=new v,Me=new v,Se=new v,Te=new v,Ee=new v,ze=new v,Ae=new v,Le=new v,Ce=new v;function Re(e,t,n){this.a=void 0!==e?e:new v,this.b=void 0!==t?t:new v,this.c=void 0!==n?n:new v}Object.assign(Re,{getNormal:function(e,t,n,i){void 0===i&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new v),i.subVectors(n,t),be.subVectors(e,t),i.cross(be);var r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)},getBarycoord:function(e,t,n,i,r){be.subVectors(i,t),we.subVectors(n,t),Me.subVectors(e,t);var a=be.dot(be),o=be.dot(we),q=be.dot(Me),l=we.dot(we),s=we.dot(Me),c=a*l-o*o;if(void 0===r&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),r=new v),0===c)return r.set(-2,-1,-1);var h=1/c,u=(l*q-o*s)*h,m=(a*s-o*q)*h;return r.set(1-u-m,m,u)},containsPoint:function(e,t,n,i){return Re.getBarycoord(e,t,n,i,Se),Se.x>=0&&Se.y>=0&&Se.x+Se.y<=1},getUV:function(e,t,n,i,r,a,o,q){return this.getBarycoord(e,t,n,i,Se),q.set(0,0),q.addScaledVector(r,Se.x),q.addScaledVector(a,Se.y),q.addScaledVector(o,Se.z),q},isFrontFacing:function(e,t,n,i){return be.subVectors(n,t),we.subVectors(e,t),be.cross(we).dot(i)<0}}),Object.assign(Re.prototype,{set:function(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this},setFromPointsAndIndices:function(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},getArea:function(){return be.subVectors(this.c,this.b),we.subVectors(this.a,this.b),.5*be.cross(we).length()},getMidpoint:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new v),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(e){return Re.getNormal(this.a,this.b,this.c,e)},getPlane:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new ye),e.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(e,t){return Re.getBarycoord(e,this.a,this.b,this.c,t)},getUV:function(e,t,n,i,r){return Re.getUV(e,this.a,this.b,this.c,t,n,i,r)},containsPoint:function(e){return Re.containsPoint(e,this.a,this.b,this.c)},isFrontFacing:function(e){return Re.isFrontFacing(this.a,this.b,this.c,e)},intersectsBox:function(e){return e.intersectsTriangle(this)},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new v);var n,i,r=this.a,a=this.b,o=this.c;Te.subVectors(a,r),Ee.subVectors(o,r),Ae.subVectors(e,r);var q=Te.dot(Ae),l=Ee.dot(Ae);if(q<=0&&l<=0)return t.copy(r);Le.subVectors(e,a);var s=Te.dot(Le),c=Ee.dot(Le);if(s>=0&&c<=s)return t.copy(a);var h=q*c-s*l;if(h<=0&&q>=0&&s<=0)return n=q/(q-s),t.copy(r).addScaledVector(Te,n);Ce.subVectors(e,o);var u=Te.dot(Ce),m=Ee.dot(Ce);if(m>=0&&u<=m)return t.copy(o);var p=u*l-q*m;if(p<=0&&l>=0&&m<=0)return i=l/(l-m),t.copy(r).addScaledVector(Ee,i);var d=s*m-u*c;if(d<=0&&c-s>=0&&u-m>=0)return ze.subVectors(o,a),i=(c-s)/(c-s+(u-m)),t.copy(a).addScaledVector(ze,i);var f=1/(d+p+h);return n=p*f,i=h*f,t.copy(r).addScaledVector(Te,n).addScaledVector(Ee,i)},equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}});var Pe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Oe={h:0,s:0,l:0},Ne={h:0,s:0,l:0};function De(e,t,n){return void 0===t&&void 0===n?this.set(e):this.setRGB(e,t,n)}function Ie(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}function ke(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function Ue(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}function Be(e,t,n,i,r,a){this.a=e,this.b=t,this.c=n,this.normal=i&&i.isVector3?i:new v,this.vertexNormals=Array.isArray(i)?i:[],this.color=r&&r.isColor?r:new De,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==a?a:0}Object.assign(De.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,n){return this.r=e,this.g=t,this.b=n,this},setHSL:function(e,t,n){if(e=q.euclideanModulo(e,1),t=q.clamp(t,0,1),n=q.clamp(n,0,1),0===t)this.r=this.g=this.b=n;else{var i=n<=.5?n*(1+t):n+t-n*t,r=2*n-i;this.r=Ie(r,i,e+1/3),this.g=Ie(r,i,e),this.b=Ie(r,i,e-1/3)}return this},setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var i,r=n[1],a=n[2];switch(r){case"rgb":case"rgba":if(i=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[5]),this;if(i=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[5]),this;break;case"hsl":case"hsla":if(i=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(i[1])/360,q=parseInt(i[2],10)/100,l=parseInt(i[3],10)/100;return t(i[5]),this.setHSL(o,q,l)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(e)){var s=n[1],c=s.length;if(3===c)return this.r=parseInt(s.charAt(0)+s.charAt(0),16)/255,this.g=parseInt(s.charAt(1)+s.charAt(1),16)/255,this.b=parseInt(s.charAt(2)+s.charAt(2),16)/255,this;if(6===c)return this.r=parseInt(s.charAt(0)+s.charAt(1),16)/255,this.g=parseInt(s.charAt(2)+s.charAt(3),16)/255,this.b=parseInt(s.charAt(4)+s.charAt(5),16)/255,this}return e&&e.length>0?this.setColorName(e):this},setColorName:function(e){var t=Pe[e];return void 0!==t?this.setHex(t):console.warn("THREE.Color: Unknown color "+e),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this},convertGammaToLinear:function(e){return this.copyGammaToLinear(this,e),this},convertLinearToGamma:function(e){return this.copyLinearToGamma(this,e),this},copySRGBToLinear:function(e){return this.r=ke(e.r),this.g=ke(e.g),this.b=ke(e.b),this},copyLinearToSRGB:function(e){return this.r=Ue(e.r),this.g=Ue(e.g),this.b=Ue(e.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){void 0===e&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});var t,n,i=this.r,r=this.g,a=this.b,o=Math.max(i,r,a),q=Math.min(i,r,a),l=(q+o)/2;if(q===o)t=0,n=0;else{var s=o-q;switch(n=l<=.5?s/(o+q):s/(2-o-q),o){case i:t=(r-a)/s+(r<a?6:0);break;case r:t=(a-i)/s+2;break;case a:t=(i-r)/s+4}t/=6}return e.h=t,e.s=n,e.l=l,e},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,n){return this.getHSL(Oe),Oe.h+=e,Oe.s+=t,Oe.l+=n,this.setHSL(Oe.h,Oe.s,Oe.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},lerpHSL:function(e,t){this.getHSL(Oe),e.getHSL(Ne);var n=q.lerp(Oe.h,Ne.h,t),i=q.lerp(Oe.s,Ne.s,t),r=q.lerp(Oe.l,Ne.l,t);return this.setHSL(n,i,r),this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}}),De.NAMES=Pe,Object.assign(Be.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,n=e.vertexNormals.length;t<n;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(t=0,n=e.vertexColors.length;t<n;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var Fe=0;function je(){Object.defineProperty(this,"id",{value:Fe++}),this.uuid=q.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.flatShading=!1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}function He(e){je.call(this),this.type="MeshBasicMaterial",this.color=new De(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(e)}je.prototype=Object.assign(Object.create(i.prototype),{constructor:je,isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var n=e[t];if(void 0!==n)if("shading"!==t){var i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){var t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(e){var t=[];for(var n in e){var i=e[n];delete i.metadata,t.push(i)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity,n.refractionRatio=this.refractionRatio,void 0!==this.combine&&(n.combine=this.combine),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),0!==this.side&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.morphNormals&&(n.morphNormals=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),t){var r=i(e.textures),a=i(e.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;var t=e.clippingPlanes,n=null;if(null!==t){var i=t.length;n=new Array(i);for(var r=0;r!==i;++r)n[r]=t[r].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(je.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),He.prototype=Object.create(je.prototype),He.prototype.constructor=He,He.prototype.isMeshBasicMaterial=!0,He.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this};var Ge=new v;function Ve(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}function We(e,t,n){Ve.call(this,new Int8Array(e),t,n)}function Xe(e,t,n){Ve.call(this,new Uint8Array(e),t,n)}function Ye(e,t,n){Ve.call(this,new Uint8ClampedArray(e),t,n)}function Je(e,t,n){Ve.call(this,new Int16Array(e),t,n)}function Ze(e,t,n){Ve.call(this,new Uint16Array(e),t,n)}function Ke(e,t,n){Ve.call(this,new Int32Array(e),t,n)}function $e(e,t,n){Ve.call(this,new Uint32Array(e),t,n)}function Qe(e,t,n){Ve.call(this,new Float32Array(e),t,n)}function et(e,t,n){Ve.call(this,new Float64Array(e),t,n)}function tt(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function nt(e){if(0===e.length)return-1/0;for(var t=e[0],n=1,i=e.length;n<i;++n)e[n]>t&&(t=e[n]);return t}Object.defineProperty(Ve.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(Ve.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(e){return this.usage=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this},copyAt:function(e,t,n){e*=this.itemSize,n*=t.itemSize;for(var i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,n=0,i=0,r=e.length;i<r;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),a=new De),t[n++]=a.r,t[n++]=a.g,t[n++]=a.b}return this},copyVector2sArray:function(e){for(var t=this.array,n=0,i=0,r=e.length;i<r;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),a=new l),t[n++]=a.x,t[n++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,n=0,i=0,r=e.length;i<r;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),a=new v),t[n++]=a.x,t[n++]=a.y,t[n++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,n=0,i=0,r=e.length;i<r;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),a=new m),t[n++]=a.x,t[n++]=a.y,t[n++]=a.z,t[n++]=a.w}return this},applyMatrix3:function(e){for(var t=0,n=this.count;t<n;t++)Ge.x=this.getX(t),Ge.y=this.getY(t),Ge.z=this.getZ(t),Ge.applyMatrix3(e),this.setXYZ(t,Ge.x,Ge.y,Ge.z);return this},applyMatrix4:function(e){for(var t=0,n=this.count;t<n;t++)Ge.x=this.getX(t),Ge.y=this.getY(t),Ge.z=this.getZ(t),Ge.applyMatrix4(e),this.setXYZ(t,Ge.x,Ge.y,Ge.z);return this},applyNormalMatrix:function(e){for(var t=0,n=this.count;t<n;t++)Ge.x=this.getX(t),Ge.y=this.getY(t),Ge.z=this.getZ(t),Ge.applyNormalMatrix(e),this.setXYZ(t,Ge.x,Ge.y,Ge.z);return this},transformDirection:function(e){for(var t=0,n=this.count;t<n;t++)Ge.x=this.getX(t),Ge.y=this.getY(t),Ge.z=this.getZ(t),Ge.transformDirection(e),this.setXYZ(t,Ge.x,Ge.y,Ge.z);return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this},setXYZ:function(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this},setXYZW:function(e,t,n,i,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=r,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),We.prototype=Object.create(Ve.prototype),We.prototype.constructor=We,Xe.prototype=Object.create(Ve.prototype),Xe.prototype.constructor=Xe,Ye.prototype=Object.create(Ve.prototype),Ye.prototype.constructor=Ye,Je.prototype=Object.create(Ve.prototype),Je.prototype.constructor=Je,Ze.prototype=Object.create(Ve.prototype),Ze.prototype.constructor=Ze,Ke.prototype=Object.create(Ve.prototype),Ke.prototype.constructor=Ke,$e.prototype=Object.create(Ve.prototype),$e.prototype.constructor=$e,Qe.prototype=Object.create(Ve.prototype),Qe.prototype.constructor=Qe,et.prototype=Object.create(Ve.prototype),et.prototype.constructor=et,Object.assign(tt.prototype,{computeGroups:function(e){for(var t,n=[],i=void 0,r=e.faces,a=0;a<r.length;a++){var o=r[a];o.materialIndex!==i&&(i=o.materialIndex,void 0!==t&&(t.count=3*a-t.start,n.push(t)),t={start:3*a,materialIndex:i})}void 0!==t&&(t.count=3*a-t.start,n.push(t)),this.groups=n},fromGeometry:function(e){var t,n=e.faces,i=e.vertices,r=e.faceVertexUvs,a=r[0]&&r[0].length>0,o=r[1]&&r[1].length>0,q=e.morphTargets,s=q.length;if(s>0){t=[];for(var c=0;c<s;c++)t[c]={name:q[c].name,data:[]};this.morphTargets.position=t}var h,u=e.morphNormals,m=u.length;if(m>0){h=[];for(c=0;c<m;c++)h[c]={name:u[c].name,data:[]};this.morphTargets.normal=h}var p=e.skinIndices,d=e.skinWeights,f=p.length===i.length,x=d.length===i.length;i.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(c=0;c<n.length;c++){var g=n[c];this.vertices.push(i[g.a],i[g.b],i[g.c]);var v=g.vertexNormals;if(3===v.length)this.normals.push(v[0],v[1],v[2]);else{var _=g.normal;this.normals.push(_,_,_)}var y,b=g.vertexColors;if(3===b.length)this.colors.push(b[0],b[1],b[2]);else{var w=g.color;this.colors.push(w,w,w)}if(!0===a)void 0!==(y=r[0][c])?this.uvs.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",c),this.uvs.push(new l,new l,new l));if(!0===o)void 0!==(y=r[1][c])?this.uvs2.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",c),this.uvs2.push(new l,new l,new l));for(var M=0;M<s;M++){var S=q[M].vertices;t[M].data.push(S[g.a],S[g.b],S[g.c])}for(M=0;M<m;M++){var T=u[M].vertexNormals[c];h[M].data.push(T.a,T.b,T.c)}f&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),x&&this.skinWeights.push(d[g.a],d[g.b],d[g.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this}});var it=1,rt=new E,at=new V,ot=new v,qt=new oe,lt=new oe,st=new v;function ct(){Object.defineProperty(this,"id",{value:it+=2}),this.uuid=q.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}ct.prototype=Object.assign(Object.create(i.prototype),{constructor:ct,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(nt(e)>65535?$e:Ze)(e,1):this.index=e},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){return this.attributes[e]=t,this},deleteAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,n){this.groups.push({start:e,count:t,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix4:function(e){var t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);var n=this.attributes.normal;if(void 0!==n){var i=(new s).getNormalMatrix(e);n.applyNormalMatrix(i),n.needsUpdate=!0}var r=this.attributes.tangent;return void 0!==r&&(r.transformDirection(e),r.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(e){return rt.makeRotationX(e),this.applyMatrix4(rt),this},rotateY:function(e){return rt.makeRotationY(e),this.applyMatrix4(rt),this},rotateZ:function(e){return rt.makeRotationZ(e),this.applyMatrix4(rt),this},translate:function(e,t,n){return rt.makeTranslation(e,t,n),this.applyMatrix4(rt),this},scale:function(e,t,n){return rt.makeScale(e,t,n),this.applyMatrix4(rt),this},lookAt:function(e){return at.lookAt(e),at.updateMatrix(),this.applyMatrix4(at.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(ot).negate(),this.translate(ot.x,ot.y,ot.z),this},setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var n=new Qe(3*t.vertices.length,3),i=new Qe(3*t.colors.length,3);if(this.setAttribute("position",n.copyVector3sArray(t.vertices)),this.setAttribute("color",i.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var r=new Qe(t.lineDistances.length,1);this.setAttribute("lineDistance",r.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n];t.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new Qe(t,3)),this},updateFromObject:function(e){var t,n=e.geometry;if(e.isMesh){var i=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(i=void 0,n.elementsNeedUpdate=!1),void 0===i)return this.fromGeometry(n);i.verticesNeedUpdate=n.verticesNeedUpdate,i.normalsNeedUpdate=n.normalsNeedUpdate,i.colorsNeedUpdate=n.colorsNeedUpdate,i.uvsNeedUpdate=n.uvsNeedUpdate,i.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=i}return!0===n.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(n.vertices),t.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(n.normals),t.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(n.colors),t.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(n.uvs),t.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(n.lineDistances),t.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(e.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new tt).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.setAttribute("position",new Ve(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var n=new Float32Array(3*e.normals.length);this.setAttribute("normal",new Ve(n,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var i=new Float32Array(3*e.colors.length);this.setAttribute("color",new Ve(i,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var r=new Float32Array(2*e.uvs.length);this.setAttribute("uv",new Ve(r,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.setAttribute("uv2",new Ve(a,2).copyVector2sArray(e.uvs2))}for(var o in this.groups=e.groups,e.morphTargets){for(var q=[],l=e.morphTargets[o],s=0,c=l.length;s<c;s++){var h=l[s],u=new Qe(3*h.data.length,3);u.name=h.name,q.push(u.copyVector3sArray(h.data))}this.morphAttributes[o]=q}if(e.skinIndices.length>0){var m=new Qe(4*e.skinIndices.length,4);this.setAttribute("skinIndex",m.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var p=new Qe(4*e.skinWeights.length,4);this.setAttribute("skinWeight",p.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new oe);var e=this.attributes.position,t=this.morphAttributes.position;if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(var n=0,i=t.length;n<i;n++){var r=t[n];qt.setFromBufferAttribute(r),this.morphTargetsRelative?(st.addVectors(this.boundingBox.min,qt.min),this.boundingBox.expandByPoint(st),st.addVectors(this.boundingBox.max,qt.max),this.boundingBox.expandByPoint(st)):(this.boundingBox.expandByPoint(qt.min),this.boundingBox.expandByPoint(qt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new se);var e=this.attributes.position,t=this.morphAttributes.position;if(e){var n=this.boundingSphere.center;if(qt.setFromBufferAttribute(e),t)for(var i=0,r=t.length;i<r;i++){var a=t[i];lt.setFromBufferAttribute(a),this.morphTargetsRelative?(st.addVectors(qt.min,lt.min),qt.expandByPoint(st),st.addVectors(qt.max,lt.max),qt.expandByPoint(st)):(qt.expandByPoint(lt.min),qt.expandByPoint(lt.max))}qt.getCenter(n);var o=0;for(i=0,r=e.count;i<r;i++)st.fromBufferAttribute(e,i),o=Math.max(o,n.distanceToSquared(st));if(t)for(i=0,r=t.length;i<r;i++){a=t[i];for(var q=this.morphTargetsRelative,l=0,s=a.count;l<s;l++)st.fromBufferAttribute(a,l),q&&(ot.fromBufferAttribute(e,l),st.add(ot)),o=Math.max(o,n.distanceToSquared(st))}this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes;if(t.position){var n=t.position.array;if(void 0===t.normal)this.setAttribute("normal",new Ve(new Float32Array(n.length),3));else for(var i=t.normal.array,r=0,a=i.length;r<a;r++)i[r]=0;var o,q,l,s=t.normal.array,c=new v,h=new v,u=new v,m=new v,p=new v;if(e){var d=e.array;for(r=0,a=e.count;r<a;r+=3)o=3*d[r+0],q=3*d[r+1],l=3*d[r+2],c.fromArray(n,o),h.fromArray(n,q),u.fromArray(n,l),m.subVectors(u,h),p.subVectors(c,h),m.cross(p),s[o]+=m.x,s[o+1]+=m.y,s[o+2]+=m.z,s[q]+=m.x,s[q+1]+=m.y,s[q+2]+=m.z,s[l]+=m.x,s[l+1]+=m.y,s[l+2]+=m.z}else for(r=0,a=n.length;r<a;r+=9)c.fromArray(n,r),h.fromArray(n,r+3),u.fromArray(n,r+6),m.subVectors(u,h),p.subVectors(c,h),m.cross(p),s[r]=m.x,s[r+1]=m.y,s[r+2]=m.z,s[r+3]=m.x,s[r+4]=m.y,s[r+5]=m.z,s[r+6]=m.x,s[r+7]=m.y,s[r+8]=m.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e&&e.isBufferGeometry){void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var i in n)if(void 0!==e.attributes[i])for(var r=n[i].array,a=e.attributes[i],o=a.array,q=a.itemSize*t,l=Math.min(o.length,r.length-q),s=0,c=q;s<l;s++,c++)r[c]=o[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e)},normalizeNormals:function(){for(var e=this.attributes.normal,t=0,n=e.count;t<n;t++)st.x=e.getX(t),st.y=e.getY(t),st.z=e.getZ(t),st.normalize(),e.setXYZ(t,st.x,st.y,st.z)},toNonIndexed:function(){function e(e,t){for(var n=e.array,i=e.itemSize,r=new n.constructor(t.length*i),a=0,o=0,q=0,l=t.length;q<l;q++){a=t[q]*i;for(var s=0;s<i;s++)r[o++]=n[a++]}return new Ve(r,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new ct,n=this.index.array,i=this.attributes;for(var r in i){var a=e(i[r],n);t.setAttribute(r,a)}var o=this.morphAttributes;for(r in o){for(var q=[],l=o[r],s=0,c=l.length;s<c;s++){a=e(l[s],n);q.push(a)}t.morphAttributes[r]=q}t.morphTargetsRelative=this.morphTargetsRelative;for(var h=this.groups,u=(s=0,h.length);s<u;s++){var m=h[s];t.addGroup(m.start,m.count,m.materialIndex)}return t},toJSON:function(){var e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};var i=this.index;null!==i&&(e.data.index={type:i.array.constructor.name,array:Array.prototype.slice.call(i.array)});var r=this.attributes;for(var n in r){var a=(u=r[n]).toJSON();""!==u.name&&(a.name=u.name),e.data.attributes[n]=a}var o={},q=!1;for(var n in this.morphAttributes){for(var l=this.morphAttributes[n],s=[],c=0,h=l.length;c<h;c++){var u;a=(u=l[c]).toJSON();""!==u.name&&(a.name=u.name),s.push(a)}s.length>0&&(o[n]=s,q=!0)}q&&(e.data.morphAttributes=o,e.data.morphTargetsRelative=this.morphTargetsRelative);var m=this.groups;m.length>0&&(e.data.groups=JSON.parse(JSON.stringify(m)));var p=this.boundingSphere;return null!==p&&(e.data.boundingSphere={center:p.center.toArray(),radius:p.radius}),e},clone:function(){return(new ct).copy(this)},copy:function(e){var t,n,i;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var r=e.index;null!==r&&this.setIndex(r.clone());var a=e.attributes;for(t in a){var o=a[t];this.setAttribute(t,o.clone())}var q=e.morphAttributes;for(t in q){var l=[],s=q[t];for(n=0,i=s.length;n<i;n++)l.push(s[n].clone());this.morphAttributes[t]=l}this.morphTargetsRelative=e.morphTargetsRelative;var c=e.groups;for(n=0,i=c.length;n<i;n++){var h=c[n];this.addGroup(h.start,h.count,h.materialIndex)}var u=e.boundingBox;null!==u&&(this.boundingBox=u.clone());var m=e.boundingSphere;return null!==m&&(this.boundingSphere=m.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var ht=new E,ut=new xe,mt=new se,pt=new v,dt=new v,ft=new v,xt=new v,gt=new v,vt=new v,_t=new v,yt=new v,bt=new v,wt=new l,Mt=new l,St=new l,Tt=new v,Et=new v;function zt(e,t){V.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new ct,this.material=void 0!==t?t:new He,this.updateMorphTargets()}function At(e,t,n,i,r,a,o,q){if(null===(1===t.side?i.intersectTriangle(o,a,r,!0,q):i.intersectTriangle(r,a,o,2!==t.side,q)))return null;Et.copy(q),Et.applyMatrix4(e.matrixWorld);var l=n.ray.origin.distanceTo(Et);return l<n.near||l>n.far?null:{distance:l,point:Et.clone(),object:e}}function Lt(e,t,n,i,r,a,o,q,s,c,h,u){pt.fromBufferAttribute(r,c),dt.fromBufferAttribute(r,h),ft.fromBufferAttribute(r,u);var m=e.morphTargetInfluences;if(t.morphTargets&&a&&m){_t.set(0,0,0),yt.set(0,0,0),bt.set(0,0,0);for(var p=0,d=a.length;p<d;p++){var f=m[p],x=a[p];0!==f&&(xt.fromBufferAttribute(x,c),gt.fromBufferAttribute(x,h),vt.fromBufferAttribute(x,u),o?(_t.addScaledVector(xt,f),yt.addScaledVector(gt,f),bt.addScaledVector(vt,f)):(_t.addScaledVector(xt.sub(pt),f),yt.addScaledVector(gt.sub(dt),f),bt.addScaledVector(vt.sub(ft),f)))}pt.add(_t),dt.add(yt),ft.add(bt)}var g=At(e,t,n,i,pt,dt,ft,Tt);if(g){q&&(wt.fromBufferAttribute(q,c),Mt.fromBufferAttribute(q,h),St.fromBufferAttribute(q,u),g.uv=Re.getUV(Tt,pt,dt,ft,wt,Mt,St,new l)),s&&(wt.fromBufferAttribute(s,c),Mt.fromBufferAttribute(s,h),St.fromBufferAttribute(s,u),g.uv2=Re.getUV(Tt,pt,dt,ft,wt,Mt,St,new l));var v=new Be(c,h,u);Re.getNormal(pt,dt,ft,v.normal),g.face=v}return g}zt.prototype=Object.assign(Object.create(V.prototype),{constructor:zt,isMesh:!0,copy:function(e){return V.prototype.copy.call(this,e),void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,n,i=this.geometry;if(i.isBufferGeometry){var r=i.morphAttributes,a=Object.keys(r);if(a.length>0){var o=r[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)n=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var q=i.morphTargets;void 0!==q&&q.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(e,t){var n,i=this.geometry,r=this.material,a=this.matrixWorld;if(void 0!==r&&(null===i.boundingSphere&&i.computeBoundingSphere(),mt.copy(i.boundingSphere),mt.applyMatrix4(a),!1!==e.ray.intersectsSphere(mt)&&(ht.getInverse(a),ut.copy(e.ray).applyMatrix4(ht),null===i.boundingBox||!1!==ut.intersectsBox(i.boundingBox))))if(i.isBufferGeometry){var o,q,s,c,h,u,m,p,d,f=i.index,x=i.attributes.position,g=i.morphAttributes.position,v=i.morphTargetsRelative,_=i.attributes.uv,y=i.attributes.uv2,b=i.groups,w=i.drawRange;if(null!==f)if(Array.isArray(r))for(c=0,u=b.length;c<u;c++)for(d=r[(p=b[c]).materialIndex],h=Math.max(p.start,w.start),m=Math.min(p.start+p.count,w.start+w.count);h<m;h+=3)o=f.getX(h),q=f.getX(h+1),s=f.getX(h+2),(n=Lt(this,d,e,ut,x,g,v,_,y,o,q,s))&&(n.faceIndex=Math.floor(h/3),n.face.materialIndex=p.materialIndex,t.push(n));else for(c=Math.max(0,w.start),u=Math.min(f.count,w.start+w.count);c<u;c+=3)o=f.getX(c),q=f.getX(c+1),s=f.getX(c+2),(n=Lt(this,r,e,ut,x,g,v,_,y,o,q,s))&&(n.faceIndex=Math.floor(c/3),t.push(n));else if(void 0!==x)if(Array.isArray(r))for(c=0,u=b.length;c<u;c++)for(d=r[(p=b[c]).materialIndex],h=Math.max(p.start,w.start),m=Math.min(p.start+p.count,w.start+w.count);h<m;h+=3)(n=Lt(this,d,e,ut,x,g,v,_,y,o=h,q=h+1,s=h+2))&&(n.faceIndex=Math.floor(h/3),n.face.materialIndex=p.materialIndex,t.push(n));else for(c=Math.max(0,w.start),u=Math.min(x.count,w.start+w.count);c<u;c+=3)(n=Lt(this,r,e,ut,x,g,v,_,y,o=c,q=c+1,s=c+2))&&(n.faceIndex=Math.floor(c/3),t.push(n))}else if(i.isGeometry){var M,S,T,E,z=Array.isArray(r),A=i.vertices,L=i.faces,C=i.faceVertexUvs[0];C.length>0&&(E=C);for(var R=0,P=L.length;R<P;R++){var O=L[R],N=z?r[O.materialIndex]:r;if(void 0!==N&&(M=A[O.a],S=A[O.b],T=A[O.c],n=At(this,N,e,ut,M,S,T,Tt))){if(E&&E[R]){var D=E[R];wt.copy(D[0]),Mt.copy(D[1]),St.copy(D[2]),n.uv=Re.getUV(Tt,M,S,T,wt,Mt,St,new l)}n.face=O,n.faceIndex=R,t.push(n)}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Ct=0,Rt=new E,Pt=new V,Ot=new v;function Nt(){Object.defineProperty(this,"id",{value:Ct+=2}),this.uuid=q.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}Nt.prototype=Object.assign(Object.create(i.prototype),{constructor:Nt,isGeometry:!0,applyMatrix4:function(e){for(var t=(new s).getNormalMatrix(e),n=0,i=this.vertices.length;n<i;n++){this.vertices[n].applyMatrix4(e)}for(n=0,i=this.faces.length;n<i;n++){var r=this.faces[n];r.normal.applyMatrix3(t).normalize();for(var a=0,o=r.vertexNormals.length;a<o;a++)r.vertexNormals[a].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(e){return Rt.makeRotationX(e),this.applyMatrix4(Rt),this},rotateY:function(e){return Rt.makeRotationY(e),this.applyMatrix4(Rt),this},rotateZ:function(e){return Rt.makeRotationZ(e),this.applyMatrix4(Rt),this},translate:function(e,t,n){return Rt.makeTranslation(e,t,n),this.applyMatrix4(Rt),this},scale:function(e,t,n){return Rt.makeScale(e,t,n),this.applyMatrix4(Rt),this},lookAt:function(e){return Pt.lookAt(e),Pt.updateMatrix(),this.applyMatrix4(Pt.matrix),this},fromBufferGeometry:function(e){var t=this,n=null!==e.index?e.index.array:void 0,i=e.attributes;if(void 0===i.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var r=i.position.array,a=void 0!==i.normal?i.normal.array:void 0,o=void 0!==i.color?i.color.array:void 0,q=void 0!==i.uv?i.uv.array:void 0,s=void 0!==i.uv2?i.uv2.array:void 0;void 0!==s&&(this.faceVertexUvs[1]=[]);for(var c=0;c<r.length;c+=3)t.vertices.push((new v).fromArray(r,c)),void 0!==o&&t.colors.push((new De).fromArray(o,c));function h(e,n,i,r){var c=void 0===o?[]:[t.colors[e].clone(),t.colors[n].clone(),t.colors[i].clone()],h=new Be(e,n,i,void 0===a?[]:[(new v).fromArray(a,3*e),(new v).fromArray(a,3*n),(new v).fromArray(a,3*i)],c,r);t.faces.push(h),void 0!==q&&t.faceVertexUvs[0].push([(new l).fromArray(q,2*e),(new l).fromArray(q,2*n),(new l).fromArray(q,2*i)]),void 0!==s&&t.faceVertexUvs[1].push([(new l).fromArray(s,2*e),(new l).fromArray(s,2*n),(new l).fromArray(s,2*i)])}var u=e.groups;if(u.length>0)for(c=0;c<u.length;c++)for(var m=u[c],p=m.start,d=p,f=p+m.count;d<f;d+=3)void 0!==n?h(n[d],n[d+1],n[d+2],m.materialIndex):h(d,d+1,d+2,m.materialIndex);else if(void 0!==n)for(c=0;c<n.length;c+=3)h(n[c],n[c+1],n[c+2]);else for(c=0;c<r.length/3;c+=3)h(c,c+1,c+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ot).negate(),this.translate(Ot.x,Ot.y,Ot.z),this},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,n=0===t?1:1/t,i=new E;return i.set(n,0,0,-n*e.x,0,n,0,-n*e.y,0,0,n,-n*e.z,0,0,0,1),this.applyMatrix4(i),this},computeFaceNormals:function(){for(var e=new v,t=new v,n=0,i=this.faces.length;n<i;n++){var r=this.faces[n],a=this.vertices[r.a],o=this.vertices[r.b],q=this.vertices[r.c];e.subVectors(q,o),t.subVectors(a,o),e.cross(t),e.normalize(),r.normal.copy(e)}},computeVertexNormals:function(e){var t,n,i,r,a,o;for(void 0===e&&(e=!0),o=new Array(this.vertices.length),t=0,n=this.vertices.length;t<n;t++)o[t]=new v;if(e){var q,l,s,c=new v,h=new v;for(i=0,r=this.faces.length;i<r;i++)a=this.faces[i],q=this.vertices[a.a],l=this.vertices[a.b],s=this.vertices[a.c],c.subVectors(s,l),h.subVectors(q,l),c.cross(h),o[a.a].add(c),o[a.b].add(c),o[a.c].add(c)}else for(this.computeFaceNormals(),i=0,r=this.faces.length;i<r;i++)o[(a=this.faces[i]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(t=0,n=this.vertices.length;t<n;t++)o[t].normalize();for(i=0,r=this.faces.length;i<r;i++){var u=(a=this.faces[i]).vertexNormals;3===u.length?(u[0].copy(o[a.a]),u[1].copy(o[a.b]),u[2].copy(o[a.c])):(u[0]=o[a.a].clone(),u[1]=o[a.b].clone(),u[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,n;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){var i=(n=this.faces[e]).vertexNormals;3===i.length?(i[0].copy(n.normal),i[1].copy(n.normal),i[2].copy(n.normal)):(i[0]=n.normal.clone(),i[1]=n.normal.clone(),i[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,n,i,r;for(n=0,i=this.faces.length;n<i;n++)for((r=this.faces[n]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),e=0,t=r.vertexNormals.length;e<t;e++)r.__originalVertexNormals[e]?r.__originalVertexNormals[e].copy(r.vertexNormals[e]):r.__originalVertexNormals[e]=r.vertexNormals[e].clone();var a=new Nt;for(a.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o=this.morphNormals[e].faceNormals,q=this.morphNormals[e].vertexNormals;for(n=0,i=this.faces.length;n<i;n++)l=new v,s={a:new v,b:new v,c:new v},o.push(l),q.push(s)}var l,s,c=this.morphNormals[e];for(a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals(),n=0,i=this.faces.length;n<i;n++)r=this.faces[n],l=c.faceNormals[n],s=c.vertexNormals[n],l.copy(r.normal),s.a.copy(r.vertexNormals[0]),s.b.copy(r.vertexNormals[1]),s.c.copy(r.vertexNormals[2])}for(n=0,i=this.faces.length;n<i;n++)(r=this.faces[n]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new oe),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new se),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,n){if(e&&e.isGeometry){var i,r=this.vertices.length,a=this.vertices,o=e.vertices,q=this.faces,l=e.faces,c=this.colors,h=e.colors;void 0===n&&(n=0),void 0!==t&&(i=(new s).getNormalMatrix(t));for(var u=0,m=o.length;u<m;u++){var p=o[u].clone();void 0!==t&&p.applyMatrix4(t),a.push(p)}for(u=0,m=h.length;u<m;u++)c.push(h[u].clone());for(u=0,m=l.length;u<m;u++){var d,f,x,g=l[u],v=g.vertexNormals,_=g.vertexColors;(d=new Be(g.a+r,g.b+r,g.c+r)).normal.copy(g.normal),void 0!==i&&d.normal.applyMatrix3(i).normalize();for(var y=0,b=v.length;y<b;y++)f=v[y].clone(),void 0!==i&&f.applyMatrix3(i).normalize(),d.vertexNormals.push(f);d.color.copy(g.color);for(y=0,b=_.length;y<b;y++)x=_[y],d.vertexColors.push(x.clone());d.materialIndex=g.materialIndex+n,q.push(d)}for(u=0,m=e.faceVertexUvs.length;u<m;u++){var w=e.faceVertexUvs[u];void 0===this.faceVertexUvs[u]&&(this.faceVertexUvs[u]=[]);for(y=0,b=w.length;y<b;y++){for(var M=w[y],S=[],T=0,E=M.length;T<E;T++)S.push(M[T].clone());this.faceVertexUvs[u].push(S)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},mergeMesh:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},mergeVertices:function(){var e,t,n,i,r,a,o,q,l={},s=[],c=[],h=Math.pow(10,4);for(n=0,i=this.vertices.length;n<i;n++)e=this.vertices[n],void 0===l[t=Math.round(e.x*h)+"_"+Math.round(e.y*h)+"_"+Math.round(e.z*h)]?(l[t]=n,s.push(this.vertices[n]),c[n]=s.length-1):c[n]=c[l[t]];var u=[];for(n=0,i=this.faces.length;n<i;n++){(r=this.faces[n]).a=c[r.a],r.b=c[r.b],r.c=c[r.c],a=[r.a,r.b,r.c];for(var m=0;m<3;m++)if(a[m]===a[(m+1)%3]){u.push(n);break}}for(n=u.length-1;n>=0;n--){var p=u[n];for(this.faces.splice(p,1),o=0,q=this.faceVertexUvs.length;o<q;o++)this.faceVertexUvs[o].splice(p,1)}var d=this.vertices.length-s.length;return this.vertices=s,d},setFromPoints:function(e){this.vertices=[];for(var t=0,n=e.length;t<n;t++){var i=e[t];this.vertices.push(new v(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){for(var e=this.faces,t=e.length,n=0;n<t;n++)e[n]._id=n;e.sort((function(e,t){return e.materialIndex-t.materialIndex}));var i,r,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===t&&(i=[]),o&&o.length===t&&(r=[]);for(n=0;n<t;n++){var q=e[n]._id;i&&i.push(a[q]),r&&r.push(o[q])}i&&(this.faceVertexUvs[0]=i),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}for(var i=[],r=0;r<this.vertices.length;r++){var a=this.vertices[r];i.push(a.x,a.y,a.z)}var o=[],q=[],l={},s=[],c={},h=[],u={};for(r=0;r<this.faces.length;r++){var m=this.faces[r],p=void 0!==this.faceVertexUvs[0][r],d=m.normal.length()>0,f=m.vertexNormals.length>0,x=1!==m.color.r||1!==m.color.g||1!==m.color.b,g=m.vertexColors.length>0,v=0;if(v=w(v,0,0),v=w(v,1,!0),v=w(v,2,!1),v=w(v,3,p),v=w(v,4,d),v=w(v,5,f),v=w(v,6,x),v=w(v,7,g),o.push(v),o.push(m.a,m.b,m.c),o.push(m.materialIndex),p){var _=this.faceVertexUvs[0][r];o.push(T(_[0]),T(_[1]),T(_[2]))}if(d&&o.push(M(m.normal)),f){var y=m.vertexNormals;o.push(M(y[0]),M(y[1]),M(y[2]))}if(x&&o.push(S(m.color)),g){var b=m.vertexColors;o.push(S(b[0]),S(b[1]),S(b[2]))}}function w(e,t,n){return n?e|1<<t:e&~(1<<t)}function M(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==l[t]||(l[t]=q.length/3,q.push(e.x,e.y,e.z)),l[t]}function S(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==c[t]||(c[t]=s.length,s.push(e.getHex())),c[t]}function T(e){var t=e.x.toString()+e.y.toString();return void 0!==u[t]||(u[t]=h.length/2,h.push(e.x,e.y)),u[t]}return e.data={},e.data.vertices=i,e.data.normals=q,s.length>0&&(e.data.colors=s),h.length>0&&(e.data.uvs=[h]),e.data.faces=o,e},clone:function(){return(new Nt).copy(this)},copy:function(e){var t,n,i,r,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var q=e.vertices;for(t=0,n=q.length;t<n;t++)this.vertices.push(q[t].clone());var l=e.colors;for(t=0,n=l.length;t<n;t++)this.colors.push(l[t].clone());var s=e.faces;for(t=0,n=s.length;t<n;t++)this.faces.push(s[t].clone());for(t=0,n=e.faceVertexUvs.length;t<n;t++){var c=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),i=0,r=c.length;i<r;i++){var h=c[i],u=[];for(a=0,o=h.length;a<o;a++){var m=h[a];u.push(m.clone())}this.faceVertexUvs[t].push(u)}}var p=e.morphTargets;for(t=0,n=p.length;t<n;t++){var d={};if(d.name=p[t].name,void 0!==p[t].vertices)for(d.vertices=[],i=0,r=p[t].vertices.length;i<r;i++)d.vertices.push(p[t].vertices[i].clone());if(void 0!==p[t].normals)for(d.normals=[],i=0,r=p[t].normals.length;i<r;i++)d.normals.push(p[t].normals[i].clone());this.morphTargets.push(d)}var f=e.morphNormals;for(t=0,n=f.length;t<n;t++){var x={};if(void 0!==f[t].vertexNormals)for(x.vertexNormals=[],i=0,r=f[t].vertexNormals.length;i<r;i++){var g=f[t].vertexNormals[i],v={};v.a=g.a.clone(),v.b=g.b.clone(),v.c=g.c.clone(),x.vertexNormals.push(v)}if(void 0!==f[t].faceNormals)for(x.faceNormals=[],i=0,r=f[t].faceNormals.length;i<r;i++)x.faceNormals.push(f[t].faceNormals[i].clone());this.morphNormals.push(x)}var _=e.skinWeights;for(t=0,n=_.length;t<n;t++)this.skinWeights.push(_[t].clone());var y=e.skinIndices;for(t=0,n=y.length;t<n;t++)this.skinIndices.push(y[t].clone());var b=e.lineDistances;for(t=0,n=b.length;t<n;t++)this.lineDistances.push(b[t]);var w=e.boundingBox;null!==w&&(this.boundingBox=w.clone());var M=e.boundingSphere;return null!==M&&(this.boundingSphere=M.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class Dt extends Nt{constructor(e,t,n,i,r,a){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:a},this.fromBufferGeometry(new It(e,t,n,i,r,a)),this.mergeVertices()}}class It extends ct{constructor(e,t,n,i,r,a){super(),this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};var o=this;e=e||1,t=t||1,n=n||1,i=Math.floor(i)||1,r=Math.floor(r)||1,a=Math.floor(a)||1;var q=[],l=[],s=[],c=[],h=0,u=0;function m(e,t,n,i,r,a,m,p,d,f,x){var g,_,y=a/d,b=m/f,w=a/2,M=m/2,S=p/2,T=d+1,E=f+1,z=0,A=0,L=new v;for(_=0;_<E;_++){var C=_*b-M;for(g=0;g<T;g++){var R=g*y-w;L[e]=R*i,L[t]=C*r,L[n]=S,l.push(L.x,L.y,L.z),L[e]=0,L[t]=0,L[n]=p>0?1:-1,s.push(L.x,L.y,L.z),c.push(g/d),c.push(1-_/f),z+=1}}for(_=0;_<f;_++)for(g=0;g<d;g++){var P=h+g+T*_,O=h+g+T*(_+1),N=h+(g+1)+T*(_+1),D=h+(g+1)+T*_;q.push(P,O,D),q.push(O,N,D),A+=6}o.addGroup(u,A,x),u+=A,h+=z}m("z","y","x",-1,-1,n,t,e,a,r,0),m("z","y","x",1,-1,n,t,-e,a,r,1),m("x","z","y",1,1,e,n,t,i,a,2),m("x","z","y",1,-1,e,n,-t,i,a,3),m("x","y","z",1,-1,e,t,n,i,r,4),m("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(q),this.setAttribute("position",new Qe(l,3)),this.setAttribute("normal",new Qe(s,3)),this.setAttribute("uv",new Qe(c,2))}}function kt(e){var t={};for(var n in e)for(var i in t[n]={},e[n]){var r=e[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?t[n][i]=r.clone():Array.isArray(r)?t[n][i]=r.slice():t[n][i]=r}return t}function Ut(e){for(var t={},n=0;n<e.length;n++){var i=kt(e[n]);for(var r in i)t[r]=i[r]}return t}var Bt={clone:kt,merge:Ut};function Ft(e){je.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}function jt(){V.call(this),this.type="Camera",this.matrixWorldInverse=new E,this.projectionMatrix=new E,this.projectionMatrixInverse=new E}function Ht(e,t,n,i){jt.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==i?i:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}Ft.prototype=Object.create(je.prototype),Ft.prototype.constructor=Ft,Ft.prototype.isShaderMaterial=!0,Ft.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=kt(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},Ft.prototype.toJSON=function(e){var t=je.prototype.toJSON.call(this,e);for(var n in t.uniforms={},this.uniforms){var i=this.uniforms[n].value;i&&i.isTexture?t.uniforms[n]={type:"t",value:i.toJSON(e).uuid}:i&&i.isColor?t.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?t.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?t.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?t.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?t.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?t.uniforms[n]={type:"m4",value:i.toArray()}:t.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var r={};for(var a in this.extensions)!0===this.extensions[a]&&(r[a]=!0);return Object.keys(r).length>0&&(t.extensions=r),t},jt.prototype=Object.assign(Object.create(V.prototype),{constructor:jt,isCamera:!0,copy:function(e,t){return V.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new v),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){V.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(e,t){V.prototype.updateWorldMatrix.call(this,e,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Ht.prototype=Object.assign(Object.create(jt.prototype),{constructor:Ht,isPerspectiveCamera:!0,copy:function(e,t){return jt.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*q.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*q.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*q.RAD2DEG*Math.atan(Math.tan(.5*q.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,i,r,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*q.DEG2RAD*this.fov)/this.zoom,n=2*t,i=this.aspect*n,r=-.5*i,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,l=a.fullHeight;r+=a.offsetX*i/o,t-=a.offsetY*n/l,i*=a.width/o,n*=a.height/l}var s=this.filmOffset;0!==s&&(r+=e*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=V.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});function Gt(e,t,n,i){V.call(this),this.type="CubeCamera";var r=new Ht(90,1,e,t);r.up.set(0,-1,0),r.lookAt(new v(1,0,0)),this.add(r);var a=new Ht(90,1,e,t);a.up.set(0,-1,0),a.lookAt(new v(-1,0,0)),this.add(a);var o=new Ht(90,1,e,t);o.up.set(0,0,1),o.lookAt(new v(0,1,0)),this.add(o);var q=new Ht(90,1,e,t);q.up.set(0,0,-1),q.lookAt(new v(0,-1,0)),this.add(q);var l=new Ht(90,1,e,t);l.up.set(0,-1,0),l.lookAt(new v(0,0,1)),this.add(l);var s=new Ht(90,1,e,t);s.up.set(0,-1,0),s.lookAt(new v(0,0,-1)),this.add(s),i=i||{format:1022,magFilter:1006,minFilter:1006},this.renderTarget=new Vt(n,i),this.renderTarget.texture.name="CubeCamera",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var n=e.getRenderTarget(),i=this.renderTarget,c=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0),e.render(t,r),e.setRenderTarget(i,1),e.render(t,a),e.setRenderTarget(i,2),e.render(t,o),e.setRenderTarget(i,3),e.render(t,q),e.setRenderTarget(i,4),e.render(t,l),i.texture.generateMipmaps=c,e.setRenderTarget(i,5),e.render(t,s),e.setRenderTarget(n)},this.clear=function(e,t,n,i){for(var r=e.getRenderTarget(),a=this.renderTarget,o=0;o<6;o++)e.setRenderTarget(a,o),e.clear(t,n,i);e.setRenderTarget(r)}}function Vt(e,t,n){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=n),p.call(this,e,e,t)}function Wt(e,t,n,i,r,a,o,q,l,s,c,h){u.call(this,null,a,o,q,l,s,i,r,c,h),this.image={data:e||null,width:t||1,height:n||1},this.magFilter=void 0!==l?l:1003,this.minFilter=void 0!==s?s:1003,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}Gt.prototype=Object.create(V.prototype),Gt.prototype.constructor=Gt,Vt.prototype=Object.create(p.prototype),Vt.prototype.constructor=Vt,Vt.prototype.isWebGLCubeRenderTarget=!0,Vt.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type,this.texture.format=t.format,this.texture.encoding=t.encoding;var n=new W,i={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},r=new Ft({type:"CubemapFromEquirect",uniforms:kt(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=t;var a=new zt(new It(5,5,5),r);n.add(a);var o=new Gt(1,10,1);return o.renderTarget=this,o.renderTarget.texture.name="CubeCameraTexture",o.update(e,n),a.geometry.dispose(),a.material.dispose(),this},Wt.prototype=Object.create(u.prototype),Wt.prototype.constructor=Wt,Wt.prototype.isDataTexture=!0;var Xt=new se,Yt=new v;function Jt(e,t,n,i,r,a){this.planes=[void 0!==e?e:new ye,void 0!==t?t:new ye,void 0!==n?n:new ye,void 0!==i?i:new ye,void 0!==r?r:new ye,void 0!==a?a:new ye]}Object.assign(Jt.prototype,{set:function(e,t,n,i,r,a){var o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(i),o[4].copy(r),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,n=0;n<6;n++)t[n].copy(e.planes[n]);return this},setFromProjectionMatrix:function(e){var t=this.planes,n=e.elements,i=n[0],r=n[1],a=n[2],o=n[3],q=n[4],l=n[5],s=n[6],c=n[7],h=n[8],u=n[9],m=n[10],p=n[11],d=n[12],f=n[13],x=n[14],g=n[15];return t[0].setComponents(o-i,c-q,p-h,g-d).normalize(),t[1].setComponents(o+i,c+q,p+h,g+d).normalize(),t[2].setComponents(o+r,c+l,p+u,g+f).normalize(),t[3].setComponents(o-r,c-l,p-u,g-f).normalize(),t[4].setComponents(o-a,c-s,p-m,g-x).normalize(),t[5].setComponents(o+a,c+s,p+m,g+x).normalize(),this},intersectsObject:function(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),Xt.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(Xt)},intersectsSprite:function(e){return Xt.center.set(0,0,0),Xt.radius=.7071067811865476,Xt.applyMatrix4(e.matrixWorld),this.intersectsSphere(Xt)},intersectsSphere:function(e){for(var t=this.planes,n=e.center,i=-e.radius,r=0;r<6;r++){if(t[r].distanceToPoint(n)<i)return!1}return!0},intersectsBox:function(e){for(var t=this.planes,n=0;n<6;n++){var i=t[n];if(Yt.x=i.normal.x>0?e.max.x:e.min.x,Yt.y=i.normal.y>0?e.max.y:e.min.y,Yt.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(Yt)<0)return!1}return!0},containsPoint:function(e){for(var t=this.planes,n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}});var Zt={common:{diffuse:{value:new De(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new s},uv2Transform:{value:new s},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new l(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new De(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new De(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new s}},sprite:{diffuse:{value:new De(15658734)},opacity:{value:1},center:{value:new l(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new s}}};function Kt(){var e=null,t=!1,n=null;function i(r,a){!1!==t&&(n(r,a),e.requestAnimationFrame(i))}return{start:function(){!0!==t&&null!==n&&(e.requestAnimationFrame(i),t=!0)},stop:function(){t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function $t(e,t){var n=t.isWebGL2,i=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),i.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);var n=i.get(t);n&&(e.deleteBuffer(n.buffer),i.delete(t))},update:function(t,r){t.isInterleavedBufferAttribute&&(t=t.data);var a=i.get(t);void 0===a?i.set(t,function(t,n){var i=t.array,r=t.usage,a=e.createBuffer();e.bindBuffer(n,a),e.bufferData(n,i,r),t.onUploadCallback();var o=5126;return i instanceof Float32Array?o=5126:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?o=5123:i instanceof Int16Array?o=5122:i instanceof Uint32Array?o=5125:i instanceof Int32Array?o=5124:i instanceof Int8Array?o=5120:i instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:t.version}}(t,r)):a.version<t.version&&(!function(t,i,r){var a=i.array,o=i.updateRange;e.bindBuffer(r,t),-1===o.count?e.bufferSubData(r,0,a):(n?e.bufferSubData(r,o.offset*a.BYTES_PER_ELEMENT,a,o.offset,o.count):e.bufferSubData(r,o.offset*a.BYTES_PER_ELEMENT,a.subarray(o.offset,o.offset+o.count)),o.count=-1)}(a.buffer,t,r),a.version=t.version)}}}function Qt(e,t,n,i){Nt.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i},this.fromBufferGeometry(new en(e,t,n,i)),this.mergeVertices()}function en(e,t,n,i){ct.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};var r,a,o=(e=e||1)/2,q=(t=t||1)/2,l=Math.floor(n)||1,s=Math.floor(i)||1,c=l+1,h=s+1,u=e/l,m=t/s,p=[],d=[],f=[],x=[];for(a=0;a<h;a++){var g=a*m-q;for(r=0;r<c;r++){var v=r*u-o;d.push(v,-g,0),f.push(0,0,1),x.push(r/l),x.push(1-a/s)}}for(a=0;a<s;a++)for(r=0;r<l;r++){var _=r+c*a,y=r+c*(a+1),b=r+1+c*(a+1),w=r+1+c*a;p.push(_,y,w),p.push(y,b,w)}this.setIndex(p),this.setAttribute("position",new Qe(d,3)),this.setAttribute("normal",new Qe(f,3)),this.setAttribute("uv",new Qe(x,2))}Qt.prototype=Object.create(Nt.prototype),Qt.prototype.constructor=Qt,en.prototype=Object.create(ct.prototype),en.prototype.constructor=en;var tn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},nn={basic:{uniforms:Ut([Zt.common,Zt.specularmap,Zt.envmap,Zt.aomap,Zt.lightmap,Zt.fog]),vertexShader:tn.meshbasic_vert,fragmentShader:tn.meshbasic_frag},lambert:{uniforms:Ut([Zt.common,Zt.specularmap,Zt.envmap,Zt.aomap,Zt.lightmap,Zt.emissivemap,Zt.fog,Zt.lights,{emissive:{value:new De(0)}}]),vertexShader:tn.meshlambert_vert,fragmentShader:tn.meshlambert_frag},phong:{uniforms:Ut([Zt.common,Zt.specularmap,Zt.envmap,Zt.aomap,Zt.lightmap,Zt.emissivemap,Zt.bumpmap,Zt.normalmap,Zt.displacementmap,Zt.fog,Zt.lights,{emissive:{value:new De(0)},specular:{value:new De(1118481)},shininess:{value:30}}]),vertexShader:tn.meshphong_vert,fragmentShader:tn.meshphong_frag},standard:{uniforms:Ut([Zt.common,Zt.envmap,Zt.aomap,Zt.lightmap,Zt.emissivemap,Zt.bumpmap,Zt.normalmap,Zt.displacementmap,Zt.roughnessmap,Zt.metalnessmap,Zt.fog,Zt.lights,{emissive:{value:new De(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:tn.meshphysical_vert,fragmentShader:tn.meshphysical_frag},toon:{uniforms:Ut([Zt.common,Zt.specularmap,Zt.aomap,Zt.lightmap,Zt.emissivemap,Zt.bumpmap,Zt.normalmap,Zt.displacementmap,Zt.gradientmap,Zt.fog,Zt.lights,{emissive:{value:new De(0)},specular:{value:new De(1118481)},shininess:{value:30}}]),vertexShader:tn.meshtoon_vert,fragmentShader:tn.meshtoon_frag},matcap:{uniforms:Ut([Zt.common,Zt.bumpmap,Zt.normalmap,Zt.displacementmap,Zt.fog,{matcap:{value:null}}]),vertexShader:tn.meshmatcap_vert,fragmentShader:tn.meshmatcap_frag},points:{uniforms:Ut([Zt.points,Zt.fog]),vertexShader:tn.points_vert,fragmentShader:tn.points_frag},dashed:{uniforms:Ut([Zt.common,Zt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:tn.linedashed_vert,fragmentShader:tn.linedashed_frag},depth:{uniforms:Ut([Zt.common,Zt.displacementmap]),vertexShader:tn.depth_vert,fragmentShader:tn.depth_frag},normal:{uniforms:Ut([Zt.common,Zt.bumpmap,Zt.normalmap,Zt.displacementmap,{opacity:{value:1}}]),vertexShader:tn.normal_vert,fragmentShader:tn.normal_frag},sprite:{uniforms:Ut([Zt.sprite,Zt.fog]),vertexShader:tn.sprite_vert,fragmentShader:tn.sprite_frag},background:{uniforms:{uvTransform:{value:new s},t2D:{value:null}},vertexShader:tn.background_vert,fragmentShader:tn.background_frag},cube:{uniforms:Ut([Zt.envmap,{opacity:{value:1}}]),vertexShader:tn.cube_vert,fragmentShader:tn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:tn.equirect_vert,fragmentShader:tn.equirect_frag},distanceRGBA:{uniforms:Ut([Zt.common,Zt.displacementmap,{referencePosition:{value:new v},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:tn.distanceRGBA_vert,fragmentShader:tn.distanceRGBA_frag},shadow:{uniforms:Ut([Zt.lights,Zt.fog,{color:{value:new De(0)},opacity:{value:1}}]),vertexShader:tn.shadow_vert,fragmentShader:tn.shadow_frag}};function rn(e,t,n,i){var r,a,o=new De(0),q=0,l=null,s=0,c=null;function h(e,n){t.buffers.color.setClear(e.r,e.g,e.b,n,i)}return{getClearColor:function(){return o},setClearColor:function(e,t){o.set(e),h(o,q=void 0!==t?t:1)},getClearAlpha:function(){return q},setClearAlpha:function(e){h(o,q=e)},render:function(t,i,u,m){var p=i.background,d=e.xr,f=d.getSession&&d.getSession();if(f&&"additive"===f.environmentBlendMode&&(p=null),null===p?h(o,q):p&&p.isColor&&(h(p,1),m=!0),(e.autoClear||m)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),p&&(p.isCubeTexture||p.isWebGLCubeRenderTarget||306===p.mapping)){void 0===a&&((a=new zt(new It(1,1,1),new Ft({type:"BackgroundCubeMaterial",uniforms:kt(nn.cube.uniforms),vertexShader:nn.cube.vertexShader,fragmentShader:nn.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),a.geometry.deleteAttribute("uv"),a.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(a.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(a));var x=p.isWebGLCubeRenderTarget?p.texture:p;a.material.uniforms.envMap.value=x,a.material.uniforms.flipEnvMap.value=x.isCubeTexture?-1:1,l===p&&s===x.version&&c===e.toneMapping||(a.material.needsUpdate=!0,l=p,s=x.version,c=e.toneMapping),t.unshift(a,a.geometry,a.material,0,0,null)}else p&&p.isTexture&&(void 0===r&&((r=new zt(new en(2,2),new Ft({type:"BackgroundMaterial",uniforms:kt(nn.background.uniforms),vertexShader:nn.background.vertexShader,fragmentShader:nn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(r)),r.material.uniforms.t2D.value=p,!0===p.matrixAutoUpdate&&p.updateMatrix(),r.material.uniforms.uvTransform.value.copy(p.matrix),l===p&&s===p.version&&c===e.toneMapping||(r.material.needsUpdate=!0,l=p,s=p.version,c=e.toneMapping),t.unshift(r,r.geometry,r.material,0,0,null))}}}function an(e,t,n,i){var r,a=i.isWebGL2;this.setMode=function(e){r=e},this.render=function(t,i){e.drawArrays(r,t,i),n.update(i,r)},this.renderInstances=function(i,o,q,l){if(0!==l){var s,c;if(a)s=e,c="drawArraysInstanced";else if(c="drawArraysInstancedANGLE",null===(s=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");s[c](r,o,q,l),n.update(q,r,l)}}}function on(e,t,n){var i;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext,o=void 0!==n.precision?n.precision:"highp",q=r(o);q!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",q,"instead."),o=q);var l=!0===n.logarithmicDepthBuffer,s=e.getParameter(34930),c=e.getParameter(35660),h=e.getParameter(3379),u=e.getParameter(34076),m=e.getParameter(34921),p=e.getParameter(36347),d=e.getParameter(36348),f=e.getParameter(36349),x=c>0,g=a||!!t.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==i)return i;var n=t.get("EXT_texture_filter_anisotropic");return i=null!==n?e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:l,maxTextures:s,maxVertexTextures:c,maxTextureSize:h,maxCubemapSize:u,maxAttributes:m,maxVertexUniforms:p,maxVaryings:d,maxFragmentUniforms:f,vertexTextures:x,floatFragmentTextures:g,floatVertexTextures:x&&g,maxSamples:a?e.getParameter(36183):0}}function qn(){var e=this,t=null,n=0,i=!1,r=!1,a=new ye,o=new s,q={value:null,needsUpdate:!1};function l(){q.value!==t&&(q.value=t,q.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function c(t,n,i,r){var l=null!==t?t.length:0,s=null;if(0!==l){if(s=q.value,!0!==r||null===s){var c=i+4*l,h=n.matrixWorldInverse;o.getNormalMatrix(h),(null===s||s.length<c)&&(s=new Float32Array(c));for(var u=0,m=i;u!==l;++u,m+=4)a.copy(t[u]).applyMatrix4(h,o),a.normal.toArray(s,m),s[m+3]=a.constant}q.value=s,q.needsUpdate=!0}return e.numPlanes=l,e.numIntersection=0,s}this.uniform=q,this.numPlanes=0,this.numIntersection=0,this.init=function(e,r,a){var o=0!==e.length||r||0!==n||i;return i=r,t=c(e,a,0),n=e.length,o},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1,l()},this.setState=function(e,a,o,s,h,u){if(!i||null===e||0===e.length||r&&!o)r?c(null):l();else{var m=r?0:n,p=4*m,d=h.clippingState||null;q.value=d,d=c(e,s,p,u);for(var f=0;f!==p;++f)d[f]=t[f];h.clippingState=d,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=m}}}function ln(e){var t={};return{get:function(n){if(void 0!==t[n])return t[n];var i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return null===i&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),t[n]=i,i}}}function sn(e,t,n){var i=new WeakMap,r=new WeakMap;function a(e){var o=e.target,q=i.get(o);for(var l in null!==q.index&&t.remove(q.index),q.attributes)t.remove(q.attributes[l]);o.removeEventListener("dispose",a),i.delete(o);var s=r.get(q);s&&(t.remove(s),r.delete(q)),n.memory.geometries--}function o(e){var n=[],i=e.index,a=e.attributes.position,o=0;if(null!==i){var q=i.array;o=i.version;for(var l=0,s=q.length;l<s;l+=3){var c=q[l+0],h=q[l+1],u=q[l+2];n.push(c,h,h,u,u,c)}}else{q=a.array;o=a.version;for(l=0,s=q.length/3-1;l<s;l+=3){c=l+0,h=l+1,u=l+2;n.push(c,h,h,u,u,c)}}var m=new(nt(n)>65535?$e:Ze)(n,1);m.version=o,t.update(m,34963);var p=r.get(e);p&&t.remove(p),r.set(e,m)}return{get:function(e,t){var r=i.get(t);return r||(t.addEventListener("dispose",a),t.isBufferGeometry?r=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new ct).setFromObject(e)),r=t._bufferGeometry),i.set(t,r),n.memory.geometries++,r)},update:function(e){var n=e.index,i=e.attributes;for(var r in null!==n&&t.update(n,34963),i)t.update(i[r],34962);var a=e.morphAttributes;for(var r in a)for(var o=a[r],q=0,l=o.length;q<l;q++)t.update(o[q],34962)},getWireframeAttribute:function(e){var t=r.get(e);if(t){var n=e.index;null!==n&&t.version<n.version&&o(e)}else o(e);return r.get(e)}}}function cn(e,t,n,i){var r,a,o,q=i.isWebGL2;this.setMode=function(e){r=e},this.setIndex=function(e){a=e.type,o=e.bytesPerElement},this.render=function(t,i){e.drawElements(r,i,a,t*o),n.update(i,r)},this.renderInstances=function(i,l,s,c){if(0!==c){var h,u;if(q)h=e,u="drawElementsInstanced";else if(u="drawElementsInstancedANGLE",null===(h=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](r,s,a,l*o,c),n.update(s,r,c)}}}function hn(e){var t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,n,i){switch(i=i||1,t.calls++,n){case 4:t.triangles+=i*(e/3);break;case 1:t.lines+=i*(e/2);break;case 3:t.lines+=i*(e-1);break;case 2:t.lines+=i*e;break;case 0:t.points+=i*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function un(e,t){return Math.abs(t[1])-Math.abs(e[1])}function mn(e){var t={},n=new Float32Array(8);return{update:function(i,r,a,o){var q=i.morphTargetInfluences,l=void 0===q?0:q.length,s=t[r.id];if(void 0===s){s=[];for(var c=0;c<l;c++)s[c]=[c,0];t[r.id]=s}var h=a.morphTargets&&r.morphAttributes.position,u=a.morphNormals&&r.morphAttributes.normal;for(c=0;c<l;c++){0!==(p=s[c])[1]&&(h&&r.deleteAttribute("morphTarget"+c),u&&r.deleteAttribute("morphNormal"+c))}for(c=0;c<l;c++){(p=s[c])[0]=c,p[1]=q[c]}s.sort(un);var m=0;for(c=0;c<8;c++){var p;if(p=s[c]){var d=p[0],f=p[1];if(f){h&&r.setAttribute("morphTarget"+c,h[d]),u&&r.setAttribute("morphNormal"+c,u[d]),n[c]=f,m+=f;continue}}n[c]=0}var x=r.morphTargetsRelative?1:1-m;o.getUniforms().setValue(e,"morphTargetBaseInfluence",x),o.getUniforms().setValue(e,"morphTargetInfluences",n)}}}function pn(e,t,n,i){var r=new WeakMap;return{update:function(e){var a=i.render.frame,o=e.geometry,q=t.get(e,o);return r.get(q)!==a&&(o.isGeometry&&q.updateFromObject(e),t.update(q),r.set(q,a)),e.isInstancedMesh&&n.update(e.instanceMatrix,34962),q},dispose:function(){r=new WeakMap}}}function dn(e,t,n,i,r,a,o,q,l,s){e=void 0!==e?e:[],t=void 0!==t?t:301,o=void 0!==o?o:1022,u.call(this,e,t,n,i,r,a,o,q,l,s),this.flipY=!1}function fn(e,t,n,i){u.call(this,null),this.image={data:e||null,width:t||1,height:n||1,depth:i||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function xn(e,t,n,i){u.call(this,null),this.image={data:e||null,width:t||1,height:n||1,depth:i||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}nn.physical={uniforms:Ut([nn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new l(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new De(0)},transparency:{value:0}}]),vertexShader:tn.meshphysical_vert,fragmentShader:tn.meshphysical_frag},dn.prototype=Object.create(u.prototype),dn.prototype.constructor=dn,dn.prototype.isCubeTexture=!0,Object.defineProperty(dn.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),fn.prototype=Object.create(u.prototype),fn.prototype.constructor=fn,fn.prototype.isDataTexture2DArray=!0,xn.prototype=Object.create(u.prototype),xn.prototype.constructor=xn,xn.prototype.isDataTexture3D=!0;var gn=new u,vn=new fn,_n=new xn,yn=new dn,bn=[],wn=[],Mn=new Float32Array(16),Sn=new Float32Array(9),Tn=new Float32Array(4);function En(e,t,n){var i=e[0];if(i<=0||i>0)return e;var r=t*n,a=bn[r];if(void 0===a&&(a=new Float32Array(r),bn[r]=a),0!==t){i.toArray(a,0);for(var o=1,q=0;o!==t;++o)q+=n,e[o].toArray(a,q)}return a}function zn(e,t){if(e.length!==t.length)return!1;for(var n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function An(e,t){for(var n=0,i=t.length;n<i;n++)e[n]=t[n]}function Ln(e,t){var n=wn[t];void 0===n&&(n=new Int32Array(t),wn[t]=n);for(var i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function Cn(e,t){var n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Rn(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(zn(n,t))return;e.uniform2fv(this.addr,t),An(n,t)}}function Pn(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(zn(n,t))return;e.uniform3fv(this.addr,t),An(n,t)}}function On(e,t){var n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(zn(n,t))return;e.uniform4fv(this.addr,t),An(n,t)}}function Nn(e,t){var n=this.cache,i=t.elements;if(void 0===i){if(zn(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),An(n,t)}else{if(zn(n,i))return;Tn.set(i),e.uniformMatrix2fv(this.addr,!1,Tn),An(n,i)}}function Dn(e,t){var n=this.cache,i=t.elements;if(void 0===i){if(zn(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),An(n,t)}else{if(zn(n,i))return;Sn.set(i),e.uniformMatrix3fv(this.addr,!1,Sn),An(n,i)}}function In(e,t){var n=this.cache,i=t.elements;if(void 0===i){if(zn(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),An(n,t)}else{if(zn(n,i))return;Mn.set(i),e.uniformMatrix4fv(this.addr,!1,Mn),An(n,i)}}function kn(e,t,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.safeSetTexture2D(t||gn,r)}function Un(e,t,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(t||vn,r)}function Bn(e,t,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(t||_n,r)}function Fn(e,t,n){var i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.safeSetTextureCube(t||yn,r)}function jn(e,t){var n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function Hn(e,t){var n=this.cache;zn(n,t)||(e.uniform2iv(this.addr,t),An(n,t))}function Gn(e,t){var n=this.cache;zn(n,t)||(e.uniform3iv(this.addr,t),An(n,t))}function Vn(e,t){var n=this.cache;zn(n,t)||(e.uniform4iv(this.addr,t),An(n,t))}function Wn(e,t){var n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function Xn(e,t){e.uniform1fv(this.addr,t)}function Yn(e,t){e.uniform1iv(this.addr,t)}function Jn(e,t){e.uniform2iv(this.addr,t)}function Zn(e,t){e.uniform3iv(this.addr,t)}function Kn(e,t){e.uniform4iv(this.addr,t)}function $n(e,t){var n=En(t,this.size,2);e.uniform2fv(this.addr,n)}function Qn(e,t){var n=En(t,this.size,3);e.uniform3fv(this.addr,n)}function ei(e,t){var n=En(t,this.size,4);e.uniform4fv(this.addr,n)}function ti(e,t){var n=En(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function ni(e,t){var n=En(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function ii(e,t){var n=En(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function ri(e,t,n){var i=t.length,r=Ln(n,i);e.uniform1iv(this.addr,r);for(var a=0;a!==i;++a)n.safeSetTexture2D(t[a]||gn,r[a])}function ai(e,t,n){var i=t.length,r=Ln(n,i);e.uniform1iv(this.addr,r);for(var a=0;a!==i;++a)n.safeSetTextureCube(t[a]||yn,r[a])}function oi(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Cn;case 35664:return Rn;case 35665:return Pn;case 35666:return On;case 35674:return Nn;case 35675:return Dn;case 35676:return In;case 5124:case 35670:return jn;case 35667:case 35671:return Hn;case 35668:case 35672:return Gn;case 35669:case 35673:return Vn;case 5125:return Wn;case 35678:case 36198:case 36298:case 36306:case 35682:return kn;case 35679:case 36299:case 36307:return Bn;case 35680:case 36300:case 36308:case 36293:return Fn;case 36289:case 36303:case 36311:case 36292:return Un}}(t.type)}function qi(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return Xn;case 35664:return $n;case 35665:return Qn;case 35666:return ei;case 35674:return ti;case 35675:return ni;case 35676:return ii;case 5124:case 35670:return Yn;case 35667:case 35671:return Jn;case 35668:case 35672:return Zn;case 35669:case 35673:return Kn;case 35678:case 36198:case 36298:case 36306:case 35682:return ri;case 35680:case 36300:case 36308:case 36293:return ai}}(t.type)}function li(e){this.id=e,this.seq=[],this.map={}}qi.prototype.updateCache=function(e){var t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),An(t,e)},li.prototype.setValue=function(e,t,n){for(var i=this.seq,r=0,a=i.length;r!==a;++r){var o=i[r];o.setValue(e,t[o.id],n)}};var si=/([\w\d_]+)(\])?(\[|\.)?/g;function ci(e,t){e.seq.push(t),e.map[t.id]=t}function hi(e,t,n){var i=e.name,r=i.length;for(si.lastIndex=0;;){var a=si.exec(i),o=si.lastIndex,q=a[1],l="]"===a[2],s=a[3];if(l&&(q|=0),void 0===s||"["===s&&o+2===r){ci(n,void 0===s?new oi(q,e,t):new qi(q,e,t));break}var c=n.map[q];void 0===c&&ci(n,c=new li(q)),n=c}}function ui(e,t){this.seq=[],this.map={};for(var n=e.getProgramParameter(t,35718),i=0;i<n;++i){var r=e.getActiveUniform(t,i);hi(r,e.getUniformLocation(t,r.name),this)}}function mi(e,t,n){var i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}ui.prototype.setValue=function(e,t,n,i){var r=this.map[t];void 0!==r&&r.setValue(e,n,i)},ui.prototype.setOptional=function(e,t,n){var i=t[n];void 0!==i&&this.setValue(e,n,i)},ui.upload=function(e,t,n,i){for(var r=0,a=t.length;r!==a;++r){var o=t[r],q=n[o.id];!1!==q.needsUpdate&&o.setValue(e,q.value,i)}},ui.seqWithValue=function(e,t){for(var n=[],i=0,r=e.length;i!==r;++i){var a=e[i];a.id in t&&n.push(a)}return n};var pi=0;function di(e){switch(e){case 3e3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+e)}}function fi(e,t,n){var i=e.getShaderParameter(t,35713),r=e.getShaderInfoLog(t).trim();return i&&""===r?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+r+function(e){for(var t=e.split("\n"),n=0;n<t.length;n++)t[n]=n+1+": "+t[n];return t.join("\n")}(e.getShaderSource(t))}function xi(e,t){var n=di(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function gi(e,t){var n;switch(t){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="Uncharted2";break;case 4:n="OptimizedCineon";break;case 5:n="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function vi(e){return""!==e}function _i(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function yi(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}var bi=/^[ \t]*#include +<([\w\d./]+)>/gm;function wi(e){return e.replace(bi,Mi)}function Mi(e,t){var n=tn[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return wi(n)}var Si=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Ti=/#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;function Ei(e){return e.replace(Ti,Ai).replace(Si,zi)}function zi(e,t,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Ai(e,t,n,i)}function Ai(e,t,n,i){for(var r="",a=parseInt(t);a<parseInt(n);a++)r+=i.replace(/\[ i \]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return r}function Li(e){var t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Ci(e,t,n){var i,r,a,o,q,l=e.getContext(),s=n.defines,c=n.vertexShader,h=n.fragmentShader,u=function(e){var t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(n),m=function(e){var t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case 301:case 302:t="ENVMAP_TYPE_CUBE";break;case 306:case 307:t="ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:t="ENVMAP_TYPE_EQUIREC";break;case 305:t="ENVMAP_TYPE_SPHERE"}return t}(n),p=function(e){var t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case 302:case 304:t="ENVMAP_MODE_REFRACTION"}return t}(n),d=function(e){var t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(n),f=e.gammaFactor>0?e.gammaFactor:1,x=n.isWebGL2?"":function(e){return[e.extensionDerivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(vi).join("\n")}(n),g=function(e){var t=[];for(var n in e){var i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}(s),v=l.createProgram();if(n.isRawShaderMaterial?((i=[g].filter(vi).join("\n")).length>0&&(i+="\n"),(r=[x,g].filter(vi).join("\n")).length>0&&(r+="\n")):(i=[Li(n),"#define SHADER_NAME "+n.shaderName,g,n.instancing?"#define USE_INSTANCING":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+f,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+p:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(vi).join("\n"),r=[x,Li(n),"#define SHADER_NAME "+n.shaderName,g,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+f,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+m:"",n.envMap?"#define "+p:"",n.envMap?"#define "+d:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?tn.tonemapping_pars_fragment:"",0!==n.toneMapping?gi("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.outputEncoding||n.mapEncoding||n.matcapEncoding||n.envMapEncoding||n.emissiveMapEncoding||n.lightMapEncoding?tn.encodings_pars_fragment:"",n.mapEncoding?xi("mapTexelToLinear",n.mapEncoding):"",n.matcapEncoding?xi("matcapTexelToLinear",n.matcapEncoding):"",n.envMapEncoding?xi("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMapEncoding?xi("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMapEncoding?xi("lightMapTexelToLinear",n.lightMapEncoding):"",n.outputEncoding?(a="linearToOutputTexel",o=n.outputEncoding,q=di(o),"vec4 "+a+"( vec4 value ) { return LinearTo"+q[0]+q[1]+"; }"):"",n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(vi).join("\n")),c=yi(c=_i(c=wi(c),n),n),h=yi(h=_i(h=wi(h),n),n),c=Ei(c),h=Ei(h),n.isWebGL2&&!n.isRawShaderMaterial){var _=!1,y=/^\s*#version\s+300\s+es\s*\n/;n.isShaderMaterial&&null!==c.match(y)&&null!==h.match(y)&&(_=!0,c=c.replace(y,""),h=h.replace(y,"")),i=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+i,r=["#version 300 es\n","#define varying in",_?"":"out highp vec4 pc_fragColor;",_?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+r}var b,w,M=r+h,S=mi(l,35633,i+c),T=mi(l,35632,M);if(l.attachShader(v,S),l.attachShader(v,T),void 0!==n.index0AttributeName?l.bindAttribLocation(v,0,n.index0AttributeName):!0===n.morphTargets&&l.bindAttribLocation(v,0,"position"),l.linkProgram(v),e.debug.checkShaderErrors){var E=l.getProgramInfoLog(v).trim(),z=l.getShaderInfoLog(S).trim(),A=l.getShaderInfoLog(T).trim(),L=!0,C=!0;if(!1===l.getProgramParameter(v,35714)){L=!1;var R=fi(l,S,"vertex"),P=fi(l,T,"fragment");console.error("THREE.WebGLProgram: shader error: ",l.getError(),"35715",l.getProgramParameter(v,35715),"gl.getProgramInfoLog",E,R,P)}else""!==E?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",E):""!==z&&""!==A||(C=!1);C&&(this.diagnostics={runnable:L,programLog:E,vertexShader:{log:z,prefix:i},fragmentShader:{log:A,prefix:r}})}return l.detachShader(v,S),l.detachShader(v,T),l.deleteShader(S),l.deleteShader(T),this.getUniforms=function(){return void 0===b&&(b=new ui(l,v)),b},this.getAttributes=function(){return void 0===w&&(w=function(e,t){for(var n={},i=e.getProgramParameter(t,35721),r=0;r<i;r++){var a=e.getActiveAttrib(t,r).name;n[a]=e.getAttribLocation(t,a)}return n}(l,v)),w},this.destroy=function(){l.deleteProgram(v),this.program=void 0},this.name=n.shaderName,this.id=pi++,this.cacheKey=t,this.usedTimes=1,this.program=v,this.vertexShader=S,this.fragmentShader=T,this}function Ri(e,t,n){var i=[],r=n.isWebGL2,a=n.logarithmicDepthBuffer,o=n.floatVertexTextures,q=n.precision,l=n.maxVertexUniforms,s=n.vertexTextures,c={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},h=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function u(e){var t;return e?e.isTexture?t=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),t=e.texture.encoding):t=3e3,t}this.getParameters=function(i,h,m,p,d,f,x){var g=p.fog,v=i.isMeshStandardMaterial?p.environment:null,_=i.envMap||v,y=c[i.type],b=x.isSkinnedMesh?function(e){var t=e.skeleton.bones;if(o)return 1024;var n=l,i=Math.floor((n-20)/4),r=Math.min(i,t.length);return r<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+r+"."),0):r}(x):0;null!==i.precision&&(q=n.getMaxPrecision(i.precision))!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",q,"instead.");var w=function(e,t){var n;if(t){var i=nn[t];n={name:e.type,uniforms:Bt.clone(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader}}else n={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};return n}(i,y);i.onBeforeCompile(w,e);var M=e.getRenderTarget();return{isWebGL2:r,shaderID:y,shaderName:w.name,uniforms:w.uniforms,vertexShader:w.vertexShader,fragmentShader:w.fragmentShader,defines:i.defines,isRawShaderMaterial:i.isRawShaderMaterial,isShaderMaterial:i.isShaderMaterial,precision:q,instancing:!0===x.isInstancedMesh,supportsVertexTextures:s,outputEncoding:null!==M?u(M.texture):e.outputEncoding,map:!!i.map,mapEncoding:u(i.map),matcap:!!i.matcap,matcapEncoding:u(i.matcap),envMap:!!_,envMapMode:_&&_.mapping,envMapEncoding:u(_),envMapCubeUV:!!_&&(306===_.mapping||307===_.mapping),lightMap:!!i.lightMap,lightMapEncoding:u(i.lightMap),aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:u(i.emissiveMap),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,objectSpaceNormalMap:1===i.normalMapType,tangentSpaceNormalMap:0===i.normalMapType,clearcoatMap:!!i.clearcoatMap,clearcoatRoughnessMap:!!i.clearcoatRoughnessMap,clearcoatNormalMap:!!i.clearcoatNormalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,alphaMap:!!i.alphaMap,gradientMap:!!i.gradientMap,sheen:!!i.sheen,combine:i.combine,vertexTangents:i.normalMap&&i.vertexTangents,vertexColors:i.vertexColors,vertexUvs:!!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatMap||i.clearcoatRoughnessMap||i.clearcoatNormalMap||i.displacementMap),uvsVertexOnly:!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatNormalMap||!i.displacementMap),fog:!!g,useFog:i.fog,fogExp2:g&&g.isFogExp2,flatShading:i.flatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:a,skinning:i.skinning&&b>0,maxBones:b,useVertexTexture:o,morphTargets:i.morphTargets,morphNormals:i.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:h.directional.length,numPointLights:h.point.length,numSpotLights:h.spot.length,numRectAreaLights:h.rectArea.length,numHemiLights:h.hemi.length,numDirLightShadows:h.directionalShadowMap.length,numPointLightShadows:h.pointShadowMap.length,numSpotLightShadows:h.spotShadowMap.length,numClippingPlanes:d,numClipIntersection:f,dithering:i.dithering,shadowMapEnabled:e.shadowMap.enabled&&m.length>0,shadowMapType:e.shadowMap.type,toneMapping:i.toneMapped?e.toneMapping:0,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,alphaTest:i.alphaTest,doubleSided:2===i.side,flipSided:1===i.side,depthPacking:void 0!==i.depthPacking&&i.depthPacking,index0AttributeName:i.index0AttributeName,extensionDerivatives:i.extensions&&i.extensions.derivatives,extensionFragDepth:i.extensions&&i.extensions.fragDepth,extensionDrawBuffers:i.extensions&&i.extensions.drawBuffers,extensionShaderTextureLOD:i.extensions&&i.extensions.shaderTextureLOD,rendererExtensionFragDepth:r||null!==t.get("EXT_frag_depth"),rendererExtensionDrawBuffers:r||null!==t.get("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:r||null!==t.get("EXT_shader_texture_lod"),onBeforeCompile:i.onBeforeCompile}},this.getProgramCacheKey=function(t){var n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.fragmentShader),n.push(t.vertexShader)),void 0!==t.defines)for(var i in t.defines)n.push(i),n.push(t.defines[i]);if(void 0===t.isRawShaderMaterial){for(var r=0;r<h.length;r++)n.push(t[h[r]]);n.push(e.outputEncoding),n.push(e.gammaFactor)}return n.push(t.onBeforeCompile.toString()),n.join()},this.acquireProgram=function(t,n){for(var r,a=0,o=i.length;a<o;a++){var q=i[a];if(q.cacheKey===n){++(r=q).usedTimes;break}}return void 0===r&&(r=new Ci(e,n,t),i.push(r)),r},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=i.indexOf(e);i[t]=i[i.length-1],i.pop(),e.destroy()}},this.programs=i}function Pi(){var e=new WeakMap;return{get:function(t){var n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,i){e.get(t)[n]=i},dispose:function(){e=new WeakMap}}}function Oi(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Ni(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Di(){var e=[],t=0,n=[],i=[],r={id:-1};function a(n,i,a,o,q,l){var s=e[t];return void 0===s?(s={id:n.id,object:n,geometry:i,material:a,program:a.program||r,groupOrder:o,renderOrder:n.renderOrder,z:q,group:l},e[t]=s):(s.id=n.id,s.object=n,s.geometry=i,s.material=a,s.program=a.program||r,s.groupOrder=o,s.renderOrder=n.renderOrder,s.z=q,s.group=l),t++,s}return{opaque:n,transparent:i,init:function(){t=0,n.length=0,i.length=0},push:function(e,t,r,o,q,l){var s=a(e,t,r,o,q,l);(!0===r.transparent?i:n).push(s)},unshift:function(e,t,r,o,q,l){var s=a(e,t,r,o,q,l);(!0===r.transparent?i:n).unshift(s)},finish:function(){for(var n=t,i=e.length;n<i;n++){var r=e[n];if(null===r.id)break;r.id=null,r.object=null,r.geometry=null,r.material=null,r.program=null,r.group=null}},sort:function(e,t){n.length>1&&n.sort(e||Oi),i.length>1&&i.sort(t||Ni)}}}function Ii(){var e=new WeakMap;function t(n){var i=n.target;i.removeEventListener("dispose",t),e.delete(i)}return{get:function(n,i){var r,a=e.get(n);return void 0===a?(r=new Di,e.set(n,new WeakMap),e.get(n).set(i,r),n.addEventListener("dispose",t)):void 0===(r=a.get(i))&&(r=new Di,a.set(i,r)),r},dispose:function(){e=new WeakMap}}}function ki(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var n;switch(t.type){case"DirectionalLight":n={direction:new v,color:new De};break;case"SpotLight":n={position:new v,direction:new v,color:new De,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new v,color:new De,distance:0,decay:0};break;case"HemisphereLight":n={direction:new v,skyColor:new De,groundColor:new De};break;case"RectAreaLight":n={color:new De,position:new v,halfWidth:new v,halfHeight:new v}}return e[t.id]=n,n}}}var Ui=0;function Bi(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function Fi(){for(var e,t=new ki,n=(e={},{get:function(t){if(void 0!==e[t.id])return e[t.id];var n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowRadius:1,shadowMapSize:new l};break;case"PointLight":n={shadowBias:0,shadowRadius:1,shadowMapSize:new l,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},r=0;r<9;r++)i.probe.push(new v);var a=new v,o=new E,q=new E;return{setup:function(e,r,l){for(var s=0,c=0,h=0,u=0;u<9;u++)i.probe[u].set(0,0,0);var m=0,p=0,d=0,f=0,x=0,g=0,v=0,_=0,y=l.matrixWorldInverse;e.sort(Bi),u=0;for(var b=e.length;u<b;u++){var w=e[u],M=w.color,S=w.intensity,T=w.distance,E=w.shadow&&w.shadow.map?w.shadow.map.texture:null;if(w.isAmbientLight)s+=M.r*S,c+=M.g*S,h+=M.b*S;else if(w.isLightProbe)for(var z=0;z<9;z++)i.probe[z].addScaledVector(w.sh.coefficients[z],S);else if(w.isDirectionalLight){if((C=t.get(w)).color.copy(w.color).multiplyScalar(w.intensity),C.direction.setFromMatrixPosition(w.matrixWorld),a.setFromMatrixPosition(w.target.matrixWorld),C.direction.sub(a),C.direction.transformDirection(y),w.castShadow){var A=w.shadow;(L=n.get(w)).shadowBias=A.bias,L.shadowRadius=A.radius,L.shadowMapSize=A.mapSize,i.directionalShadow[m]=L,i.directionalShadowMap[m]=E,i.directionalShadowMatrix[m]=w.shadow.matrix,g++}i.directional[m]=C,m++}else if(w.isSpotLight){if((C=t.get(w)).position.setFromMatrixPosition(w.matrixWorld),C.position.applyMatrix4(y),C.color.copy(M).multiplyScalar(S),C.distance=T,C.direction.setFromMatrixPosition(w.matrixWorld),a.setFromMatrixPosition(w.target.matrixWorld),C.direction.sub(a),C.direction.transformDirection(y),C.coneCos=Math.cos(w.angle),C.penumbraCos=Math.cos(w.angle*(1-w.penumbra)),C.decay=w.decay,w.castShadow){A=w.shadow;(L=n.get(w)).shadowBias=A.bias,L.shadowRadius=A.radius,L.shadowMapSize=A.mapSize,i.spotShadow[d]=L,i.spotShadowMap[d]=E,i.spotShadowMatrix[d]=w.shadow.matrix,_++}i.spot[d]=C,d++}else if(w.isRectAreaLight){(C=t.get(w)).color.copy(M).multiplyScalar(S),C.position.setFromMatrixPosition(w.matrixWorld),C.position.applyMatrix4(y),q.identity(),o.copy(w.matrixWorld),o.premultiply(y),q.extractRotation(o),C.halfWidth.set(.5*w.width,0,0),C.halfHeight.set(0,.5*w.height,0),C.halfWidth.applyMatrix4(q),C.halfHeight.applyMatrix4(q),i.rectArea[f]=C,f++}else if(w.isPointLight){if((C=t.get(w)).position.setFromMatrixPosition(w.matrixWorld),C.position.applyMatrix4(y),C.color.copy(w.color).multiplyScalar(w.intensity),C.distance=w.distance,C.decay=w.decay,w.castShadow){var L;A=w.shadow;(L=n.get(w)).shadowBias=A.bias,L.shadowRadius=A.radius,L.shadowMapSize=A.mapSize,L.shadowCameraNear=A.camera.near,L.shadowCameraFar=A.camera.far,i.pointShadow[p]=L,i.pointShadowMap[p]=E,i.pointShadowMatrix[p]=w.shadow.matrix,v++}i.point[p]=C,p++}else if(w.isHemisphereLight){var C;(C=t.get(w)).direction.setFromMatrixPosition(w.matrixWorld),C.direction.transformDirection(y),C.direction.normalize(),C.skyColor.copy(w.color).multiplyScalar(S),C.groundColor.copy(w.groundColor).multiplyScalar(S),i.hemi[x]=C,x++}}i.ambient[0]=s,i.ambient[1]=c,i.ambient[2]=h;var R=i.hash;R.directionalLength===m&&R.pointLength===p&&R.spotLength===d&&R.rectAreaLength===f&&R.hemiLength===x&&R.numDirectionalShadows===g&&R.numPointShadows===v&&R.numSpotShadows===_||(i.directional.length=m,i.spot.length=d,i.rectArea.length=f,i.point.length=p,i.hemi.length=x,i.directionalShadow.length=g,i.directionalShadowMap.length=g,i.pointShadow.length=v,i.pointShadowMap.length=v,i.spotShadow.length=_,i.spotShadowMap.length=_,i.directionalShadowMatrix.length=g,i.pointShadowMatrix.length=v,i.spotShadowMatrix.length=_,R.directionalLength=m,R.pointLength=p,R.spotLength=d,R.rectAreaLength=f,R.hemiLength=x,R.numDirectionalShadows=g,R.numPointShadows=v,R.numSpotShadows=_,i.version=Ui++)},state:i}}function ji(){var e=new Fi,t=[],n=[];return{init:function(){t.length=0,n.length=0},state:{lightsArray:t,shadowsArray:n,lights:e},setupLights:function(i){e.setup(t,n,i)},pushLight:function(e){t.push(e)},pushShadow:function(e){n.push(e)}}}function Hi(){var e=new WeakMap;function t(n){var i=n.target;i.removeEventListener("dispose",t),e.delete(i)}return{get:function(n,i){var r;return!1===e.has(n)?(r=new ji,e.set(n,new WeakMap),e.get(n).set(i,r),n.addEventListener("dispose",t)):!1===e.get(n).has(i)?(r=new ji,e.get(n).set(i,r)):r=e.get(n).get(i),r},dispose:function(){e=new WeakMap}}}function Gi(e){je.call(this),this.type="MeshDepthMaterial",this.depthPacking=3200,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}function Vi(e){je.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new v,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}Gi.prototype=Object.create(je.prototype),Gi.prototype.constructor=Gi,Gi.prototype.isMeshDepthMaterial=!0,Gi.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},Vi.prototype=Object.create(je.prototype),Vi.prototype.constructor=Vi,Vi.prototype.isMeshDistanceMaterial=!0,Vi.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this};function Wi(e,t,n){var i=new Jt,r=new l,a=new l,o=new m,q=[],s=[],c={},h={0:1,1:0,2:2},u=new Ft({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new l},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),d=u.clone();d.defines.HORIZONAL_PASS=1;var f=new ct;f.setAttribute("position",new Ve(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));var x=new zt(f,u),g=this;function v(n,i){var r=t.update(x);u.uniforms.shadow_pass.value=n.map.texture,u.uniforms.resolution.value=n.mapSize,u.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,r,u,x,null),d.uniforms.shadow_pass.value=n.mapPass.texture,d.uniforms.resolution.value=n.mapSize,d.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,r,d,x,null)}function _(e,t,n){var i=e<<0|t<<1|n<<2,r=q[i];return void 0===r&&(r=new Gi({depthPacking:3201,morphTargets:e,skinning:t}),q[i]=r),r}function y(e,t,n){var i=e<<0|t<<1|n<<2,r=s[i];return void 0===r&&(r=new Vi({morphTargets:e,skinning:t}),s[i]=r),r}function b(t,n,i,r,a,o){var q=t.geometry,l=null,s=_,u=t.customDepthMaterial;if(!0===i.isPointLight&&(s=y,u=t.customDistanceMaterial),void 0===u){var m=!1;!0===n.morphTargets&&(!0===q.isBufferGeometry?m=q.morphAttributes&&q.morphAttributes.position&&q.morphAttributes.position.length>0:!0===q.isGeometry&&(m=q.morphTargets&&q.morphTargets.length>0));var p=!1;!0===t.isSkinnedMesh&&(!0===n.skinning?p=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t)),l=s(m,p,!0===t.isInstancedMesh)}else l=u;if(e.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var d=l.uuid,f=n.uuid,x=c[d];void 0===x&&(x={},c[d]=x);var g=x[f];void 0===g&&(g=l.clone(),x[f]=g),l=g}return l.visible=n.visible,l.wireframe=n.wireframe,l.side=3===o?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:h[n.side],l.clipShadows=n.clipShadows,l.clippingPlanes=n.clippingPlanes,l.clipIntersection=n.clipIntersection,l.wireframeLinewidth=n.wireframeLinewidth,l.linewidth=n.linewidth,!0===i.isPointLight&&!0===l.isMeshDistanceMaterial&&(l.referencePosition.setFromMatrixPosition(i.matrixWorld),l.nearDistance=r,l.farDistance=a),l}function w(n,r,a,o,q){if(!1!==n.visible){if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===q)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);var l=t.update(n),s=n.material;if(Array.isArray(s))for(var c=l.groups,h=0,u=c.length;h<u;h++){var m=c[h],p=s[m.materialIndex];if(p&&p.visible){var d=b(n,p,o,a.near,a.far,q);e.renderBufferDirect(a,null,l,d,n,m)}}else if(s.visible){d=b(n,s,o,a.near,a.far,q);e.renderBufferDirect(a,null,l,d,n,null)}}for(var f=n.children,x=0,g=f.length;x<g;x++)w(f[x],r,a,o,q)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,q,l){if(!1!==g.enabled&&(!1!==g.autoUpdate||!1!==g.needsUpdate)&&0!==t.length){var s=e.getRenderTarget(),c=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),u=e.state;u.setBlending(0),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);for(var m=0,d=t.length;m<d;m++){var f=t[m],x=f.shadow;if(void 0!==x){r.copy(x.mapSize);var _=x.getFrameExtents();if(r.multiply(_),a.copy(x.mapSize),(r.x>n||r.y>n)&&(console.warn("THREE.WebGLShadowMap:",f,"has shadow exceeding max texture size, reducing"),r.x>n&&(a.x=Math.floor(n/_.x),r.x=a.x*_.x,x.mapSize.x=a.x),r.y>n&&(a.y=Math.floor(n/_.y),r.y=a.y*_.y,x.mapSize.y=a.y)),null===x.map&&!x.isPointLightShadow&&3===this.type){var y={minFilter:1006,magFilter:1006,format:1023};x.map=new p(r.x,r.y,y),x.map.texture.name=f.name+".shadowMap",x.mapPass=new p(r.x,r.y,y),x.camera.updateProjectionMatrix()}if(null===x.map){y={minFilter:1003,magFilter:1003,format:1023};x.map=new p(r.x,r.y,y),x.map.texture.name=f.name+".shadowMap",x.camera.updateProjectionMatrix()}e.setRenderTarget(x.map),e.clear();for(var b=x.getViewportCount(),M=0;M<b;M++){var S=x.getViewport(M);o.set(a.x*S.x,a.y*S.y,a.x*S.z,a.y*S.w),u.viewport(o),x.updateMatrices(f,M),i=x.getFrustum(),w(q,l,x.camera,f,this.type)}x.isPointLightShadow||3!==this.type||v(x,l)}else console.warn("THREE.WebGLShadowMap:",f,"has no shadow.")}g.needsUpdate=!1,e.setRenderTarget(s,c,h)}}}function Xi(e,t,n){var i=n.isWebGL2;var r=new function(){var t=!1,n=new m,i=null,r=new m(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,i,a,o,q){!0===q&&(t*=o,i*=o,a*=o),n.set(t,i,a,o),!1===r.equals(n)&&(e.clearColor(t,i,a,o),r.copy(n))},reset:function(){t=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){var t=!1,n=null,i=null,r=null;return{setTest:function(e){e?U(2929):B(2929)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){if(t)switch(t){case 0:e.depthFunc(512);break;case 1:e.depthFunc(519);break;case 2:e.depthFunc(513);break;case 3:e.depthFunc(515);break;case 4:e.depthFunc(514);break;case 5:e.depthFunc(518);break;case 6:e.depthFunc(516);break;case 7:e.depthFunc(517);break;default:e.depthFunc(515)}else e.depthFunc(515);i=t}},setLocked:function(e){t=e},setClear:function(t){r!==t&&(e.clearDepth(t),r=t)},reset:function(){t=!1,n=null,i=null,r=null}}},o=new function(){var t=!1,n=null,i=null,r=null,a=null,o=null,q=null,l=null,s=null;return{setTest:function(e){t||(e?U(2960):B(2960))},setMask:function(i){n===i||t||(e.stencilMask(i),n=i)},setFunc:function(t,n,o){i===t&&r===n&&a===o||(e.stencilFunc(t,n,o),i=t,r=n,a=o)},setOp:function(t,n,i){o===t&&q===n&&l===i||(e.stencilOp(t,n,i),o=t,q=n,l=i)},setLocked:function(e){t=e},setClear:function(t){s!==t&&(e.clearStencil(t),s=t)},reset:function(){t=!1,n=null,i=null,r=null,a=null,o=null,q=null,l=null,s=null}}},q=e.getParameter(34921),l=new Uint8Array(q),s=new Uint8Array(q),c=new Uint8Array(q),h={},u=null,p=null,d=null,f=null,x=null,g=null,v=null,_=null,y=null,b=!1,w=null,M=null,S=null,T=null,E=null,z=e.getParameter(35661),A=!1,L=0,C=e.getParameter(7938);-1!==C.indexOf("WebGL")?(L=parseFloat(/^WebGL\ ([0-9])/.exec(C)[1]),A=L>=1):-1!==C.indexOf("OpenGL ES")&&(L=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(C)[1]),A=L>=2);var R=null,P={},O=new m,N=new m;function D(t,n,i){var r=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,10241,9728),e.texParameteri(t,10240,9728);for(var o=0;o<i;o++)e.texImage2D(n+o,0,6408,1,1,0,6408,5121,r);return a}var I={};function k(n,r){(l[n]=1,0===s[n]&&(e.enableVertexAttribArray(n),s[n]=1),c[n]!==r)&&((i?e:t.get("ANGLE_instanced_arrays"))[i?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),c[n]=r)}function U(t){!0!==h[t]&&(e.enable(t),h[t]=!0)}function B(t){!1!==h[t]&&(e.disable(t),h[t]=!1)}I[3553]=D(3553,3553,1),I[34067]=D(34067,34069,6),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),U(2929),a.setFunc(3),V(!1),W(1),U(2884),G(0);var F={100:32774,101:32778,102:32779};if(i)F[103]=32775,F[104]=32776;else{var j=t.get("EXT_blend_minmax");null!==j&&(F[103]=j.MIN_EXT,F[104]=j.MAX_EXT)}var H={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function G(t,n,i,r,a,o,q,l){if(0!==t){if(p||(U(3042),p=!0),5===t)a=a||n,o=o||i,q=q||r,n===f&&a===v||(e.blendEquationSeparate(F[n],F[a]),f=n,v=a),i===x&&r===g&&o===_&&q===y||(e.blendFuncSeparate(H[i],H[r],H[o],H[q]),x=i,g=r,_=o,y=q),d=t,b=null;else if(t!==d||l!==b){if(100===f&&100===v||(e.blendEquation(32774),f=100,v=100),l)switch(t){case 1:e.blendFuncSeparate(1,771,1,771);break;case 2:e.blendFunc(1,1);break;case 3:e.blendFuncSeparate(0,0,769,771);break;case 4:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(770,771,1,771);break;case 2:e.blendFunc(770,1);break;case 3:e.blendFunc(0,769);break;case 4:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}x=null,g=null,_=null,y=null,d=t,b=l}}else p&&(B(3042),p=!1)}function V(t){w!==t&&(t?e.frontFace(2304):e.frontFace(2305),w=t)}function W(t){0!==t?(U(2884),t!==M&&(1===t?e.cullFace(1029):2===t?e.cullFace(1028):e.cullFace(1032))):B(2884),M=t}function X(t,n,i){t?(U(32823),T===n&&E===i||(e.polygonOffset(n,i),T=n,E=i)):B(32823)}function Y(t){void 0===t&&(t=33984+z-1),R!==t&&(e.activeTexture(t),R=t)}return{buffers:{color:r,depth:a,stencil:o},initAttributes:function(){for(var e=0,t=l.length;e<t;e++)l[e]=0},enableAttribute:function(e){k(e,0)},enableAttributeAndDivisor:k,disableUnusedAttributes:function(){for(var t=0,n=s.length;t!==n;++t)s[t]!==l[t]&&(e.disableVertexAttribArray(t),s[t]=0)},enable:U,disable:B,useProgram:function(t){return u!==t&&(e.useProgram(t),u=t,!0)},setBlending:G,setMaterial:function(e,t){2===e.side?B(2884):U(2884);var n=1===e.side;t&&(n=!n),V(n),1===e.blending&&!1===e.transparent?G(0):G(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),a.setFunc(e.depthFunc),a.setTest(e.depthTest),a.setMask(e.depthWrite),r.setMask(e.colorWrite);var i=e.stencilWrite;o.setTest(i),i&&(o.setMask(e.stencilWriteMask),o.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),o.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),X(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:V,setCullFace:W,setLineWidth:function(t){t!==S&&(A&&e.lineWidth(t),S=t)},setPolygonOffset:X,setScissorTest:function(e){e?U(3089):B(3089)},activeTexture:Y,bindTexture:function(t,n){null===R&&Y();var i=P[R];void 0===i&&(i={type:void 0,texture:void 0},P[R]=i),i.type===t&&i.texture===n||(e.bindTexture(t,n||I[t]),i.type=t,i.texture=n)},unbindTexture:function(){var t=P[R];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===O.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),O.copy(t))},viewport:function(t){!1===N.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),N.copy(t))},reset:function(){for(var t=0;t<s.length;t++)1===s[t]&&(e.disableVertexAttribArray(t),s[t]=0);h={},R=null,P={},u=null,d=null,w=null,M=null,r.reset(),a.reset(),o.reset()}}}function Yi(e,t,n,i,r,a,o){var l,s=r.isWebGL2,c=r.maxTextures,h=r.maxCubemapSize,u=r.maxTextureSize,m=r.maxSamples,p=new WeakMap,d=!1;try{d="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function f(e,t){return d?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function x(e,t,n,i){var r=1;if((e.width>i||e.height>i)&&(r=i/Math.max(e.width,e.height)),r<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){var a=t?q.floorPowerOfTwo:Math.floor,o=a(r*e.width),s=a(r*e.height);void 0===l&&(l=f(o,s));var c=n?f(o,s):l;return c.width=o,c.height=s,c.getContext("2d").drawImage(e,0,0,o,s),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+o+"x"+s+")."),c}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function g(e){return q.isPowerOfTwo(e.width)&&q.isPowerOfTwo(e.height)}function v(e,t){return e.generateMipmaps&&t&&1003!==e.minFilter&&1006!==e.minFilter}function _(t,n,r,a){e.generateMipmap(t),i.get(n).__maxMipLevel=Math.log(Math.max(r,a))*Math.LOG2E}function y(n,i,r){if(!1===s)return i;if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}var a=i;return 6403===i&&(5126===r&&(a=33326),5131===r&&(a=33325),5121===r&&(a=33321)),6407===i&&(5126===r&&(a=34837),5131===r&&(a=34843),5121===r&&(a=32849)),6408===i&&(5126===r&&(a=34836),5131===r&&(a=34842),5121===r&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||t.get("EXT_color_buffer_float"),a}function b(e){return 1003===e||1004===e||1005===e?9728:9729}function w(t){var n=t.target;n.removeEventListener("dispose",w),function(t){var n=i.get(t);if(void 0===n.__webglInit)return;e.deleteTexture(n.__webglTexture),i.remove(t)}(n),n.isVideoTexture&&p.delete(n),o.memory.textures--}function M(t){var n=t.target;n.removeEventListener("dispose",M),function(t){var n=i.get(t),r=i.get(t.texture);if(!t)return;void 0!==r.__webglTexture&&e.deleteTexture(r.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLCubeRenderTarget)for(var a=0;a<6;a++)e.deleteFramebuffer(n.__webglFramebuffer[a]),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[a]);else e.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer&&e.deleteRenderbuffer(n.__webglColorRenderbuffer),n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer);i.remove(t.texture),i.remove(t)}(n),o.memory.textures--}var S=0;function T(e,t){var r=i.get(e);if(e.isVideoTexture&&function(e){var t=o.render.frame;p.get(e)!==t&&(p.set(e,t),e.update())}(e),e.version>0&&r.__version!==e.version){var a=e.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void P(r,e,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+t),n.bindTexture(3553,r.__webglTexture)}function E(t,r){if(6===t.image.length){var o=i.get(t);if(t.version>0&&o.__version!==t.version){R(o,t),n.activeTexture(33984+r),n.bindTexture(34067,o.__webglTexture),e.pixelStorei(37440,t.flipY);for(var q=t&&(t.isCompressedTexture||t.image[0].isCompressedTexture),l=t.image[0]&&t.image[0].isDataTexture,c=[],u=0;u<6;u++)c[u]=q||l?l?t.image[u].image:t.image[u]:x(t.image[u],!1,!0,h);var m,p=c[0],d=g(p)||s,f=a.convert(t.format),b=a.convert(t.type),w=y(t.internalFormat,f,b);if(C(34067,t,d),q){for(u=0;u<6;u++){m=c[u].mipmaps;for(var M=0;M<m.length;M++){var S=m[M];1023!==t.format&&1022!==t.format?null!==f?n.compressedTexImage2D(34069+u,M,w,S.width,S.height,0,S.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+u,M,w,S.width,S.height,0,f,b,S.data)}}o.__maxMipLevel=m.length-1}else{m=t.mipmaps;for(u=0;u<6;u++)if(l){n.texImage2D(34069+u,0,w,c[u].width,c[u].height,0,f,b,c[u].data);for(M=0;M<m.length;M++){var T=(S=m[M]).image[u].image;n.texImage2D(34069+u,M+1,w,T.width,T.height,0,f,b,T.data)}}else{n.texImage2D(34069+u,0,w,f,b,c[u]);for(M=0;M<m.length;M++){S=m[M];n.texImage2D(34069+u,M+1,w,f,b,S.image[u])}}o.__maxMipLevel=m.length}v(t,d)&&_(34067,t,p.width,p.height),o.__version=t.version,t.onUpdate&&t.onUpdate(t)}else n.activeTexture(33984+r),n.bindTexture(34067,o.__webglTexture)}}function z(e,t){n.activeTexture(33984+t),n.bindTexture(34067,i.get(e).__webglTexture)}var A={1e3:10497,1001:33071,1002:33648},L={1003:9728,1004:9984,1005:9986,1006:9729,1007:9985,1008:9987};function C(n,a,o){o?(e.texParameteri(n,10242,A[a.wrapS]),e.texParameteri(n,10243,A[a.wrapT]),32879!==n&&35866!==n||e.texParameteri(n,32882,A[a.wrapR]),e.texParameteri(n,10240,L[a.magFilter]),e.texParameteri(n,10241,L[a.minFilter])):(e.texParameteri(n,10242,33071),e.texParameteri(n,10243,33071),32879!==n&&35866!==n||e.texParameteri(n,32882,33071),1001===a.wrapS&&1001===a.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,10240,b(a.magFilter)),e.texParameteri(n,10241,b(a.minFilter)),1003!==a.minFilter&&1006!==a.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));var q=t.get("EXT_texture_filter_anisotropic");if(q){if(1015===a.type&&null===t.get("OES_texture_float_linear"))return;if(1016===a.type&&null===(s||t.get("OES_texture_half_float_linear")))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(e.texParameterf(n,q.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function R(t,n){void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",w),t.__webglTexture=e.createTexture(),o.memory.textures++)}function P(t,i,r){var o=3553;i.isDataTexture2DArray&&(o=35866),i.isDataTexture3D&&(o=32879),R(t,i),n.activeTexture(33984+r),n.bindTexture(o,t.__webglTexture),e.pixelStorei(37440,i.flipY),e.pixelStorei(37441,i.premultiplyAlpha),e.pixelStorei(3317,i.unpackAlignment);var q=function(e){return!s&&(1001!==e.wrapS||1001!==e.wrapT||1003!==e.minFilter&&1006!==e.minFilter)}(i)&&!1===g(i.image),l=x(i.image,q,!1,u),c=g(l)||s,h=a.convert(i.format),m=a.convert(i.type),p=y(i.internalFormat,h,m);C(o,i,c);var d,f=i.mipmaps;if(i.isDepthTexture)p=6402,s?p=1015===i.type?36012:1014===i.type?33190:1020===i.type?35056:33189:1015===i.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===i.format&&6402===p&&1012!==i.type&&1014!==i.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=1012,m=a.convert(i.type)),1027===i.format&&6402===p&&(p=34041,1020!==i.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=1020,m=a.convert(i.type))),n.texImage2D(3553,0,p,l.width,l.height,0,h,m,null);else if(i.isDataTexture)if(f.length>0&&c){for(var b=0,w=f.length;b<w;b++)d=f[b],n.texImage2D(3553,b,p,d.width,d.height,0,h,m,d.data);i.generateMipmaps=!1,t.__maxMipLevel=f.length-1}else n.texImage2D(3553,0,p,l.width,l.height,0,h,m,l.data),t.__maxMipLevel=0;else if(i.isCompressedTexture){for(b=0,w=f.length;b<w;b++)d=f[b],1023!==i.format&&1022!==i.format?null!==h?n.compressedTexImage2D(3553,b,p,d.width,d.height,0,d.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,b,p,d.width,d.height,0,h,m,d.data);t.__maxMipLevel=f.length-1}else if(i.isDataTexture2DArray)n.texImage3D(35866,0,p,l.width,l.height,l.depth,0,h,m,l.data),t.__maxMipLevel=0;else if(i.isDataTexture3D)n.texImage3D(32879,0,p,l.width,l.height,l.depth,0,h,m,l.data),t.__maxMipLevel=0;else if(f.length>0&&c){for(b=0,w=f.length;b<w;b++)d=f[b],n.texImage2D(3553,b,p,h,m,d);i.generateMipmaps=!1,t.__maxMipLevel=f.length-1}else n.texImage2D(3553,0,p,h,m,l),t.__maxMipLevel=0;v(i,c)&&_(o,i,l.width,l.height),t.__version=i.version,i.onUpdate&&i.onUpdate(i)}function O(t,r,o,q){var l=a.convert(r.texture.format),s=a.convert(r.texture.type),c=y(r.texture.internalFormat,l,s);n.texImage2D(q,0,c,r.width,r.height,0,l,s,null),e.bindFramebuffer(36160,t),e.framebufferTexture2D(36160,o,q,i.get(r.texture).__webglTexture,0),e.bindFramebuffer(36160,null)}function N(t,n,i){if(e.bindRenderbuffer(36161,t),n.depthBuffer&&!n.stencilBuffer){var r=33189;if(i){var o=n.depthTexture;o&&o.isDepthTexture&&(1015===o.type?r=36012:1014===o.type&&(r=33190));var q=I(n);e.renderbufferStorageMultisample(36161,q,r,n.width,n.height)}else e.renderbufferStorage(36161,r,n.width,n.height);e.framebufferRenderbuffer(36160,36096,36161,t)}else if(n.depthBuffer&&n.stencilBuffer){if(i){q=I(n);e.renderbufferStorageMultisample(36161,q,35056,n.width,n.height)}else e.renderbufferStorage(36161,34041,n.width,n.height);e.framebufferRenderbuffer(36160,33306,36161,t)}else{var l=a.convert(n.texture.format),s=a.convert(n.texture.type);r=y(n.texture.internalFormat,l,s);if(i){q=I(n);e.renderbufferStorageMultisample(36161,q,r,n.width,n.height)}else e.renderbufferStorage(36161,r,n.width,n.height)}e.bindRenderbuffer(36161,null)}function D(t){var n=i.get(t),r=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,n){if(n&&n.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,t),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),T(n.depthTexture,0);var r=i.get(n.depthTexture).__webglTexture;if(1026===n.depthTexture.format)e.framebufferTexture2D(36160,36096,3553,r,0);else{if(1027!==n.depthTexture.format)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(36160,33306,3553,r,0)}}(n.__webglFramebuffer,t)}else if(r){n.__webglDepthbuffer=[];for(var a=0;a<6;a++)e.bindFramebuffer(36160,n.__webglFramebuffer[a]),n.__webglDepthbuffer[a]=e.createRenderbuffer(),N(n.__webglDepthbuffer[a],t,!1)}else e.bindFramebuffer(36160,n.__webglFramebuffer),n.__webglDepthbuffer=e.createRenderbuffer(),N(n.__webglDepthbuffer,t,!1);e.bindFramebuffer(36160,null)}function I(e){return s&&e.isWebGLMultisampleRenderTarget?Math.min(m,e.samples):0}var k=!1,U=!1;this.allocateTextureUnit=function(){var e=S;return e>=c&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+c),S+=1,e},this.resetTextureUnits=function(){S=0},this.setTexture2D=T,this.setTexture2DArray=function(e,t){var r=i.get(e);e.version>0&&r.__version!==e.version?P(r,e,t):(n.activeTexture(33984+t),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(e,t){var r=i.get(e);e.version>0&&r.__version!==e.version?P(r,e,t):(n.activeTexture(33984+t),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=E,this.setTextureCubeDynamic=z,this.setupRenderTarget=function(t){var r=i.get(t),q=i.get(t.texture);t.addEventListener("dispose",M),q.__webglTexture=e.createTexture(),o.memory.textures++;var l=!0===t.isWebGLCubeRenderTarget,c=!0===t.isWebGLMultisampleRenderTarget,h=g(t)||s;if(!s||1022!==t.texture.format||1015!==t.texture.type&&1016!==t.texture.type||(t.texture.format=1023,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),l){r.__webglFramebuffer=[];for(var u=0;u<6;u++)r.__webglFramebuffer[u]=e.createFramebuffer()}else if(r.__webglFramebuffer=e.createFramebuffer(),c)if(s){r.__webglMultisampledFramebuffer=e.createFramebuffer(),r.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,r.__webglColorRenderbuffer);var m=a.convert(t.texture.format),p=a.convert(t.texture.type),d=y(t.texture.internalFormat,m,p),f=I(t);e.renderbufferStorageMultisample(36161,f,d,t.width,t.height),e.bindFramebuffer(36160,r.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064,36161,r.__webglColorRenderbuffer),e.bindRenderbuffer(36161,null),t.depthBuffer&&(r.__webglDepthRenderbuffer=e.createRenderbuffer(),N(r.__webglDepthRenderbuffer,t,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(l){n.bindTexture(34067,q.__webglTexture),C(34067,t.texture,h);for(u=0;u<6;u++)O(r.__webglFramebuffer[u],t,36064,34069+u);v(t.texture,h)&&_(34067,t.texture,t.width,t.height),n.bindTexture(34067,null)}else n.bindTexture(3553,q.__webglTexture),C(3553,t.texture,h),O(r.__webglFramebuffer,t,36064,3553),v(t.texture,h)&&_(3553,t.texture,t.width,t.height),n.bindTexture(3553,null);t.depthBuffer&&D(t)},this.updateRenderTargetMipmap=function(e){var t=e.texture;if(v(t,g(e)||s)){var r=e.isWebGLCubeRenderTarget?34067:3553,a=i.get(t).__webglTexture;n.bindTexture(r,a),_(r,t,e.width,e.height),n.bindTexture(r,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(s){var n=i.get(t);e.bindFramebuffer(36008,n.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,n.__webglFramebuffer);var r=t.width,a=t.height,o=16384;t.depthBuffer&&(o|=256),t.stencilBuffer&&(o|=1024),e.blitFramebuffer(0,0,r,a,0,0,r,a,o,9728),e.bindFramebuffer(36160,n.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(e,t){e&&e.isWebGLRenderTarget&&(!1===k&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),k=!0),e=e.texture),T(e,t)},this.safeSetTextureCube=function(e,t){e&&e.isWebGLCubeRenderTarget&&(!1===U&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),U=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?E(e,t):z(e,t)}}function Ji(e,t,n){var i=n.isWebGL2;return{convert:function(e){var n;if(1009===e)return 5121;if(1017===e)return 32819;if(1018===e)return 32820;if(1019===e)return 33635;if(1010===e)return 5120;if(1011===e)return 5122;if(1012===e)return 5123;if(1013===e)return 5124;if(1014===e)return 5125;if(1015===e)return 5126;if(1016===e)return i?5131:null!==(n=t.get("OES_texture_half_float"))?n.HALF_FLOAT_OES:null;if(1021===e)return 6406;if(1022===e)return 6407;if(1023===e)return 6408;if(1024===e)return 6409;if(1025===e)return 6410;if(1026===e)return 6402;if(1027===e)return 34041;if(1028===e)return 6403;if(1029===e)return 36244;if(1030===e)return 33319;if(1031===e)return 33320;if(1032===e)return 36248;if(1033===e)return 36249;if(33776===e||33777===e||33778===e||33779===e){if(null===(n=t.get("WEBGL_compressed_texture_s3tc")))return null;if(33776===e)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===e)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===e)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===e)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===e||35841===e||35842===e||35843===e){if(null===(n=t.get("WEBGL_compressed_texture_pvrtc")))return null;if(35840===e)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===e)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===e)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===e)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===e)return null!==(n=t.get("WEBGL_compressed_texture_etc1"))?n.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===e||37496===e)&&null!==(n=t.get("WEBGL_compressed_texture_etc"))){if(37492===e)return n.COMPRESSED_RGB8_ETC2;if(37496===e)return n.COMPRESSED_RGBA8_ETC2_EAC}return 37808===e||37809===e||37810===e||37811===e||37812===e||37813===e||37814===e||37815===e||37816===e||37817===e||37818===e||37819===e||37820===e||37821===e||37840===e||37841===e||37842===e||37843===e||37844===e||37845===e||37846===e||37847===e||37848===e||37849===e||37850===e||37851===e||37852===e||37853===e?null!==(n=t.get("WEBGL_compressed_texture_astc"))?e:null:36492===e?null!==(n=t.get("EXT_texture_compression_bptc"))?e:null:1020===e?i?34042:null!==(n=t.get("WEBGL_depth_texture"))?n.UNSIGNED_INT_24_8_WEBGL:null:void 0}}}function Zi(e){Ht.call(this),this.cameras=e||[]}function Ki(){V.call(this),this.type="Group"}function $i(e,t){var n=this,i=null,r=1,a=null,o="local-floor",q=null,l=[],s=new Map,c=new Ht;c.layers.enable(1),c.viewport=new m;var h=new Ht;h.layers.enable(2),h.viewport=new m;var u=new Zi([c,h]);u.layers.enable(1),u.layers.enable(2);var p=null,d=null;function f(e){var t=s.get(e.inputSource);t&&(t.targetRay&&t.targetRay.dispatchEvent({type:e.type}),t.grip&&t.grip.dispatchEvent({type:e.type}))}function x(){s.forEach((function(e,t){e.targetRay&&(e.targetRay.dispatchEvent({type:"disconnected",data:t}),e.targetRay.visible=!1),e.grip&&(e.grip.dispatchEvent({type:"disconnected",data:t}),e.grip.visible=!1)})),s.clear(),e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),S.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function g(e){a=e,S.setContext(i),S.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}function _(e){for(var t=i.inputSources,n=0;n<l.length;n++)s.set(t[n],l[n]);for(n=0;n<e.removed.length;n++){var r=e.removed[n];(a=s.get(r))&&(a.targetRay&&a.targetRay.dispatchEvent({type:"disconnected",data:r}),a.grip&&a.grip.dispatchEvent({type:"disconnected",data:r}),s.delete(r))}for(n=0;n<e.added.length;n++){var a;r=e.added[n];(a=s.get(r))&&(a.targetRay&&a.targetRay.dispatchEvent({type:"connected",data:r}),a.grip&&a.grip.dispatchEvent({type:"connected",data:r}))}}this.enabled=!1,this.isPresenting=!1,this.getController=function(e){var t=l[e];return void 0===t&&(t={},l[e]=t),void 0===t.targetRay&&(t.targetRay=new Ki,t.targetRay.matrixAutoUpdate=!1,t.targetRay.visible=!1),t.targetRay},this.getControllerGrip=function(e){var t=l[e];return void 0===t&&(t={},l[e]=t),void 0===t.grip&&(t.grip=new Ki,t.grip.matrixAutoUpdate=!1,t.grip.visible=!1),t.grip},this.setFramebufferScaleFactor=function(e){r=e,1==n.isPresenting&&console.warn("WebXRManager: Cannot change framebuffer scale while presenting VR content")},this.setReferenceSpaceType=function(e){o=e},this.getReferenceSpace=function(){return a},this.getSession=function(){return i},this.setSession=function(e){if(null!==(i=e)){i.addEventListener("select",f),i.addEventListener("selectstart",f),i.addEventListener("selectend",f),i.addEventListener("squeeze",f),i.addEventListener("squeezestart",f),i.addEventListener("squeezeend",f),i.addEventListener("end",x);var n=t.getContextAttributes(),a={antialias:n.antialias,alpha:n.alpha,depth:n.depth,stencil:n.stencil,framebufferScaleFactor:r},q=new XRWebGLLayer(i,t,a);i.updateRenderState({baseLayer:q}),i.requestReferenceSpace(o).then(g),i.addEventListener("inputsourceschange",_)}};var y=new v,b=new v;function w(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.getInverse(e.matrixWorld)}this.getCamera=function(e){u.near=h.near=c.near=e.near,u.far=h.far=c.far=e.far,p===u.near&&d===u.far||(i.updateRenderState({depthNear:u.near,depthFar:u.far}),p=u.near,d=u.far);var t=e.parent,n=u.cameras;w(u,t);for(var r=0;r<n.length;r++)w(n[r],t);e.matrixWorld.copy(u.matrixWorld);for(var a=e.children,o=(r=0,a.length);r<o;r++)a[r].updateMatrixWorld(!0);return function(e,t,n){y.setFromMatrixPosition(t.matrixWorld),b.setFromMatrixPosition(n.matrixWorld);var i=y.distanceTo(b),r=t.projectionMatrix.elements,a=n.projectionMatrix.elements,o=r[14]/(r[10]-1),q=r[14]/(r[10]+1),l=(r[9]+1)/r[5],s=(r[9]-1)/r[5],c=(r[8]-1)/r[0],h=(a[8]+1)/a[0],u=o*c,m=o*h,p=i/(-c+h),d=p*-c;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(d),e.translateZ(p),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.getInverse(e.matrixWorld);var f=o+p,x=q+p,g=u-d,v=m+(i-d),_=l*q/x*f,w=s*q/x*f;e.projectionMatrix.makePerspective(g,v,_,w,f,x)}(u,c,h),u};var M=null;var S=new Kt;S.setAnimationLoop((function(t,n){if(null!==(q=n.getViewerPose(a))){var r=q.views,o=i.renderState.baseLayer;e.setFramebuffer(o.framebuffer);for(var s=0;s<r.length;s++){var c=r[s],h=o.getViewport(c),m=u.cameras[s];m.matrix.fromArray(c.transform.matrix),m.projectionMatrix.fromArray(c.projectionMatrix),m.viewport.set(h.x,h.y,h.width,h.height),0===s&&u.matrix.copy(m.matrix)}}var p=i.inputSources;for(s=0;s<l.length;s++){var d=l[s],f=p[s],x=null,g=null;f&&(d.targetRay&&null!==(x=n.getPose(f.targetRaySpace,a))&&(d.targetRay.matrix.fromArray(x.transform.matrix),d.targetRay.matrix.decompose(d.targetRay.position,d.targetRay.rotation,d.targetRay.scale)),d.grip&&f.gripSpace&&null!==(g=n.getPose(f.gripSpace,a))&&(d.grip.matrix.fromArray(g.transform.matrix),d.grip.matrix.decompose(d.grip.position,d.grip.rotation,d.grip.scale))),d.targetRay&&(d.targetRay.visible=null!==x),d.grip&&(d.grip.visible=null!==g)}M&&M(t,n)})),this.setAnimationLoop=function(e){M=e},this.dispose=function(){}}function Qi(e){var t=void 0!==(e=e||{}).canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==e.context?e.context:null,i=void 0!==e.alpha&&e.alpha,r=void 0===e.depth||e.depth,a=void 0===e.stencil||e.stencil,o=void 0!==e.antialias&&e.antialias,s=void 0===e.premultipliedAlpha||e.premultipliedAlpha,c=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,h=void 0!==e.powerPreference?e.powerPreference:"default",u=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat,p=null,d=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=3e3,this.physicallyCorrectLights=!1,this.toneMapping=1,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var f,x,g,_,y,b,w,M,S,T,z,A,L,C,R,P,O,N,D=this,I=!1,k=null,U=0,B=0,F=null,j=null,H=-1,G={geometry:null,program:null,wireframe:!1},V=null,X=null,Y=new m,J=new m,Z=null,K=t.width,$=t.height,Q=1,ee=null,te=null,ne=new m(0,0,K,$),ie=new m(0,0,K,$),re=!1,ae=new Jt,oe=new qn,qe=!1,le=!1,se=new E,ce=new v;function he(){return null===F?Q:1}try{var ue={alpha:i,depth:r,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u,xrCompatible:!0};if(t.addEventListener("webglcontextlost",fe,!1),t.addEventListener("webglcontextrestored",xe,!1),null===(f=n||t.getContext("webgl",ue)||t.getContext("experimental-webgl",ue)))throw null!==t.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===f.getShaderPrecisionFormat&&(f.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function me(){x=new ln(f),!1===(g=new on(f,x,e)).isWebGL2&&(x.get("WEBGL_depth_texture"),x.get("OES_texture_float"),x.get("OES_texture_half_float"),x.get("OES_texture_half_float_linear"),x.get("OES_standard_derivatives"),x.get("OES_element_index_uint"),x.get("ANGLE_instanced_arrays")),x.get("OES_texture_float_linear"),N=new Ji(f,x,g),(_=new Xi(f,x,g)).scissor(J.copy(ie).multiplyScalar(Q).floor()),_.viewport(Y.copy(ne).multiplyScalar(Q).floor()),y=new hn(f),b=new Pi,w=new Yi(f,x,_,b,g,N,y),M=new $t(f,g),S=new sn(f,M,y),T=new pn(f,S,M,y),R=new mn(f),z=new Ri(D,x,g),A=new Ii,L=new Hi,C=new rn(D,_,T,s),P=new an(f,x,y,g),O=new cn(f,x,y,g),y.programs=z.programs,D.capabilities=g,D.extensions=x,D.properties=b,D.renderLists=A,D.state=_,D.info=y}me();var pe=new $i(D,f);this.xr=pe;var de=new Wi(D,T,g.maxTextureSize);function fe(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),I=!0}function xe(){console.log("THREE.WebGLRenderer: Context Restored."),I=!1,me()}function ge(e){var t=e.target;t.removeEventListener("dispose",ge),function(e){ve(e),b.remove(e)}(t)}function ve(e){var t=b.get(e).program;e.program=void 0,void 0!==t&&z.releaseProgram(t)}this.shadowMap=de,this.getContext=function(){return f},this.getContextAttributes=function(){return f.getContextAttributes()},this.forceContextLoss=function(){var e=x.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){var e=x.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return Q},this.setPixelRatio=function(e){void 0!==e&&(Q=e,this.setSize(K,$,!1))},this.getSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),e=new l),e.set(K,$)},this.setSize=function(e,n,i){pe.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(K=e,$=n,t.width=Math.floor(e*Q),t.height=Math.floor(n*Q),!1!==i&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),e=new l),e.set(K*Q,$*Q).floor()},this.setDrawingBufferSize=function(e,n,i){K=e,$=n,Q=i,t.width=Math.floor(e*i),t.height=Math.floor(n*i),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),e=new m),e.copy(Y)},this.getViewport=function(e){return e.copy(ne)},this.setViewport=function(e,t,n,i){e.isVector4?ne.set(e.x,e.y,e.z,e.w):ne.set(e,t,n,i),_.viewport(Y.copy(ne).multiplyScalar(Q).floor())},this.getScissor=function(e){return e.copy(ie)},this.setScissor=function(e,t,n,i){e.isVector4?ie.set(e.x,e.y,e.z,e.w):ie.set(e,t,n,i),_.scissor(J.copy(ie).multiplyScalar(Q).floor())},this.getScissorTest=function(){return re},this.setScissorTest=function(e){_.setScissorTest(re=e)},this.setOpaqueSort=function(e){ee=e},this.setTransparentSort=function(e){te=e},this.getClearColor=function(){return C.getClearColor()},this.setClearColor=function(){C.setClearColor.apply(C,arguments)},this.getClearAlpha=function(){return C.getClearAlpha()},this.setClearAlpha=function(){C.setClearAlpha.apply(C,arguments)},this.clear=function(e,t,n){var i=0;(void 0===e||e)&&(i|=16384),(void 0===t||t)&&(i|=256),(void 0===n||n)&&(i|=1024),f.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",fe,!1),t.removeEventListener("webglcontextrestored",xe,!1),A.dispose(),L.dispose(),b.dispose(),T.dispose(),pe.dispose(),be.stop(),this.forceContextLoss()},this.renderBufferImmediate=function(e,t){_.initAttributes();var n=b.get(e);e.hasPositions&&!n.position&&(n.position=f.createBuffer()),e.hasNormals&&!n.normal&&(n.normal=f.createBuffer()),e.hasUvs&&!n.uv&&(n.uv=f.createBuffer()),e.hasColors&&!n.color&&(n.color=f.createBuffer());var i=t.getAttributes();e.hasPositions&&(f.bindBuffer(34962,n.position),f.bufferData(34962,e.positionArray,35048),_.enableAttribute(i.position),f.vertexAttribPointer(i.position,3,5126,!1,0,0)),e.hasNormals&&(f.bindBuffer(34962,n.normal),f.bufferData(34962,e.normalArray,35048),_.enableAttribute(i.normal),f.vertexAttribPointer(i.normal,3,5126,!1,0,0)),e.hasUvs&&(f.bindBuffer(34962,n.uv),f.bufferData(34962,e.uvArray,35048),_.enableAttribute(i.uv),f.vertexAttribPointer(i.uv,2,5126,!1,0,0)),e.hasColors&&(f.bindBuffer(34962,n.color),f.bufferData(34962,e.colorArray,35048),_.enableAttribute(i.color),f.vertexAttribPointer(i.color,3,5126,!1,0,0)),_.disableUnusedAttributes(),f.drawArrays(4,0,e.count),e.count=0};var _e=new W;this.renderBufferDirect=function(e,t,n,i,r,a){null===t&&(t=_e);var o=r.isMesh&&r.matrixWorld.determinant()<0,q=Ee(e,t,i,r);_.setMaterial(i,o);var l=!1;G.geometry===n.id&&G.program===q.id&&G.wireframe===(!0===i.wireframe)||(G.geometry=n.id,G.program=q.id,G.wireframe=!0===i.wireframe,l=!0),(i.morphTargets||i.morphNormals)&&(R.update(r,n,i,q),l=!0);var s=n.index,c=n.attributes.position;if(null===s){if(void 0===c||0===c.count)return}else if(0===s.count)return;var h,u=1;!0===i.wireframe&&(s=S.getWireframeAttribute(n),u=2);var m=P;null!==s&&(h=M.get(s),(m=O).setIndex(h)),l&&(!function(e,t,n,i){if(!1===g.isWebGL2&&(e.isInstancedMesh||t.isInstancedBufferGeometry)&&null===x.get("ANGLE_instanced_arrays"))return;_.initAttributes();var r=t.attributes,a=i.getAttributes(),o=n.defaultAttributeValues;for(var q in a){var l=a[q];if(l>=0){var s=r[q];if(void 0!==s){var c=s.normalized,h=s.itemSize;if(void 0===(b=M.get(s)))continue;var u=b.buffer,m=b.type,p=b.bytesPerElement;if(s.isInterleavedBufferAttribute){var d=s.data,v=d.stride,y=s.offset;d&&d.isInstancedInterleavedBuffer?(_.enableAttributeAndDivisor(l,d.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=d.meshPerAttribute*d.count)):_.enableAttribute(l),f.bindBuffer(34962,u),f.vertexAttribPointer(l,h,m,c,v*p,y*p)}else s.isInstancedBufferAttribute?(_.enableAttributeAndDivisor(l,s.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=s.meshPerAttribute*s.count)):_.enableAttribute(l),f.bindBuffer(34962,u),f.vertexAttribPointer(l,h,m,c,0,0)}else if("instanceMatrix"===q){var b;if(void 0===(b=M.get(e.instanceMatrix)))continue;u=b.buffer,m=b.type;_.enableAttributeAndDivisor(l+0,1),_.enableAttributeAndDivisor(l+1,1),_.enableAttributeAndDivisor(l+2,1),_.enableAttributeAndDivisor(l+3,1),f.bindBuffer(34962,u),f.vertexAttribPointer(l+0,4,m,!1,64,0),f.vertexAttribPointer(l+1,4,m,!1,64,16),f.vertexAttribPointer(l+2,4,m,!1,64,32),f.vertexAttribPointer(l+3,4,m,!1,64,48)}else if(void 0!==o){var w=o[q];if(void 0!==w)switch(w.length){case 2:f.vertexAttrib2fv(l,w);break;case 3:f.vertexAttrib3fv(l,w);break;case 4:f.vertexAttrib4fv(l,w);break;default:f.vertexAttrib1fv(l,w)}}}}_.disableUnusedAttributes()}(r,n,i,q),null!==s&&f.bindBuffer(34963,h.buffer));var p=null!==s?s.count:c.count,d=n.drawRange.start*u,v=n.drawRange.count*u,y=null!==a?a.start*u:0,b=null!==a?a.count*u:1/0,w=Math.max(d,y),T=Math.min(p,d+v,y+b)-1,E=Math.max(0,T-w+1);if(0!==E){if(r.isMesh)!0===i.wireframe?(_.setLineWidth(i.wireframeLinewidth*he()),m.setMode(1)):m.setMode(4);else if(r.isLine){var z=i.linewidth;void 0===z&&(z=1),_.setLineWidth(z*he()),r.isLineSegments?m.setMode(1):r.isLineLoop?m.setMode(2):m.setMode(3)}else r.isPoints?m.setMode(0):r.isSprite&&m.setMode(4);r.isInstancedMesh?m.renderInstances(n,w,E,r.count):n.isInstancedBufferGeometry?m.renderInstances(n,w,E,n.maxInstancedCount):m.render(w,E)}},this.compile=function(e,t){(d=L.get(e,t)).init(),e.traverse((function(e){e.isLight&&(d.pushLight(e),e.castShadow&&d.pushShadow(e))})),d.setupLights(t);var n={};e.traverse((function(t){if(t.material)if(Array.isArray(t.material))for(var i=0;i<t.material.length;i++)t.material[i].uuid in n==!1&&(Te(t.material[i],e,t),n[t.material[i].uuid]=!0);else t.material.uuid in n==!1&&(Te(t.material,e,t),n[t.material.uuid]=!0)}))};var ye=null;var be=new Kt;function we(e,t,n,i){if(!1!==e.visible){if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)d.pushLight(e),e.castShadow&&d.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||ae.intersectsSprite(e)){i&&ce.setFromMatrixPosition(e.matrixWorld).applyMatrix4(se);var r=T.update(e);(a=e.material).visible&&p.push(e,r,a,n,ce.z,null)}}else if(e.isImmediateRenderObject)i&&ce.setFromMatrixPosition(e.matrixWorld).applyMatrix4(se),p.push(e,null,e.material,n,ce.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==y.render.frame&&(e.skeleton.update(),e.skeleton.frame=y.render.frame),!e.frustumCulled||ae.intersectsObject(e))){i&&ce.setFromMatrixPosition(e.matrixWorld).applyMatrix4(se);r=T.update(e);var a=e.material;if(Array.isArray(a))for(var o=r.groups,q=0,l=o.length;q<l;q++){var s=o[q],c=a[s.materialIndex];c&&c.visible&&p.push(e,r,c,n,ce.z,s)}else a.visible&&p.push(e,r,a,n,ce.z,null)}var h=e.children;for(q=0,l=h.length;q<l;q++)we(h[q],t,n,i)}}function Me(e,t,n,i){for(var r=0,a=e.length;r<a;r++){var o=e[r],q=o.object,l=o.geometry,s=void 0===i?o.material:i,c=o.group;if(n.isArrayCamera){X=n;for(var h=n.cameras,u=0,m=h.length;u<m;u++){var p=h[u];q.layers.test(p.layers)&&(_.viewport(Y.copy(p.viewport)),d.setupLights(p),Se(q,t,p,l,s,c))}}else X=null,Se(q,t,n,l,s,c)}}function Se(e,t,n,i,r,a){if(e.onBeforeRender(D,t,n,i,r,a),d=L.get(t,X||n),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){var o=Ee(n,t,r,e);_.setMaterial(r),G.geometry=null,G.program=null,G.wireframe=!1,function(e,t){e.render((function(e){D.renderBufferImmediate(e,t)}))}(e,o)}else D.renderBufferDirect(n,t,i,r,e,a);e.onAfterRender(D,t,n,i,r,a),d=L.get(t,X||n)}function Te(e,t,n){var i=b.get(e),r=d.state.lights,a=d.state.shadowsArray,o=r.state.version,q=z.getParameters(e,r.state,a,t,oe.numPlanes,oe.numIntersection,n),l=z.getProgramCacheKey(q),s=i.program,c=!0;if(void 0===s)e.addEventListener("dispose",ge);else if(s.cacheKey!==l)ve(e);else if(i.lightsStateVersion!==o)i.lightsStateVersion=o,c=!1;else{if(void 0!==q.shaderID)return;c=!1}c&&(s=z.acquireProgram(q,l),i.program=s,i.uniforms=q.uniforms,i.environment=e.isMeshStandardMaterial?t.environment:null,i.outputEncoding=D.outputEncoding,e.program=s);var h=s.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var u=0;u<D.maxMorphTargets;u++)h["morphTarget"+u]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(u=0;u<D.maxMorphNormals;u++)h["morphNormal"+u]>=0&&e.numSupportedMorphNormals++}var m=i.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(i.numClippingPlanes=oe.numPlanes,i.numIntersection=oe.numIntersection,m.clippingPlanes=oe.uniform),i.fog=t.fog,i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=o,i.needsLights&&(m.ambientLightColor.value=r.state.ambient,m.lightProbe.value=r.state.probe,m.directionalLights.value=r.state.directional,m.directionalLightShadows.value=r.state.directionalShadow,m.spotLights.value=r.state.spot,m.spotLightShadows.value=r.state.spotShadow,m.rectAreaLights.value=r.state.rectArea,m.pointLights.value=r.state.point,m.pointLightShadows.value=r.state.pointShadow,m.hemisphereLights.value=r.state.hemi,m.directionalShadowMap.value=r.state.directionalShadowMap,m.directionalShadowMatrix.value=r.state.directionalShadowMatrix,m.spotShadowMap.value=r.state.spotShadowMap,m.spotShadowMatrix.value=r.state.spotShadowMatrix,m.pointShadowMap.value=r.state.pointShadowMap,m.pointShadowMatrix.value=r.state.pointShadowMatrix);var p=i.program.getUniforms(),f=ui.seqWithValue(p.seq,m);i.uniformsList=f}function Ee(e,t,n,i){w.resetTextureUnits();var r=t.fog,a=n.isMeshStandardMaterial?t.environment:null,o=b.get(n),l=d.state.lights;if(qe&&(le||e!==V)){var s=e===V&&n.id===H;oe.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,e,o,s)}n.version===o.__version?void 0===o.program||n.fog&&o.fog!==r||o.environment!==a||o.needsLights&&o.lightsStateVersion!==l.state.version?Te(n,t,i):void 0===o.numClippingPlanes||o.numClippingPlanes===oe.numPlanes&&o.numIntersection===oe.numIntersection?o.outputEncoding!==D.outputEncoding&&Te(n,t,i):Te(n,t,i):(Te(n,t,i),o.__version=n.version);var c,h,u=!1,m=!1,p=!1,x=o.program,v=x.getUniforms(),y=o.uniforms;if(_.useProgram(x.program)&&(u=!0,m=!0,p=!0),n.id!==H&&(H=n.id,m=!0),u||V!==e){if(v.setValue(f,"projectionMatrix",e.projectionMatrix),g.logarithmicDepthBuffer&&v.setValue(f,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),V!==e&&(V=e,m=!0,p=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){var M=v.map.cameraPosition;void 0!==M&&M.setValue(f,ce.setFromMatrixPosition(e.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&v.setValue(f,"isOrthographic",!0===e.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&v.setValue(f,"viewMatrix",e.matrixWorldInverse)}if(n.skinning){v.setOptional(f,i,"bindMatrix"),v.setOptional(f,i,"bindMatrixInverse");var S=i.skeleton;if(S){var T=S.bones;if(g.floatVertexTextures){if(void 0===S.boneTexture){var E=Math.sqrt(4*T.length);E=q.ceilPowerOfTwo(E),E=Math.max(E,4);var z=new Float32Array(E*E*4);z.set(S.boneMatrices);var A=new Wt(z,E,E,1023,1015);S.boneMatrices=z,S.boneTexture=A,S.boneTextureSize=E}v.setValue(f,"boneTexture",S.boneTexture,w),v.setValue(f,"boneTextureSize",S.boneTextureSize)}else v.setOptional(f,S,"boneMatrices")}}return(m||o.receiveShadow!==i.receiveShadow)&&(o.receiveShadow=i.receiveShadow,v.setValue(f,"receiveShadow",i.receiveShadow)),m&&(v.setValue(f,"toneMappingExposure",D.toneMappingExposure),v.setValue(f,"toneMappingWhitePoint",D.toneMappingWhitePoint),o.needsLights&&(h=p,(c=y).ambientLightColor.needsUpdate=h,c.lightProbe.needsUpdate=h,c.directionalLights.needsUpdate=h,c.directionalLightShadows.needsUpdate=h,c.pointLights.needsUpdate=h,c.pointLightShadows.needsUpdate=h,c.spotLights.needsUpdate=h,c.spotLightShadows.needsUpdate=h,c.rectAreaLights.needsUpdate=h,c.hemisphereLights.needsUpdate=h),r&&n.fog&&function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}(y,r),n.isMeshBasicMaterial?ze(y,n):n.isMeshLambertMaterial?(ze(y,n),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(y,n)):n.isMeshToonMaterial?(ze(y,n),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.gradientMap&&(e.gradientMap.value=t.gradientMap);t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isMeshPhongMaterial?(ze(y,n),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isMeshStandardMaterial?(ze(y,n,a),n.isMeshPhysicalMaterial?function(e,t,n){Ae(e,t,n),e.reflectivity.value=t.reflectivity,e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.sheen&&e.sheen.value.copy(t.sheen);t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap);t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap);t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,1===t.side&&e.clearcoatNormalScale.value.negate());e.transparency.value=t.transparency}(y,n,a):Ae(y,n,a)):n.isMeshMatcapMaterial?(ze(y,n),function(e,t){t.matcap&&(e.matcap.value=t.matcap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isMeshDepthMaterial?(ze(y,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isMeshDistanceMaterial?(ze(y,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(y,n)):n.isMeshNormalMaterial?(ze(y,n),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,n)):n.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(y,n),n.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(y,n)):n.isPointsMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*Q,e.scale.value=.5*$,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);var n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(y,n):n.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);var n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(y,n):n.isShadowMaterial&&(y.color.value.copy(n.color),y.opacity.value=n.opacity),void 0!==y.ltc_1&&(y.ltc_1.value=Zt.LTC_1),void 0!==y.ltc_2&&(y.ltc_2.value=Zt.LTC_2),ui.upload(f,o.uniformsList,y,w),n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(ui.upload(f,o.uniformsList,y,w),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&v.setValue(f,"center",i.center),v.setValue(f,"modelViewMatrix",i.modelViewMatrix),v.setValue(f,"normalMatrix",i.normalMatrix),v.setValue(f,"modelMatrix",i.matrixWorld),x}function ze(e,t,n){e.opacity.value=t.opacity,t.color&&e.diffuse.value.copy(t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap);var i,r,a=t.envMap||n;a&&(e.envMap.value=a,e.flipEnvMap.value=a.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio,e.maxMipLevel.value=b.get(a).__maxMipLevel),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity),t.map?i=t.map:t.specularMap?i=t.specularMap:t.displacementMap?i=t.displacementMap:t.normalMap?i=t.normalMap:t.bumpMap?i=t.bumpMap:t.roughnessMap?i=t.roughnessMap:t.metalnessMap?i=t.metalnessMap:t.alphaMap?i=t.alphaMap:t.emissiveMap&&(i=t.emissiveMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),e.uvTransform.value.copy(i.matrix)),t.aoMap?r=t.aoMap:t.lightMap&&(r=t.lightMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uv2Transform.value.copy(r.matrix))}function Ae(e,t,n){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),(t.envMap||n)&&(e.envMapIntensity.value=t.envMapIntensity)}be.setAnimationLoop((function(e){pe.isPresenting||ye&&ye(e)})),"undefined"!=typeof window&&be.setContext(window),this.setAnimationLoop=function(e){ye=e,pe.setAnimationLoop(e),be.start()},this.render=function(e,t){var n,i;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),i=arguments[3]),t&&t.isCamera){if(!I){G.geometry=null,G.program=null,G.wireframe=!1,H=-1,V=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),pe.enabled&&pe.isPresenting&&(t=pe.getCamera(t)),(d=L.get(e,t)).init(),e.onBeforeRender(D,e,t,n||F),se.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),ae.setFromProjectionMatrix(se),le=this.localClippingEnabled,qe=oe.init(this.clippingPlanes,le,t),(p=A.get(e,t)).init(),we(e,t,0,D.sortObjects),p.finish(),!0===D.sortObjects&&p.sort(ee,te),qe&&oe.beginShadows();var r=d.state.shadowsArray;de.render(r,e,t),d.setupLights(t),qe&&oe.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),C.render(p,e,t,i);var a=p.opaque,o=p.transparent;if(e.overrideMaterial){var q=e.overrideMaterial;a.length&&Me(a,e,t,q),o.length&&Me(o,e,t,q)}else a.length&&Me(a,e,t),o.length&&Me(o,e,t);e.onAfterRender(D,e,t),null!==F&&(w.updateRenderTargetMipmap(F),w.updateMultisampleRenderTarget(F)),_.buffers.depth.setTest(!0),_.buffers.depth.setMask(!0),_.buffers.color.setMask(!0),_.setPolygonOffset(!1),p=null,d=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(e){k!==e&&null===F&&f.bindFramebuffer(36160,e),k=e},this.getActiveCubeFace=function(){return U},this.getActiveMipmapLevel=function(){return B},this.getRenderTarget=function(){return F},this.setRenderTarget=function(e,t,n){F=e,U=t,B=n,e&&void 0===b.get(e).__webglFramebuffer&&w.setupRenderTarget(e);var i=k,r=!1;if(e){var a=b.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(i=a[t||0],r=!0):i=e.isWebGLMultisampleRenderTarget?b.get(e).__webglMultisampledFramebuffer:a,Y.copy(e.viewport),J.copy(e.scissor),Z=e.scissorTest}else Y.copy(ne).multiplyScalar(Q).floor(),J.copy(ie).multiplyScalar(Q).floor(),Z=re;if(j!==i&&(f.bindFramebuffer(36160,i),j=i),_.viewport(Y),_.scissor(J),_.setScissorTest(Z),r){var o=b.get(e.texture);f.framebufferTexture2D(36160,36064,34069+(t||0),o.__webglTexture,n||0)}},this.readRenderTargetPixels=function(e,t,n,i,r,a,o){if(e&&e.isWebGLRenderTarget){var q=b.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(q=q[o]),q){var l=!1;q!==j&&(f.bindFramebuffer(36160,q),l=!0);try{var s=e.texture,c=s.format,h=s.type;if(1023!==c&&N.convert(c)!==f.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(1009===h||N.convert(h)===f.getParameter(35738)||1015===h&&(g.isWebGL2||x.get("OES_texture_float")||x.get("WEBGL_color_buffer_float"))||1016===h&&(g.isWebGL2?x.get("EXT_color_buffer_float"):x.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===f.checkFramebufferStatus(36160)?t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r&&f.readPixels(t,n,i,r,N.convert(c),N.convert(h),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{l&&f.bindFramebuffer(36160,j)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(e,t,n){void 0===n&&(n=0);var i=Math.pow(2,-n),r=Math.floor(t.image.width*i),a=Math.floor(t.image.height*i),o=N.convert(t.format);w.setTexture2D(t,0),f.copyTexImage2D(3553,n,o,e.x,e.y,r,a,0),_.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i){var r=t.image.width,a=t.image.height,o=N.convert(n.format),q=N.convert(n.type);w.setTexture2D(n,0),t.isDataTexture?f.texSubImage2D(3553,i||0,e.x,e.y,r,a,o,q,t.image.data):f.texSubImage2D(3553,i||0,e.x,e.y,o,q,t.image),_.unbindTexture()},this.initTexture=function(e){w.setTexture2D(e,0),_.unbindTexture()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function er(e,t){this.name="",this.color=new De(e),this.density=void 0!==t?t:25e-5}function tr(e,t,n){this.name="",this.color=new De(e),this.near=void 0!==t?t:1,this.far=void 0!==n?n:1e3}function nr(e,t){this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}Zi.prototype=Object.assign(Object.create(Ht.prototype),{constructor:Zi,isArrayCamera:!0}),Ki.prototype=Object.assign(Object.create(V.prototype),{constructor:Ki,isGroup:!0}),Object.assign($i.prototype,i.prototype),Object.assign(er.prototype,{isFogExp2:!0,clone:function(){return new er(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(tr.prototype,{isFog:!0,clone:function(){return new tr(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(nr.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(nr.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(e){return this.usage=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this},copyAt:function(e,t,n){e*=this.stride,n*=t.stride;for(var i=0,r=this.stride;i<r;i++)this.array[e+i]=t.array[n+i];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}});var ir,rr=new v;function ar(e,t,n,i){this.data=e,this.itemSize=t,this.offset=n,this.normalized=!0===i}function or(e){je.call(this),this.type="SpriteMaterial",this.color=new De(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}Object.defineProperties(ar.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(ar.prototype,{isInterleavedBufferAttribute:!0,applyMatrix4:function(e){for(var t=0,n=this.data.count;t<n;t++)rr.x=this.getX(t),rr.y=this.getY(t),rr.z=this.getZ(t),rr.applyMatrix4(e),this.setXYZ(t,rr.x,rr.y,rr.z);return this},setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this},setXYZ:function(e,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this},setXYZW:function(e,t,n,i,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=r,this}}),or.prototype=Object.create(je.prototype),or.prototype.constructor=or,or.prototype.isSpriteMaterial=!0,or.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this};var qr=new v,lr=new v,sr=new v,cr=new l,hr=new l,ur=new E,mr=new v,pr=new v,dr=new v,fr=new l,xr=new l,gr=new l;function vr(e){if(V.call(this),this.type="Sprite",void 0===ir){ir=new ct;var t=new nr(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);ir.setIndex([0,1,2,0,2,3]),ir.setAttribute("position",new ar(t,3,0,!1)),ir.setAttribute("uv",new ar(t,2,3,!1))}this.geometry=ir,this.material=void 0!==e?e:new or,this.center=new l(.5,.5)}function _r(e,t,n,i,r,a){cr.subVectors(e,n).addScalar(.5).multiply(i),void 0!==r?(hr.x=a*cr.x-r*cr.y,hr.y=r*cr.x+a*cr.y):hr.copy(cr),e.copy(t),e.x+=hr.x,e.y+=hr.y,e.applyMatrix4(ur)}vr.prototype=Object.assign(Object.create(V.prototype),{constructor:vr,isSprite:!0,raycast:function(e,t){null===e.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),lr.setFromMatrixScale(this.matrixWorld),ur.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),sr.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&lr.multiplyScalar(-sr.z);var n,i,r=this.material.rotation;0!==r&&(i=Math.cos(r),n=Math.sin(r));var a=this.center;_r(mr.set(-.5,-.5,0),sr,a,lr,n,i),_r(pr.set(.5,-.5,0),sr,a,lr,n,i),_r(dr.set(.5,.5,0),sr,a,lr,n,i),fr.set(0,0),xr.set(1,0),gr.set(1,1);var o=e.ray.intersectTriangle(mr,pr,dr,!1,qr);if(null!==o||(_r(pr.set(-.5,.5,0),sr,a,lr,n,i),xr.set(0,1),null!==(o=e.ray.intersectTriangle(mr,dr,pr,!1,qr)))){var q=e.ray.origin.distanceTo(qr);q<e.near||q>e.far||t.push({distance:q,point:qr.clone(),uv:Re.getUV(qr,mr,pr,dr,fr,xr,gr,new l),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(e){return V.prototype.copy.call(this,e),void 0!==e.center&&this.center.copy(e.center),this}});var yr=new v,br=new v;function wr(){V.call(this),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function Mr(e,t){e&&e.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),zt.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new E,this.bindMatrixInverse=new E}wr.prototype=Object.assign(Object.create(V.prototype),{constructor:wr,isLOD:!0,copy:function(e){V.prototype.copy.call(this,e,!1);for(var t=e.levels,n=0,i=t.length;n<i;n++){var r=t[n];this.addLevel(r.object.clone(),r.distance)}return this.autoUpdate=e.autoUpdate,this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var n=this.levels,i=0;i<n.length&&!(t<n[i].distance);i++);return n.splice(i,0,{distance:t,object:e}),this.add(e),this},getCurrentLevel:function(){return this._currentLevel},getObjectForDistance:function(e){var t=this.levels;if(t.length>0){for(var n=1,i=t.length;n<i&&!(e<t[n].distance);n++);return t[n-1].object}return null},raycast:function(e,t){if(this.levels.length>0){yr.setFromMatrixPosition(this.matrixWorld);var n=e.ray.origin.distanceTo(yr);this.getObjectForDistance(n).raycast(e,t)}},update:function(e){var t=this.levels;if(t.length>1){yr.setFromMatrixPosition(e.matrixWorld),br.setFromMatrixPosition(this.matrixWorld);var n=yr.distanceTo(br)/e.zoom;t[0].object.visible=!0;for(var i=1,r=t.length;i<r&&n>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(this._currentLevel=i-1;i<r;i++)t[i].object.visible=!1}},toJSON:function(e){var t=V.prototype.toJSON.call(this,e);!1===this.autoUpdate&&(t.object.autoUpdate=!1),t.object.levels=[];for(var n=this.levels,i=0,r=n.length;i<r;i++){var a=n[i];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),Mr.prototype=Object.assign(Object.create(zt.prototype),{constructor:Mr,isSkinnedMesh:!0,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var e=new m,t=this.geometry.attributes.skinWeight,n=0,i=t.count;n<i;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);var r=1/e.manhattanLength();r!==1/0?e.multiplyScalar(r):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){zt.prototype.updateMatrixWorld.call(this,e),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Sr=new E,Tr=new E;function Er(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new E)}}function zr(){V.call(this),this.type="Bone"}Object.assign(Er.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var n=new E;this.bones[e]&&n.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(n)}},pose:function(){var e,t,n;for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){for(var e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture,r=0,a=e.length;r<a;r++){var o=e[r]?e[r].matrixWorld:Tr;Sr.multiplyMatrices(o,t[r]),Sr.toArray(n,16*r)}void 0!==i&&(i.needsUpdate=!0)},clone:function(){return new Er(this.bones,this.boneInverses)},getBoneByName:function(e){for(var t=0,n=this.bones.length;t<n;t++){var i=this.bones[t];if(i.name===e)return i}},dispose:function(){this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=void 0)}}),zr.prototype=Object.assign(Object.create(V.prototype),{constructor:zr,isBone:!0});var Ar=new E,Lr=new E,Cr=[],Rr=new zt;function Pr(e,t,n){zt.call(this,e,t),this.instanceMatrix=new Ve(new Float32Array(16*n),16),this.count=n,this.frustumCulled=!1}function Or(e){je.call(this),this.type="LineBasicMaterial",this.color=new De(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}Pr.prototype=Object.assign(Object.create(zt.prototype),{constructor:Pr,isInstancedMesh:!0,getMatrixAt:function(e,t){t.fromArray(this.instanceMatrix.array,16*e)},raycast:function(e,t){var n=this.matrixWorld,i=this.count;if(Rr.geometry=this.geometry,Rr.material=this.material,void 0!==Rr.material)for(var r=0;r<i;r++)this.getMatrixAt(r,Ar),Lr.multiplyMatrices(n,Ar),Rr.matrixWorld=Lr,Rr.raycast(e,Cr),Cr.length>0&&(Cr[0].instanceId=r,Cr[0].object=this,t.push(Cr[0]),Cr.length=0)},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,16*e)},updateMorphTargets:function(){}}),Or.prototype=Object.create(je.prototype),Or.prototype.constructor=Or,Or.prototype.isLineBasicMaterial=!0,Or.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this};var Nr=new v,Dr=new v,Ir=new E,kr=new xe,Ur=new se;function Br(e,t,n){1===n&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),V.call(this),this.type="Line",this.geometry=void 0!==e?e:new ct,this.material=void 0!==t?t:new Or}Br.prototype=Object.assign(Object.create(V.prototype),{constructor:Br,isLine:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,n=[0],i=1,r=t.count;i<r;i++)Nr.fromBufferAttribute(t,i-1),Dr.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=Nr.distanceTo(Dr);e.setAttribute("lineDistance",new Qe(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var a=e.vertices;(n=e.lineDistances)[0]=0;for(i=1,r=a.length;i<r;i++)n[i]=n[i-1],n[i]+=a[i-1].distanceTo(a[i])}return this},raycast:function(e,t){var n=this.geometry,i=this.matrixWorld,r=e.params.Line.threshold;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ur.copy(n.boundingSphere),Ur.applyMatrix4(i),Ur.radius+=r,!1!==e.ray.intersectsSphere(Ur)){Ir.getInverse(i),kr.copy(e.ray).applyMatrix4(Ir);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,q=new v,l=new v,s=new v,c=new v,h=this&&this.isLineSegments?2:1;if(n.isBufferGeometry){var u=n.index,m=n.attributes.position.array;if(null!==u)for(var p=u.array,d=0,f=p.length-1;d<f;d+=h){var x=p[d],g=p[d+1];if(q.fromArray(m,3*x),l.fromArray(m,3*g),!(kr.distanceSqToSegment(q,l,c,s)>o))c.applyMatrix4(this.matrixWorld),(b=e.ray.origin.distanceTo(c))<e.near||b>e.far||t.push({distance:b,point:s.clone().applyMatrix4(this.matrixWorld),index:d,face:null,faceIndex:null,object:this})}else for(d=0,f=m.length/3-1;d<f;d+=h){if(q.fromArray(m,3*d),l.fromArray(m,3*d+3),!(kr.distanceSqToSegment(q,l,c,s)>o))c.applyMatrix4(this.matrixWorld),(b=e.ray.origin.distanceTo(c))<e.near||b>e.far||t.push({distance:b,point:s.clone().applyMatrix4(this.matrixWorld),index:d,face:null,faceIndex:null,object:this})}}else if(n.isGeometry){var _=n.vertices,y=_.length;for(d=0;d<y-1;d+=h){var b;if(!(kr.distanceSqToSegment(_[d],_[d+1],c,s)>o))c.applyMatrix4(this.matrixWorld),(b=e.ray.origin.distanceTo(c))<e.near||b>e.far||t.push({distance:b,point:s.clone().applyMatrix4(this.matrixWorld),index:d,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Fr=new v,jr=new v;function Hr(e,t){Br.call(this,e,t),this.type="LineSegments"}function Gr(e,t){Br.call(this,e,t),this.type="LineLoop"}function Vr(e){je.call(this),this.type="PointsMaterial",this.color=new De(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(e)}Hr.prototype=Object.assign(Object.create(Br.prototype),{constructor:Hr,isLineSegments:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,n=[],i=0,r=t.count;i<r;i+=2)Fr.fromBufferAttribute(t,i),jr.fromBufferAttribute(t,i+1),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+Fr.distanceTo(jr);e.setAttribute("lineDistance",new Qe(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var a=e.vertices;for(n=e.lineDistances,i=0,r=a.length;i<r;i+=2)Fr.copy(a[i]),jr.copy(a[i+1]),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+Fr.distanceTo(jr)}return this}}),Gr.prototype=Object.assign(Object.create(Br.prototype),{constructor:Gr,isLineLoop:!0}),Vr.prototype=Object.create(je.prototype),Vr.prototype.constructor=Vr,Vr.prototype.isPointsMaterial=!0,Vr.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this};var Wr=new E,Xr=new xe,Yr=new se,Jr=new v;function Zr(e,t){V.call(this),this.type="Points",this.geometry=void 0!==e?e:new ct,this.material=void 0!==t?t:new Vr,this.updateMorphTargets()}function Kr(e,t,n,i,r,a,o){var q=Xr.distanceSqToPoint(e);if(q<n){var l=new v;Xr.closestPointToPoint(e,l),l.applyMatrix4(i);var s=r.ray.origin.distanceTo(l);if(s<r.near||s>r.far)return;a.push({distance:s,distanceToRay:Math.sqrt(q),point:l,index:t,face:null,object:o})}}function $r(e,t,n,i,r,a,o,q,l){u.call(this,e,t,n,i,r,a,o,q,l),this.format=void 0!==o?o:1022,this.minFilter=void 0!==a?a:1006,this.magFilter=void 0!==r?r:1006,this.generateMipmaps=!1}function Qr(e,t,n,i,r,a,o,q,l,s,c,h){u.call(this,null,a,o,q,l,s,i,r,c,h),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function ea(e,t,n,i,r,a,o,q,l){u.call(this,e,t,n,i,r,a,o,q,l),this.needsUpdate=!0}function ta(e,t,n,i,r,a,o,q,l,s){if(1026!==(s=void 0!==s?s:1026)&&1027!==s)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&1026===s&&(n=1012),void 0===n&&1027===s&&(n=1020),u.call(this,null,i,r,a,o,q,s,n,l),this.image={width:e,height:t},this.magFilter=void 0!==o?o:1003,this.minFilter=void 0!==q?q:1003,this.flipY=!1,this.generateMipmaps=!1}function na(e){ct.call(this),this.type="WireframeGeometry";var t,n,i,r,a,o,q,l,s,c,h=[],u=[0,0],m={},p=["a","b","c"];if(e&&e.isGeometry){var d=e.faces;for(t=0,i=d.length;t<i;t++){var f=d[t];for(n=0;n<3;n++)q=f[p[n]],l=f[p[(n+1)%3]],u[0]=Math.min(q,l),u[1]=Math.max(q,l),void 0===m[s=u[0]+","+u[1]]&&(m[s]={index1:u[0],index2:u[1]})}for(s in m)o=m[s],c=e.vertices[o.index1],h.push(c.x,c.y,c.z),c=e.vertices[o.index2],h.push(c.x,c.y,c.z)}else if(e&&e.isBufferGeometry){var x,g,_,y,b,w,M;if(c=new v,null!==e.index){for(x=e.attributes.position,g=e.index,0===(_=e.groups).length&&(_=[{start:0,count:g.count,materialIndex:0}]),r=0,a=_.length;r<a;++r)for(t=b=(y=_[r]).start,i=b+y.count;t<i;t+=3)for(n=0;n<3;n++)q=g.getX(t+n),l=g.getX(t+(n+1)%3),u[0]=Math.min(q,l),u[1]=Math.max(q,l),void 0===m[s=u[0]+","+u[1]]&&(m[s]={index1:u[0],index2:u[1]});for(s in m)o=m[s],c.fromBufferAttribute(x,o.index1),h.push(c.x,c.y,c.z),c.fromBufferAttribute(x,o.index2),h.push(c.x,c.y,c.z)}else for(t=0,i=(x=e.attributes.position).count/3;t<i;t++)for(n=0;n<3;n++)w=3*t+n,c.fromBufferAttribute(x,w),h.push(c.x,c.y,c.z),M=3*t+(n+1)%3,c.fromBufferAttribute(x,M),h.push(c.x,c.y,c.z)}this.setAttribute("position",new Qe(h,3))}function ia(e,t,n){Nt.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:n},this.fromBufferGeometry(new ra(e,t,n)),this.mergeVertices()}function ra(e,t,n){ct.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:n};var i,r,a=[],o=[],q=[],l=[],s=1e-5,c=new v,h=new v,u=new v,m=new v,p=new v;e.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var d=t+1;for(i=0;i<=n;i++){var f=i/n;for(r=0;r<=t;r++){var x=r/t;e(x,f,h),o.push(h.x,h.y,h.z),x-s>=0?(e(x-s,f,u),m.subVectors(h,u)):(e(x+s,f,u),m.subVectors(u,h)),f-s>=0?(e(x,f-s,u),p.subVectors(h,u)):(e(x,f+s,u),p.subVectors(u,h)),c.crossVectors(m,p).normalize(),q.push(c.x,c.y,c.z),l.push(x,f)}}for(i=0;i<n;i++)for(r=0;r<t;r++){var g=i*d+r,_=i*d+r+1,y=(i+1)*d+r+1,b=(i+1)*d+r;a.push(g,_,b),a.push(_,y,b)}this.setIndex(a),this.setAttribute("position",new Qe(o,3)),this.setAttribute("normal",new Qe(q,3)),this.setAttribute("uv",new Qe(l,2))}function aa(e,t,n,i){Nt.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i},this.fromBufferGeometry(new oa(e,t,n,i)),this.mergeVertices()}function oa(e,t,n,i){ct.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i},n=n||1;var r=[],a=[];function o(e,t,n,i){var r,a,o=Math.pow(2,i),l=[];for(r=0;r<=o;r++){l[r]=[];var s=e.clone().lerp(n,r/o),c=t.clone().lerp(n,r/o),h=o-r;for(a=0;a<=h;a++)l[r][a]=0===a&&r===o?s:s.clone().lerp(c,a/h)}for(r=0;r<o;r++)for(a=0;a<2*(o-r)-1;a++){var u=Math.floor(a/2);a%2==0?(q(l[r][u+1]),q(l[r+1][u]),q(l[r][u])):(q(l[r][u+1]),q(l[r+1][u+1]),q(l[r+1][u]))}}function q(e){r.push(e.x,e.y,e.z)}function s(t,n){var i=3*t;n.x=e[i+0],n.y=e[i+1],n.z=e[i+2]}function c(e,t,n,i){i<0&&1===e.x&&(a[t]=e.x-1),0===n.x&&0===n.z&&(a[t]=i/2/Math.PI+.5)}function h(e){return Math.atan2(e.z,-e.x)}!function(e){for(var n=new v,i=new v,r=new v,a=0;a<t.length;a+=3)s(t[a+0],n),s(t[a+1],i),s(t[a+2],r),o(n,i,r,e)}(i=i||0),function(e){for(var t=new v,n=0;n<r.length;n+=3)t.x=r[n+0],t.y=r[n+1],t.z=r[n+2],t.normalize().multiplyScalar(e),r[n+0]=t.x,r[n+1]=t.y,r[n+2]=t.z}(n),function(){for(var e=new v,t=0;t<r.length;t+=3){e.x=r[t+0],e.y=r[t+1],e.z=r[t+2];var n=h(e)/2/Math.PI+.5,i=(o=e,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(n,1-i)}var o;(function(){for(var e=new v,t=new v,n=new v,i=new v,o=new l,q=new l,s=new l,u=0,m=0;u<r.length;u+=9,m+=6){e.set(r[u+0],r[u+1],r[u+2]),t.set(r[u+3],r[u+4],r[u+5]),n.set(r[u+6],r[u+7],r[u+8]),o.set(a[m+0],a[m+1]),q.set(a[m+2],a[m+3]),s.set(a[m+4],a[m+5]),i.copy(e).add(t).add(n).divideScalar(3);var p=h(i);c(o,m+0,e,p),c(q,m+2,t,p),c(s,m+4,n,p)}})(),function(){for(var e=0;e<a.length;e+=6){var t=a[e+0],n=a[e+2],i=a[e+4],r=Math.max(t,n,i),o=Math.min(t,n,i);r>.9&&o<.1&&(t<.2&&(a[e+0]+=1),n<.2&&(a[e+2]+=1),i<.2&&(a[e+4]+=1))}}()}(),this.setAttribute("position",new Qe(r,3)),this.setAttribute("normal",new Qe(r.slice(),3)),this.setAttribute("uv",new Qe(a,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}function qa(e,t){Nt.call(this),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new la(e,t)),this.mergeVertices()}function la(e,t){oa.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:e,detail:t}}function sa(e,t){Nt.call(this),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ca(e,t)),this.mergeVertices()}function ca(e,t){oa.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ha(e,t){Nt.call(this),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ua(e,t)),this.mergeVertices()}function ua(e,t){var n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];oa.call(this,i,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ma(e,t){Nt.call(this),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new pa(e,t)),this.mergeVertices()}function pa(e,t){var n=(1+Math.sqrt(5))/2,i=1/n,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];oa.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:e,detail:t}}function da(e,t,n,i,r,a){Nt.call(this),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:r},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new fa(e,t,n,i,r);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function fa(e,t,n,i,r){ct.call(this),this.type="TubeBufferGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:r},t=t||64,n=n||1,i=i||8,r=r||!1;var a=e.computeFrenetFrames(t,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,q,s=new v,c=new v,h=new l,u=new v,m=[],p=[],d=[],f=[];function x(r){u=e.getPointAt(r/t,u);var o=a.normals[r],l=a.binormals[r];for(q=0;q<=i;q++){var h=q/i*Math.PI*2,d=Math.sin(h),f=-Math.cos(h);c.x=f*o.x+d*l.x,c.y=f*o.y+d*l.y,c.z=f*o.z+d*l.z,c.normalize(),p.push(c.x,c.y,c.z),s.x=u.x+n*c.x,s.y=u.y+n*c.y,s.z=u.z+n*c.z,m.push(s.x,s.y,s.z)}}!function(){for(o=0;o<t;o++)x(o);x(!1===r?t:0),function(){for(o=0;o<=t;o++)for(q=0;q<=i;q++)h.x=o/t,h.y=q/i,d.push(h.x,h.y)}(),function(){for(q=1;q<=t;q++)for(o=1;o<=i;o++){var e=(i+1)*(q-1)+(o-1),n=(i+1)*q+(o-1),r=(i+1)*q+o,a=(i+1)*(q-1)+o;f.push(e,n,a),f.push(n,r,a)}}()}(),this.setIndex(f),this.setAttribute("position",new Qe(m,3)),this.setAttribute("normal",new Qe(p,3)),this.setAttribute("uv",new Qe(d,2))}function xa(e,t,n,i,r,a,o){Nt.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:r,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new ga(e,t,n,i,r,a)),this.mergeVertices()}function ga(e,t,n,i,r,a){ct.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:r,q:a},e=e||1,t=t||.4,n=Math.floor(n)||64,i=Math.floor(i)||8,r=r||2,a=a||3;var o,q,l=[],s=[],c=[],h=[],u=new v,m=new v,p=new v,d=new v,f=new v,x=new v,g=new v;for(o=0;o<=n;++o){var _=o/n*r*Math.PI*2;for(z(_,r,a,e,p),z(_+.01,r,a,e,d),x.subVectors(d,p),g.addVectors(d,p),f.crossVectors(x,g),g.crossVectors(f,x),f.normalize(),g.normalize(),q=0;q<=i;++q){var y=q/i*Math.PI*2,b=-t*Math.cos(y),w=t*Math.sin(y);u.x=p.x+(b*g.x+w*f.x),u.y=p.y+(b*g.y+w*f.y),u.z=p.z+(b*g.z+w*f.z),s.push(u.x,u.y,u.z),m.subVectors(u,p).normalize(),c.push(m.x,m.y,m.z),h.push(o/n),h.push(q/i)}}for(q=1;q<=n;q++)for(o=1;o<=i;o++){var M=(i+1)*(q-1)+(o-1),S=(i+1)*q+(o-1),T=(i+1)*q+o,E=(i+1)*(q-1)+o;l.push(M,S,E),l.push(S,T,E)}function z(e,t,n,i,r){var a=Math.cos(e),o=Math.sin(e),q=n/t*e,l=Math.cos(q);r.x=i*(2+l)*.5*a,r.y=i*(2+l)*o*.5,r.z=i*Math.sin(q)*.5}this.setIndex(l),this.setAttribute("position",new Qe(s,3)),this.setAttribute("normal",new Qe(c,3)),this.setAttribute("uv",new Qe(h,2))}function va(e,t,n,i,r){Nt.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:r},this.fromBufferGeometry(new _a(e,t,n,i,r)),this.mergeVertices()}function _a(e,t,n,i,r){ct.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:r},e=e||1,t=t||.4,n=Math.floor(n)||8,i=Math.floor(i)||6,r=r||2*Math.PI;var a,o,q=[],l=[],s=[],c=[],h=new v,u=new v,m=new v;for(a=0;a<=n;a++)for(o=0;o<=i;o++){var p=o/i*r,d=a/n*Math.PI*2;u.x=(e+t*Math.cos(d))*Math.cos(p),u.y=(e+t*Math.cos(d))*Math.sin(p),u.z=t*Math.sin(d),l.push(u.x,u.y,u.z),h.x=e*Math.cos(p),h.y=e*Math.sin(p),m.subVectors(u,h).normalize(),s.push(m.x,m.y,m.z),c.push(o/i),c.push(a/n)}for(a=1;a<=n;a++)for(o=1;o<=i;o++){var f=(i+1)*a+o-1,x=(i+1)*(a-1)+o-1,g=(i+1)*(a-1)+o,_=(i+1)*a+o;q.push(f,x,_),q.push(x,g,_)}this.setIndex(q),this.setAttribute("position",new Qe(l,3)),this.setAttribute("normal",new Qe(s,3)),this.setAttribute("uv",new Qe(c,2))}Zr.prototype=Object.assign(Object.create(V.prototype),{constructor:Zr,isPoints:!0,raycast:function(e,t){var n=this.geometry,i=this.matrixWorld,r=e.params.Points.threshold;if(null===n.boundingSphere&&n.computeBoundingSphere(),Yr.copy(n.boundingSphere),Yr.applyMatrix4(i),Yr.radius+=r,!1!==e.ray.intersectsSphere(Yr)){Wr.getInverse(i),Xr.copy(e.ray).applyMatrix4(Wr);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){var q=n.index,l=n.attributes.position.array;if(null!==q)for(var s=q.array,c=0,h=s.length;c<h;c++){var u=s[c];Jr.fromArray(l,3*u),Kr(Jr,u,o,i,e,t,this)}else{c=0;for(var m=l.length/3;c<m;c++)Jr.fromArray(l,3*c),Kr(Jr,c,o,i,e,t,this)}}else{var p=n.vertices;for(c=0,m=p.length;c<m;c++)Kr(p[c],c,o,i,e,t,this)}}},updateMorphTargets:function(){var e,t,n,i=this.geometry;if(i.isBufferGeometry){var r=i.morphAttributes,a=Object.keys(r);if(a.length>0){var o=r[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)n=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var q=i.morphTargets;void 0!==q&&q.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),$r.prototype=Object.assign(Object.create(u.prototype),{constructor:$r,isVideoTexture:!0,update:function(){var e=this.image;e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Qr.prototype=Object.create(u.prototype),Qr.prototype.constructor=Qr,Qr.prototype.isCompressedTexture=!0,ea.prototype=Object.create(u.prototype),ea.prototype.constructor=ea,ea.prototype.isCanvasTexture=!0,ta.prototype=Object.create(u.prototype),ta.prototype.constructor=ta,ta.prototype.isDepthTexture=!0,na.prototype=Object.create(ct.prototype),na.prototype.constructor=na,ia.prototype=Object.create(Nt.prototype),ia.prototype.constructor=ia,ra.prototype=Object.create(ct.prototype),ra.prototype.constructor=ra,aa.prototype=Object.create(Nt.prototype),aa.prototype.constructor=aa,oa.prototype=Object.create(ct.prototype),oa.prototype.constructor=oa,qa.prototype=Object.create(Nt.prototype),qa.prototype.constructor=qa,la.prototype=Object.create(oa.prototype),la.prototype.constructor=la,sa.prototype=Object.create(Nt.prototype),sa.prototype.constructor=sa,ca.prototype=Object.create(oa.prototype),ca.prototype.constructor=ca,ha.prototype=Object.create(Nt.prototype),ha.prototype.constructor=ha,ua.prototype=Object.create(oa.prototype),ua.prototype.constructor=ua,ma.prototype=Object.create(Nt.prototype),ma.prototype.constructor=ma,pa.prototype=Object.create(oa.prototype),pa.prototype.constructor=pa,da.prototype=Object.create(Nt.prototype),da.prototype.constructor=da,fa.prototype=Object.create(ct.prototype),fa.prototype.constructor=fa,fa.prototype.toJSON=function(){var e=ct.prototype.toJSON.call(this);return e.path=this.parameters.path.toJSON(),e},xa.prototype=Object.create(Nt.prototype),xa.prototype.constructor=xa,ga.prototype=Object.create(ct.prototype),ga.prototype.constructor=ga,va.prototype=Object.create(Nt.prototype),va.prototype.constructor=va,_a.prototype=Object.create(ct.prototype),_a.prototype.constructor=_a;var ya=function(e,t,n){n=n||2;var i,r,a,o,q,l,s,c=t&&t.length,h=c?t[0]*n:e.length,u=ba(e,0,h,n,!0),m=[];if(!u||u.next===u.prev)return m;if(c&&(u=function(e,t,n,i){var r,a,o,q,l,s=[];for(r=0,a=t.length;r<a;r++)o=t[r]*i,q=r<a-1?t[r+1]*i:e.length,(l=ba(e,o,q,i,!1))===l.next&&(l.steiner=!0),s.push(Ra(l));for(s.sort(Aa),r=0;r<s.length;r++)La(s[r],n),n=wa(n,n.next);return n}(e,t,u,n)),e.length>80*n){i=a=e[0],r=o=e[1];for(var p=n;p<h;p+=n)(q=e[p])<i&&(i=q),(l=e[p+1])<r&&(r=l),q>a&&(a=q),l>o&&(o=l);s=0!==(s=Math.max(a-i,o-r))?1/s:0}return Ma(u,m,n,i,r,s),m};function ba(e,t,n,i,r){var a,o;if(r===function(e,t,n,i){for(var r=0,a=t,o=n-i;a<n;a+=i)r+=(e[o]-e[a])*(e[a+1]+e[o+1]),o=a;return r}(e,t,n,i)>0)for(a=t;a<n;a+=i)o=Ba(a,e[a],e[a+1],o);else for(a=n-i;a>=t;a-=i)o=Ba(a,e[a],e[a+1],o);return o&&Da(o,o.next)&&(Fa(o),o=o.next),o}function wa(e,t){if(!e)return e;t||(t=e);var n,i=e;do{if(n=!1,i.steiner||!Da(i,i.next)&&0!==Na(i.prev,i,i.next))i=i.next;else{if(Fa(i),(i=t=i.prev)===i.next)break;n=!0}}while(n||i!==t);return t}function Ma(e,t,n,i,r,a,o){if(e){!o&&a&&function(e,t,n,i){var r=e;do{null===r.z&&(r.z=Ca(r.x,r.y,t,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==e);r.prevZ.nextZ=null,r.prevZ=null,function(e){var t,n,i,r,a,o,q,l,s=1;do{for(n=e,e=null,a=null,o=0;n;){for(o++,i=n,q=0,t=0;t<s&&(q++,i=i.nextZ);t++);for(l=s;q>0||l>0&&i;)0!==q&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,q--):(r=i,i=i.nextZ,l--),a?a.nextZ=r:e=r,r.prevZ=a,a=r;n=i}a.nextZ=null,s*=2}while(o>1)}(r)}(e,i,r,a);for(var q,l,s=e;e.prev!==e.next;)if(q=e.prev,l=e.next,a?Ta(e,i,r,a):Sa(e))t.push(q.i/n),t.push(e.i/n),t.push(l.i/n),Fa(e),e=l.next,s=l.next;else if((e=l)===s){o?1===o?Ma(e=Ea(e,t,n),t,n,i,r,a,2):2===o&&za(e,t,n,i,r,a):Ma(wa(e),t,n,i,r,a,1);break}}}function Sa(e){var t=e.prev,n=e,i=e.next;if(Na(t,n,i)>=0)return!1;for(var r=e.next.next;r!==e.prev;){if(Pa(t.x,t.y,n.x,n.y,i.x,i.y,r.x,r.y)&&Na(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Ta(e,t,n,i){var r=e.prev,a=e,o=e.next;if(Na(r,a,o)>=0)return!1;for(var q=r.x<a.x?r.x<o.x?r.x:o.x:a.x<o.x?a.x:o.x,l=r.y<a.y?r.y<o.y?r.y:o.y:a.y<o.y?a.y:o.y,s=r.x>a.x?r.x>o.x?r.x:o.x:a.x>o.x?a.x:o.x,c=r.y>a.y?r.y>o.y?r.y:o.y:a.y>o.y?a.y:o.y,h=Ca(q,l,t,n,i),u=Ca(s,c,t,n,i),m=e.prevZ,p=e.nextZ;m&&m.z>=h&&p&&p.z<=u;){if(m!==e.prev&&m!==e.next&&Pa(r.x,r.y,a.x,a.y,o.x,o.y,m.x,m.y)&&Na(m.prev,m,m.next)>=0)return!1;if(m=m.prevZ,p!==e.prev&&p!==e.next&&Pa(r.x,r.y,a.x,a.y,o.x,o.y,p.x,p.y)&&Na(p.prev,p,p.next)>=0)return!1;p=p.nextZ}for(;m&&m.z>=h;){if(m!==e.prev&&m!==e.next&&Pa(r.x,r.y,a.x,a.y,o.x,o.y,m.x,m.y)&&Na(m.prev,m,m.next)>=0)return!1;m=m.prevZ}for(;p&&p.z<=u;){if(p!==e.prev&&p!==e.next&&Pa(r.x,r.y,a.x,a.y,o.x,o.y,p.x,p.y)&&Na(p.prev,p,p.next)>=0)return!1;p=p.nextZ}return!0}function Ea(e,t,n){var i=e;do{var r=i.prev,a=i.next.next;!Da(r,a)&&Ia(r,i,i.next,a)&&ka(r,a)&&ka(a,r)&&(t.push(r.i/n),t.push(i.i/n),t.push(a.i/n),Fa(i),Fa(i.next),i=e=a),i=i.next}while(i!==e);return i}function za(e,t,n,i,r,a){var o=e;do{for(var q=o.next.next;q!==o.prev;){if(o.i!==q.i&&Oa(o,q)){var l=Ua(o,q);return o=wa(o,o.next),l=wa(l,l.next),Ma(o,t,n,i,r,a),void Ma(l,t,n,i,r,a)}q=q.next}o=o.next}while(o!==e)}function Aa(e,t){return e.x-t.x}function La(e,t){if(t=function(e,t){var n,i=t,r=e.x,a=e.y,o=-1/0;do{if(a<=i.y&&a>=i.next.y&&i.next.y!==i.y){var q=i.x+(a-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(q<=r&&q>o){if(o=q,q===r){if(a===i.y)return i;if(a===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!n)return null;if(r===o)return n.prev;var l,s=n,c=n.x,h=n.y,u=1/0;i=n.next;for(;i!==s;)r>=i.x&&i.x>=c&&r!==i.x&&Pa(a<h?r:o,a,c,h,a<h?o:r,a,i.x,i.y)&&((l=Math.abs(a-i.y)/(r-i.x))<u||l===u&&i.x>n.x)&&ka(i,e)&&(n=i,u=l),i=i.next;return n}(e,t)){var n=Ua(t,e);wa(n,n.next)}}function Ca(e,t,n,i,r){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*r)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*r)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function Ra(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function Pa(e,t,n,i,r,a,o,q){return(r-o)*(t-q)-(e-o)*(a-q)>=0&&(e-o)*(i-q)-(n-o)*(t-q)>=0&&(n-o)*(a-q)-(r-o)*(i-q)>=0}function Oa(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&Ia(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&ka(e,t)&&ka(t,e)&&function(e,t){var n=e,i=!1,r=(e.x+t.x)/2,a=(e.y+t.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&r<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}(e,t)}function Na(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function Da(e,t){return e.x===t.x&&e.y===t.y}function Ia(e,t,n,i){return!!(Da(e,n)&&Da(t,i)||Da(e,i)&&Da(n,t))||Na(e,t,n)>0!=Na(e,t,i)>0&&Na(n,i,e)>0!=Na(n,i,t)>0}function ka(e,t){return Na(e.prev,e,e.next)<0?Na(e,t,e.next)>=0&&Na(e,e.prev,t)>=0:Na(e,t,e.prev)<0||Na(e,e.next,t)<0}function Ua(e,t){var n=new ja(e.i,e.x,e.y),i=new ja(t.i,t.x,t.y),r=e.next,a=t.prev;return e.next=t,t.prev=e,n.next=r,r.prev=n,i.next=n,n.prev=i,a.next=i,i.prev=a,i}function Ba(e,t,n,i){var r=new ja(e,t,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Fa(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function ja(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var Ha={area:function(e){for(var t=e.length,n=0,i=t-1,r=0;r<t;i=r++)n+=e[i].x*e[r].y-e[r].x*e[i].y;return.5*n},isClockWise:function(e){return Ha.area(e)<0},triangulateShape:function(e,t){var n=[],i=[],r=[];Ga(e),Va(n,e);var a=e.length;t.forEach(Ga);for(var o=0;o<t.length;o++)i.push(a),a+=t[o].length,Va(n,t[o]);var q=ya(n,i);for(o=0;o<q.length;o+=3)r.push(q.slice(o,o+3));return r}};function Ga(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function Va(e,t){for(var n=0;n<t.length;n++)e.push(t[n].x),e.push(t[n].y)}function Wa(e,t){Nt.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new Xa(e,t)),this.mergeVertices()}function Xa(e,t){ct.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];for(var n=this,i=[],r=[],a=0,o=e.length;a<o;a++){q(e[a])}function q(e){var a=[],o=void 0!==t.curveSegments?t.curveSegments:12,q=void 0!==t.steps?t.steps:1,s=void 0!==t.depth?t.depth:100,c=void 0===t.bevelEnabled||t.bevelEnabled,h=void 0!==t.bevelThickness?t.bevelThickness:6,u=void 0!==t.bevelSize?t.bevelSize:h-2,m=void 0!==t.bevelOffset?t.bevelOffset:0,p=void 0!==t.bevelSegments?t.bevelSegments:3,d=t.extrudePath,f=void 0!==t.UVGenerator?t.UVGenerator:Ya;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),s=t.amount);var x,g,_,y,b,w,M,S,T=!1;d&&(x=d.getSpacedPoints(q),T=!0,c=!1,g=d.computeFrenetFrames(q,!1),_=new v,y=new v,b=new v),c||(p=0,h=0,u=0,m=0);var E=e.extractPoints(o),z=E.shape,A=E.holes;if(!Ha.isClockWise(z))for(z=z.reverse(),M=0,S=A.length;M<S;M++)w=A[M],Ha.isClockWise(w)&&(A[M]=w.reverse());var L=Ha.triangulateShape(z,A),C=z;for(M=0,S=A.length;M<S;M++)w=A[M],z=z.concat(w);function R(e,t,n){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(n).add(e)}var P,O,N,D,I,k,U=z.length,B=L.length;function F(e,t,n){var i,r,a,o=e.x-t.x,q=e.y-t.y,s=n.x-e.x,c=n.y-e.y,h=o*o+q*q,u=o*c-q*s;if(Math.abs(u)>Number.EPSILON){var m=Math.sqrt(h),p=Math.sqrt(s*s+c*c),d=t.x-q/m,f=t.y+o/m,x=((n.x-c/p-d)*c-(n.y+s/p-f)*s)/(o*c-q*s),g=(i=d+o*x-e.x)*i+(r=f+q*x-e.y)*r;if(g<=2)return new l(i,r);a=Math.sqrt(g/2)}else{var v=!1;o>Number.EPSILON?s>Number.EPSILON&&(v=!0):o<-Number.EPSILON?s<-Number.EPSILON&&(v=!0):Math.sign(q)===Math.sign(c)&&(v=!0),v?(i=-q,r=o,a=Math.sqrt(h)):(i=o,r=q,a=Math.sqrt(h/2))}return new l(i/a,r/a)}for(var j=[],H=0,G=C.length,V=G-1,W=H+1;H<G;H++,V++,W++)V===G&&(V=0),W===G&&(W=0),j[H]=F(C[H],C[V],C[W]);var X,Y,J=[],Z=j.concat();for(M=0,S=A.length;M<S;M++){for(w=A[M],X=[],H=0,V=(G=w.length)-1,W=H+1;H<G;H++,V++,W++)V===G&&(V=0),W===G&&(W=0),X[H]=F(w[H],w[V],w[W]);J.push(X),Z=Z.concat(X)}for(P=0;P<p;P++){for(N=P/p,D=h*Math.cos(N*Math.PI/2),O=u*Math.sin(N*Math.PI/2)+m,H=0,G=C.length;H<G;H++)$((I=R(C[H],j[H],O)).x,I.y,-D);for(M=0,S=A.length;M<S;M++)for(w=A[M],X=J[M],H=0,G=w.length;H<G;H++)$((I=R(w[H],X[H],O)).x,I.y,-D)}for(O=u+m,H=0;H<U;H++)I=c?R(z[H],Z[H],O):z[H],T?(y.copy(g.normals[0]).multiplyScalar(I.x),_.copy(g.binormals[0]).multiplyScalar(I.y),b.copy(x[0]).add(y).add(_),$(b.x,b.y,b.z)):$(I.x,I.y,0);for(Y=1;Y<=q;Y++)for(H=0;H<U;H++)I=c?R(z[H],Z[H],O):z[H],T?(y.copy(g.normals[Y]).multiplyScalar(I.x),_.copy(g.binormals[Y]).multiplyScalar(I.y),b.copy(x[Y]).add(y).add(_),$(b.x,b.y,b.z)):$(I.x,I.y,s/q*Y);for(P=p-1;P>=0;P--){for(N=P/p,D=h*Math.cos(N*Math.PI/2),O=u*Math.sin(N*Math.PI/2)+m,H=0,G=C.length;H<G;H++)$((I=R(C[H],j[H],O)).x,I.y,s+D);for(M=0,S=A.length;M<S;M++)for(w=A[M],X=J[M],H=0,G=w.length;H<G;H++)I=R(w[H],X[H],O),T?$(I.x,I.y+x[q-1].y,x[q-1].x+D):$(I.x,I.y,s+D)}function K(e,t){var n,i;for(H=e.length;--H>=0;){n=H,(i=H-1)<0&&(i=e.length-1);var r=0,a=q+2*p;for(r=0;r<a;r++){var o=U*r,l=U*(r+1);ee(t+n+o,t+i+o,t+i+l,t+n+l)}}}function $(e,t,n){a.push(e),a.push(t),a.push(n)}function Q(e,t,r){te(e),te(t),te(r);var a=i.length/3,o=f.generateTopUV(n,i,a-3,a-2,a-1);ne(o[0]),ne(o[1]),ne(o[2])}function ee(e,t,r,a){te(e),te(t),te(a),te(t),te(r),te(a);var o=i.length/3,q=f.generateSideWallUV(n,i,o-6,o-3,o-2,o-1);ne(q[0]),ne(q[1]),ne(q[3]),ne(q[1]),ne(q[2]),ne(q[3])}function te(e){i.push(a[3*e+0]),i.push(a[3*e+1]),i.push(a[3*e+2])}function ne(e){r.push(e.x),r.push(e.y)}!function(){var e=i.length/3;if(c){var t=0,r=U*t;for(H=0;H<B;H++)Q((k=L[H])[2]+r,k[1]+r,k[0]+r);for(r=U*(t=q+2*p),H=0;H<B;H++)Q((k=L[H])[0]+r,k[1]+r,k[2]+r)}else{for(H=0;H<B;H++)Q((k=L[H])[2],k[1],k[0]);for(H=0;H<B;H++)Q((k=L[H])[0]+U*q,k[1]+U*q,k[2]+U*q)}n.addGroup(e,i.length/3-e,0)}(),function(){var e=i.length/3,t=0;for(K(C,t),t+=C.length,M=0,S=A.length;M<S;M++)K(w=A[M],t),t+=w.length;n.addGroup(e,i.length/3-e,1)}()}this.setAttribute("position",new Qe(i,3)),this.setAttribute("uv",new Qe(r,2)),this.computeVertexNormals()}Wa.prototype=Object.create(Nt.prototype),Wa.prototype.constructor=Wa,Wa.prototype.toJSON=function(){var e=Nt.prototype.toJSON.call(this);return Ja(this.parameters.shapes,this.parameters.options,e)},Xa.prototype=Object.create(ct.prototype),Xa.prototype.constructor=Xa,Xa.prototype.toJSON=function(){var e=ct.prototype.toJSON.call(this);return Ja(this.parameters.shapes,this.parameters.options,e)};var Ya={generateTopUV:function(e,t,n,i,r){var a=t[3*n],o=t[3*n+1],q=t[3*i],s=t[3*i+1],c=t[3*r],h=t[3*r+1];return[new l(a,o),new l(q,s),new l(c,h)]},generateSideWallUV:function(e,t,n,i,r,a){var o=t[3*n],q=t[3*n+1],s=t[3*n+2],c=t[3*i],h=t[3*i+1],u=t[3*i+2],m=t[3*r],p=t[3*r+1],d=t[3*r+2],f=t[3*a],x=t[3*a+1],g=t[3*a+2];return Math.abs(q-h)<.01?[new l(o,1-s),new l(c,1-u),new l(m,1-d),new l(f,1-g)]:[new l(q,1-s),new l(h,1-u),new l(p,1-d),new l(x,1-g)]}};function Ja(e,t,n){if(n.shapes=[],Array.isArray(e))for(var i=0,r=e.length;i<r;i++){var a=e[i];n.shapes.push(a.uuid)}else n.shapes.push(e.uuid);return void 0!==t.extrudePath&&(n.options.extrudePath=t.extrudePath.toJSON()),n}function Za(e,t){Nt.call(this),this.type="TextGeometry",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new Ka(e,t)),this.mergeVertices()}function Ka(e,t){var n=(t=t||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Nt;var i=n.generateShapes(e,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),Xa.call(this,i,t),this.type="TextBufferGeometry"}function $a(e,t,n,i,r,a,o){Nt.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new Qa(e,t,n,i,r,a,o)),this.mergeVertices()}function Qa(e,t,n,i,r,a,o){ct.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},e=e||1,t=Math.max(3,Math.floor(t)||8),n=Math.max(2,Math.floor(n)||6),i=void 0!==i?i:0,r=void 0!==r?r:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var q,l,s=Math.min(a+o,Math.PI),c=0,h=[],u=new v,m=new v,p=[],d=[],f=[],x=[];for(l=0;l<=n;l++){var g=[],_=l/n,y=0;for(0==l&&0==a?y=.5/t:l==n&&s==Math.PI&&(y=-.5/t),q=0;q<=t;q++){var b=q/t;u.x=-e*Math.cos(i+b*r)*Math.sin(a+_*o),u.y=e*Math.cos(a+_*o),u.z=e*Math.sin(i+b*r)*Math.sin(a+_*o),d.push(u.x,u.y,u.z),m.copy(u).normalize(),f.push(m.x,m.y,m.z),x.push(b+y,1-_),g.push(c++)}h.push(g)}for(l=0;l<n;l++)for(q=0;q<t;q++){var w=h[l][q+1],M=h[l][q],S=h[l+1][q],T=h[l+1][q+1];(0!==l||a>0)&&p.push(w,M,T),(l!==n-1||s<Math.PI)&&p.push(M,S,T)}this.setIndex(p),this.setAttribute("position",new Qe(d,3)),this.setAttribute("normal",new Qe(f,3)),this.setAttribute("uv",new Qe(x,2))}function eo(e,t,n,i,r,a){Nt.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},this.fromBufferGeometry(new to(e,t,n,i,r,a)),this.mergeVertices()}function to(e,t,n,i,r,a){ct.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},e=e||.5,t=t||1,r=void 0!==r?r:0,a=void 0!==a?a:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var o,q,s,c=[],h=[],u=[],m=[],p=e,d=(t-e)/(i=void 0!==i?Math.max(1,i):1),f=new v,x=new l;for(q=0;q<=i;q++){for(s=0;s<=n;s++)o=r+s/n*a,f.x=p*Math.cos(o),f.y=p*Math.sin(o),h.push(f.x,f.y,f.z),u.push(0,0,1),x.x=(f.x/t+1)/2,x.y=(f.y/t+1)/2,m.push(x.x,x.y);p+=d}for(q=0;q<i;q++){var g=q*(n+1);for(s=0;s<n;s++){var _=o=s+g,y=o+n+1,b=o+n+2,w=o+1;c.push(_,y,w),c.push(y,b,w)}}this.setIndex(c),this.setAttribute("position",new Qe(h,3)),this.setAttribute("normal",new Qe(u,3)),this.setAttribute("uv",new Qe(m,2))}function no(e,t,n,i){Nt.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},this.fromBufferGeometry(new io(e,t,n,i)),this.mergeVertices()}function io(e,t,n,i){ct.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t)||12,n=n||0,i=i||2*Math.PI,i=q.clamp(i,0,2*Math.PI);var r,a,o,s=[],c=[],h=[],u=1/t,m=new v,p=new l;for(a=0;a<=t;a++){var d=n+a*u*i,f=Math.sin(d),x=Math.cos(d);for(o=0;o<=e.length-1;o++)m.x=e[o].x*f,m.y=e[o].y,m.z=e[o].x*x,c.push(m.x,m.y,m.z),p.x=a/t,p.y=o/(e.length-1),h.push(p.x,p.y)}for(a=0;a<t;a++)for(o=0;o<e.length-1;o++){var g=r=o+a*e.length,_=r+e.length,y=r+e.length+1,b=r+1;s.push(g,_,b),s.push(_,y,b)}if(this.setIndex(s),this.setAttribute("position",new Qe(c,3)),this.setAttribute("uv",new Qe(h,2)),this.computeVertexNormals(),i===2*Math.PI){var w=this.attributes.normal.array,M=new v,S=new v,T=new v;for(r=t*e.length*3,a=0,o=0;a<e.length;a++,o+=3)M.x=w[o+0],M.y=w[o+1],M.z=w[o+2],S.x=w[r+o+0],S.y=w[r+o+1],S.z=w[r+o+2],T.addVectors(M,S).normalize(),w[o+0]=w[r+o+0]=T.x,w[o+1]=w[r+o+1]=T.y,w[o+2]=w[r+o+2]=T.z}}function ro(e,t){Nt.call(this),this.type="ShapeGeometry","object"==typeof t&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new ao(e,t)),this.mergeVertices()}function ao(e,t){ct.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;var n=[],i=[],r=[],a=[],o=0,q=0;if(!1===Array.isArray(e))s(e);else for(var l=0;l<e.length;l++)s(e[l]),this.addGroup(o,q,l),o+=q,q=0;function s(e){var o,l,s,c=i.length/3,h=e.extractPoints(t),u=h.shape,m=h.holes;for(!1===Ha.isClockWise(u)&&(u=u.reverse()),o=0,l=m.length;o<l;o++)s=m[o],!0===Ha.isClockWise(s)&&(m[o]=s.reverse());var p=Ha.triangulateShape(u,m);for(o=0,l=m.length;o<l;o++)s=m[o],u=u.concat(s);for(o=0,l=u.length;o<l;o++){var d=u[o];i.push(d.x,d.y,0),r.push(0,0,1),a.push(d.x,d.y)}for(o=0,l=p.length;o<l;o++){var f=p[o],x=f[0]+c,g=f[1]+c,v=f[2]+c;n.push(x,g,v),q+=3}}this.setIndex(n),this.setAttribute("position",new Qe(i,3)),this.setAttribute("normal",new Qe(r,3)),this.setAttribute("uv",new Qe(a,2))}function oo(e,t){if(t.shapes=[],Array.isArray(e))for(var n=0,i=e.length;n<i;n++){var r=e[n];t.shapes.push(r.uuid)}else t.shapes.push(e.uuid);return t}function qo(e,t){ct.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var n,i,r,a,o=[],l=Math.cos(q.DEG2RAD*t),s=[0,0],c={},h=["a","b","c"];e.isBufferGeometry?(a=new Nt).fromBufferGeometry(e):a=e.clone(),a.mergeVertices(),a.computeFaceNormals();for(var u=a.vertices,m=a.faces,p=0,d=m.length;p<d;p++)for(var f=m[p],x=0;x<3;x++)n=f[h[x]],i=f[h[(x+1)%3]],s[0]=Math.min(n,i),s[1]=Math.max(n,i),void 0===c[r=s[0]+","+s[1]]?c[r]={index1:s[0],index2:s[1],face1:p,face2:void 0}:c[r].face2=p;for(r in c){var g=c[r];if(void 0===g.face2||m[g.face1].normal.dot(m[g.face2].normal)<=l){var v=u[g.index1];o.push(v.x,v.y,v.z),v=u[g.index2],o.push(v.x,v.y,v.z)}}this.setAttribute("position",new Qe(o,3))}function lo(e,t,n,i,r,a,o,q){Nt.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:q},this.fromBufferGeometry(new so(e,t,n,i,r,a,o,q)),this.mergeVertices()}function so(e,t,n,i,r,a,o,q){ct.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:q};var s=this;e=void 0!==e?e:1,t=void 0!==t?t:1,n=n||1,i=Math.floor(i)||8,r=Math.floor(r)||1,a=void 0!==a&&a,o=void 0!==o?o:0,q=void 0!==q?q:2*Math.PI;var c=[],h=[],u=[],m=[],p=0,d=[],f=n/2,x=0;function g(n){var r,a,d,g=new l,_=new v,y=0,b=!0===n?e:t,w=!0===n?1:-1;for(a=p,r=1;r<=i;r++)h.push(0,f*w,0),u.push(0,w,0),m.push(.5,.5),p++;for(d=p,r=0;r<=i;r++){var M=r/i*q+o,S=Math.cos(M),T=Math.sin(M);_.x=b*T,_.y=f*w,_.z=b*S,h.push(_.x,_.y,_.z),u.push(0,w,0),g.x=.5*S+.5,g.y=.5*T*w+.5,m.push(g.x,g.y),p++}for(r=0;r<i;r++){var E=a+r,z=d+r;!0===n?c.push(z,z+1,E):c.push(z+1,z,E),y+=3}s.addGroup(x,y,!0===n?1:2),x+=y}!function(){var a,l,g=new v,_=new v,y=0,b=(t-e)/n;for(l=0;l<=r;l++){var w=[],M=l/r,S=M*(t-e)+e;for(a=0;a<=i;a++){var T=a/i,E=T*q+o,z=Math.sin(E),A=Math.cos(E);_.x=S*z,_.y=-M*n+f,_.z=S*A,h.push(_.x,_.y,_.z),g.set(z,b,A).normalize(),u.push(g.x,g.y,g.z),m.push(T,1-M),w.push(p++)}d.push(w)}for(a=0;a<i;a++)for(l=0;l<r;l++){var L=d[l][a],C=d[l+1][a],R=d[l+1][a+1],P=d[l][a+1];c.push(L,C,P),c.push(C,R,P),y+=6}s.addGroup(x,y,0),x+=y}(),!1===a&&(e>0&&g(!0),t>0&&g(!1)),this.setIndex(c),this.setAttribute("position",new Qe(h,3)),this.setAttribute("normal",new Qe(u,3)),this.setAttribute("uv",new Qe(m,2))}function co(e,t,n,i,r,a,o){lo.call(this,0,e,t,n,i,r,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:o}}function ho(e,t,n,i,r,a,o){so.call(this,0,e,t,n,i,r,a,o),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:o}}function uo(e,t,n,i){Nt.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},this.fromBufferGeometry(new mo(e,t,n,i)),this.mergeVertices()}function mo(e,t,n,i){ct.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},e=e||1,t=void 0!==t?Math.max(3,t):8,n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI;var r,a,o=[],q=[],s=[],c=[],h=new v,u=new l;for(q.push(0,0,0),s.push(0,0,1),c.push(.5,.5),a=0,r=3;a<=t;a++,r+=3){var m=n+a/t*i;h.x=e*Math.cos(m),h.y=e*Math.sin(m),q.push(h.x,h.y,h.z),s.push(0,0,1),u.x=(q[r]/e+1)/2,u.y=(q[r+1]/e+1)/2,c.push(u.x,u.y)}for(r=1;r<=t;r++)o.push(r,r+1,0);this.setIndex(o),this.setAttribute("position",new Qe(q,3)),this.setAttribute("normal",new Qe(s,3)),this.setAttribute("uv",new Qe(c,2))}Za.prototype=Object.create(Nt.prototype),Za.prototype.constructor=Za,Ka.prototype=Object.create(Xa.prototype),Ka.prototype.constructor=Ka,$a.prototype=Object.create(Nt.prototype),$a.prototype.constructor=$a,Qa.prototype=Object.create(ct.prototype),Qa.prototype.constructor=Qa,eo.prototype=Object.create(Nt.prototype),eo.prototype.constructor=eo,to.prototype=Object.create(ct.prototype),to.prototype.constructor=to,no.prototype=Object.create(Nt.prototype),no.prototype.constructor=no,io.prototype=Object.create(ct.prototype),io.prototype.constructor=io,ro.prototype=Object.create(Nt.prototype),ro.prototype.constructor=ro,ro.prototype.toJSON=function(){var e=Nt.prototype.toJSON.call(this);return oo(this.parameters.shapes,e)},ao.prototype=Object.create(ct.prototype),ao.prototype.constructor=ao,ao.prototype.toJSON=function(){var e=ct.prototype.toJSON.call(this);return oo(this.parameters.shapes,e)},qo.prototype=Object.create(ct.prototype),qo.prototype.constructor=qo,lo.prototype=Object.create(Nt.prototype),lo.prototype.constructor=lo,so.prototype=Object.create(ct.prototype),so.prototype.constructor=so,co.prototype=Object.create(lo.prototype),co.prototype.constructor=co,ho.prototype=Object.create(so.prototype),ho.prototype.constructor=ho,uo.prototype=Object.create(Nt.prototype),uo.prototype.constructor=uo,mo.prototype=Object.create(ct.prototype),mo.prototype.constructor=mo;var po=Object.freeze({__proto__:null,WireframeGeometry:na,ParametricGeometry:ia,ParametricBufferGeometry:ra,TetrahedronGeometry:qa,TetrahedronBufferGeometry:la,OctahedronGeometry:sa,OctahedronBufferGeometry:ca,IcosahedronGeometry:ha,IcosahedronBufferGeometry:ua,DodecahedronGeometry:ma,DodecahedronBufferGeometry:pa,PolyhedronGeometry:aa,PolyhedronBufferGeometry:oa,TubeGeometry:da,TubeBufferGeometry:fa,TorusKnotGeometry:xa,TorusKnotBufferGeometry:ga,TorusGeometry:va,TorusBufferGeometry:_a,TextGeometry:Za,TextBufferGeometry:Ka,SphereGeometry:$a,SphereBufferGeometry:Qa,RingGeometry:eo,RingBufferGeometry:to,PlaneGeometry:Qt,PlaneBufferGeometry:en,LatheGeometry:no,LatheBufferGeometry:io,ShapeGeometry:ro,ShapeBufferGeometry:ao,ExtrudeGeometry:Wa,ExtrudeBufferGeometry:Xa,EdgesGeometry:qo,ConeGeometry:co,ConeBufferGeometry:ho,CylinderGeometry:lo,CylinderBufferGeometry:so,CircleGeometry:uo,CircleBufferGeometry:mo,BoxGeometry:Dt,BoxBufferGeometry:It});function fo(e){je.call(this),this.type="ShadowMaterial",this.color=new De(0),this.transparent=!0,this.setValues(e)}function xo(e){Ft.call(this,e),this.type="RawShaderMaterial"}function go(e){je.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new De(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new l(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.vertexTangents=!1,this.setValues(e)}function vo(e){go.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new l(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,this.sheen=null,this.transparency=0,this.setValues(e)}function _o(e){je.call(this),this.type="MeshPhongMaterial",this.color=new De(16777215),this.specular=new De(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new l(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function yo(e){je.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new De(16777215),this.specular=new De(1118481),this.shininess=30,this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new l(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function bo(e){je.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new l(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function wo(e){je.call(this),this.type="MeshLambertMaterial",this.color=new De(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new De(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Mo(e){je.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new De(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new l(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function So(e){Or.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}fo.prototype=Object.create(je.prototype),fo.prototype.constructor=fo,fo.prototype.isShadowMaterial=!0,fo.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this},xo.prototype=Object.create(Ft.prototype),xo.prototype.constructor=xo,xo.prototype.isRawShaderMaterial=!0,go.prototype=Object.create(je.prototype),go.prototype.constructor=go,go.prototype.isMeshStandardMaterial=!0,go.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.vertexTangents=e.vertexTangents,this},vo.prototype=Object.create(go.prototype),vo.prototype.constructor=vo,vo.prototype.isMeshPhysicalMaterial=!0,vo.prototype.copy=function(e){return go.prototype.copy.call(this,e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.reflectivity=e.reflectivity,e.sheen?this.sheen=(this.sheen||new De).copy(e.sheen):this.sheen=null,this.transparency=e.transparency,this},_o.prototype=Object.create(je.prototype),_o.prototype.constructor=_o,_o.prototype.isMeshPhongMaterial=!0,_o.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},yo.prototype=Object.create(je.prototype),yo.prototype.constructor=yo,yo.prototype.isMeshToonMaterial=!0,yo.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},bo.prototype=Object.create(je.prototype),bo.prototype.constructor=bo,bo.prototype.isMeshNormalMaterial=!0,bo.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},wo.prototype=Object.create(je.prototype),wo.prototype.constructor=wo,wo.prototype.isMeshLambertMaterial=!0,wo.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Mo.prototype=Object.create(je.prototype),Mo.prototype.constructor=Mo,Mo.prototype.isMeshMatcapMaterial=!0,Mo.prototype.copy=function(e){return je.prototype.copy.call(this,e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},So.prototype=Object.create(Or.prototype),So.prototype.constructor=So,So.prototype.isLineDashedMaterial=!0,So.prototype.copy=function(e){return Or.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var To=Object.freeze({__proto__:null,ShadowMaterial:fo,SpriteMaterial:or,RawShaderMaterial:xo,ShaderMaterial:Ft,PointsMaterial:Vr,MeshPhysicalMaterial:vo,MeshStandardMaterial:go,MeshPhongMaterial:_o,MeshToonMaterial:yo,MeshNormalMaterial:bo,MeshLambertMaterial:wo,MeshDepthMaterial:Gi,MeshDistanceMaterial:Vi,MeshBasicMaterial:He,MeshMatcapMaterial:Mo,LineDashedMaterial:So,LineBasicMaterial:Or,Material:je}),Eo={arraySlice:function(e,t,n){return Eo.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==n?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){for(var t=e.length,n=new Array(t),i=0;i!==t;++i)n[i]=i;return n.sort((function(t,n){return e[t]-e[n]})),n},sortedArray:function(e,t,n){for(var i=e.length,r=new e.constructor(i),a=0,o=0;o!==i;++a)for(var q=n[a]*t,l=0;l!==t;++l)r[o++]=e[q+l];return r},flattenJSON:function(e,t,n,i){for(var r=1,a=e[0];void 0!==a&&void 0===a[i];)a=e[r++];if(void 0!==a){var o=a[i];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[i])&&(t.push(a.time),n.push.apply(n,o)),a=e[r++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[i])&&(t.push(a.time),o.toArray(n,n.length)),a=e[r++]}while(void 0!==a);else do{void 0!==(o=a[i])&&(t.push(a.time),n.push(o)),a=e[r++]}while(void 0!==a)}},subclip:function(e,t,n,i,r){r=r||30;var a=e.clone();a.name=t;for(var o=[],q=0;q<a.tracks.length;++q){for(var l=a.tracks[q],s=l.getValueSize(),c=[],h=[],u=0;u<l.times.length;++u){var m=l.times[u]*r;if(!(m<n||m>=i)){c.push(l.times[u]);for(var p=0;p<s;++p)h.push(l.values[u*s+p])}}0!==c.length&&(l.times=Eo.convertArray(c,l.times.constructor),l.values=Eo.convertArray(h,l.values.constructor),o.push(l))}a.tracks=o;var d=1/0;for(q=0;q<a.tracks.length;++q)d>a.tracks[q].times[0]&&(d=a.tracks[q].times[0]);for(q=0;q<a.tracks.length;++q)a.tracks[q].shift(-1*d);return a.resetDuration(),a}};function zo(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n}function Ao(e,t,n,i){zo.call(this,e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function Lo(e,t,n,i){zo.call(this,e,t,n,i)}function Co(e,t,n,i){zo.call(this,e,t,n,i)}function Ro(e,t,n,i){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Eo.convertArray(t,this.TimeBufferType),this.values=Eo.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}function Po(e,t,n){Ro.call(this,e,t,n)}function Oo(e,t,n,i){Ro.call(this,e,t,n,i)}function No(e,t,n,i){Ro.call(this,e,t,n,i)}function Do(e,t,n,i){zo.call(this,e,t,n,i)}function Io(e,t,n,i){Ro.call(this,e,t,n,i)}function ko(e,t,n,i){Ro.call(this,e,t,n,i)}function Uo(e,t,n,i){Ro.call(this,e,t,n,i)}function Bo(e,t,n){this.name=e,this.tracks=n,this.duration=void 0!==t?t:-1,this.uuid=q.generateUUID(),this.duration<0&&this.resetDuration()}function Fo(e){if(void 0===e.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var t=function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return No;case"vector":case"vector2":case"vector3":case"vector4":return Uo;case"color":return Oo;case"quaternion":return Io;case"bool":case"boolean":return Po;case"string":return ko}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}(e.type);if(void 0===e.times){var n=[],i=[];Eo.flattenJSON(e.keys,n,i,"value"),e.times=n,e.values=i}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}Object.assign(zo.prototype,{evaluate:function(e){var t=this.parameterPositions,n=this._cachedIndex,i=t[n],r=t[n-1];e:{t:{var a;n:{i:if(!(e<i)){for(var o=n+2;;){if(void 0===i){if(e<r)break i;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,r)}if(n===o)break;if(r=i,e<(i=t[++n]))break t}a=t.length;break n}if(e>=r)break e;var q=t[1];e<q&&(n=2,r=q);for(o=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(n===o)break;if(i=r,e>=(r=t[--n-1]))break t}a=n,n=0}for(;n<a;){var l=n+a>>>1;e<t[l]?a=l:n=l+1}if(i=t[n],void 0===(r=t[n-1]))return this._cachedIndex=0,this.beforeStart_(0,e,i);if(void 0===i)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,r,e)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,e,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=e*i,a=0;a!==i;++a)t[a]=n[r+a];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign(zo.prototype,{beforeStart_:zo.prototype.copySampleValue_,afterEnd_:zo.prototype.copySampleValue_}),Ao.prototype=Object.assign(Object.create(zo.prototype),{constructor:Ao,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(e,t,n){var i=this.parameterPositions,r=e-2,a=e+1,o=i[r],q=i[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:r=e,o=2*t-n;break;case 2402:o=t+i[r=i.length-2]-i[r+1];break;default:r=e,o=n}if(void 0===q)switch(this.getSettings_().endingEnd){case 2401:a=e,q=2*n-t;break;case 2402:a=1,q=n+i[1]-i[0];break;default:a=e-1,q=t}var l=.5*(n-t),s=this.valueSize;this._weightPrev=l/(t-o),this._weightNext=l/(q-n),this._offsetPrev=r*s,this._offsetNext=a*s},interpolate_:function(e,t,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,q=e*o,l=q-o,s=this._offsetPrev,c=this._offsetNext,h=this._weightPrev,u=this._weightNext,m=(n-t)/(i-t),p=m*m,d=p*m,f=-h*d+2*h*p-h*m,x=(1+h)*d+(-1.5-2*h)*p+(-.5+h)*m+1,g=(-1-u)*d+(1.5+u)*p+.5*m,v=u*d-u*p,_=0;_!==o;++_)r[_]=f*a[s+_]+x*a[l+_]+g*a[q+_]+v*a[c+_];return r}}),Lo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Lo,interpolate_:function(e,t,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,q=e*o,l=q-o,s=(n-t)/(i-t),c=1-s,h=0;h!==o;++h)r[h]=a[l+h]*c+a[q+h]*s;return r}}),Co.prototype=Object.assign(Object.create(zo.prototype),{constructor:Co,interpolate_:function(e){return this.copySampleValue_(e-1)}}),Object.assign(Ro,{toJSON:function(e){var t,n=e.constructor;if(void 0!==n.toJSON)t=n.toJSON(e);else{t={name:e.name,times:Eo.convertArray(e.times,Array),values:Eo.convertArray(e.values,Array)};var i=e.getInterpolation();i!==e.DefaultInterpolation&&(t.interpolation=i)}return t.type=e.ValueTypeName,t}}),Object.assign(Ro.prototype,{constructor:Ro,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(e){return new Co(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new Lo(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new Ao(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,n=0,i=t.length;n!==i;++n)t[n]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,n=0,i=t.length;n!==i;++n)t[n]*=e;return this},trim:function(e,t){for(var n=this.times,i=n.length,r=0,a=i-1;r!==i&&n[r]<e;)++r;for(;-1!==a&&n[a]>t;)--a;if(++a,0!==r||a!==i){r>=a&&(r=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=Eo.arraySlice(n,r,a),this.values=Eo.arraySlice(this.values,r*o,a*o)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);var n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);for(var a=null,o=0;o!==r;o++){var q=n[o];if("number"==typeof q&&isNaN(q)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,q),e=!1;break}if(null!==a&&a>q){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,q,a),e=!1;break}a=q}if(void 0!==i&&Eo.isTypedArray(i)){o=0;for(var l=i.length;o!==l;++o){var s=i[o];if(isNaN(s)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,s),e=!1;break}}}return e},optimize:function(){for(var e=Eo.arraySlice(this.times),t=Eo.arraySlice(this.values),n=this.getValueSize(),i=2302===this.getInterpolation(),r=1,a=e.length-1,o=1;o<a;++o){var q=!1,l=e[o];if(l!==e[o+1]&&(1!==o||l!==l[0]))if(i)q=!0;else for(var s=o*n,c=s-n,h=s+n,u=0;u!==n;++u){var m=t[s+u];if(m!==t[c+u]||m!==t[h+u]){q=!0;break}}if(q){if(o!==r){e[r]=e[o];var p=o*n,d=r*n;for(u=0;u!==n;++u)t[d+u]=t[p+u]}++r}}if(a>0){e[r]=e[a];for(p=a*n,d=r*n,u=0;u!==n;++u)t[d+u]=t[p+u];++r}return r!==e.length?(this.times=Eo.arraySlice(e,0,r),this.values=Eo.arraySlice(t,0,r*n)):(this.times=e,this.values=t),this},clone:function(){var e=Eo.arraySlice(this.times,0),t=Eo.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,e,t);return n.createInterpolant=this.createInterpolant,n}}),Po.prototype=Object.assign(Object.create(Ro.prototype),{constructor:Po,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Oo.prototype=Object.assign(Object.create(Ro.prototype),{constructor:Oo,ValueTypeName:"color"}),No.prototype=Object.assign(Object.create(Ro.prototype),{constructor:No,ValueTypeName:"number"}),Do.prototype=Object.assign(Object.create(zo.prototype),{constructor:Do,interpolate_:function(e,t,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,q=e*o,l=(n-t)/(i-t),s=q+o;q!==s;q+=4)f.slerpFlat(r,0,a,q-o,a,q,l);return r}}),Io.prototype=Object.assign(Object.create(Ro.prototype),{constructor:Io,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(e){return new Do(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),ko.prototype=Object.assign(Object.create(Ro.prototype),{constructor:ko,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Uo.prototype=Object.assign(Object.create(Ro.prototype),{constructor:Uo,ValueTypeName:"vector"}),Object.assign(Bo,{parse:function(e){for(var t=[],n=e.tracks,i=1/(e.fps||1),r=0,a=n.length;r!==a;++r)t.push(Fo(n[r]).scale(i));return new Bo(e.name,e.duration,t)},toJSON:function(e){for(var t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid},r=0,a=n.length;r!==a;++r)t.push(Ro.toJSON(n[r]));return i},CreateFromMorphTargetSequence:function(e,t,n,i){for(var r=t.length,a=[],o=0;o<r;o++){var q=[],l=[];q.push((o+r-1)%r,o,(o+1)%r),l.push(0,1,0);var s=Eo.getKeyframeOrder(q);q=Eo.sortedArray(q,1,s),l=Eo.sortedArray(l,1,s),i||0!==q[0]||(q.push(r),l.push(l[0])),a.push(new No(".morphTargetInfluences["+t[o].name+"]",q,l).scale(1/n))}return new Bo(e,-1,a)},findByName:function(e,t){var n=e;if(!Array.isArray(e)){var i=e;n=i.geometry&&i.geometry.animations||i.animations}for(var r=0;r<n.length;r++)if(n[r].name===t)return n[r];return null},CreateClipsFromMorphTargetSequences:function(e,t,n){for(var i={},r=/^([\w-]*?)([\d]+)$/,a=0,o=e.length;a<o;a++){var q=e[a],l=q.name.match(r);if(l&&l.length>1){var s=i[h=l[1]];s||(i[h]=s=[]),s.push(q)}}var c=[];for(var h in i)c.push(Bo.CreateFromMorphTargetSequence(h,i[h],t,n));return c},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(e,t,n,i,r){if(0!==n.length){var a=[],o=[];Eo.flattenJSON(n,a,o,i),0!==a.length&&r.push(new e(t,a,o))}},i=[],r=e.name||"default",a=e.length||-1,o=e.fps||30,q=e.hierarchy||[],l=0;l<q.length;l++){var s=q[l].keys;if(s&&0!==s.length)if(s[0].morphTargets){for(var c={},h=0;h<s.length;h++)if(s[h].morphTargets)for(var u=0;u<s[h].morphTargets.length;u++)c[s[h].morphTargets[u]]=-1;for(var m in c){var p=[],d=[];for(u=0;u!==s[h].morphTargets.length;++u){var f=s[h];p.push(f.time),d.push(f.morphTarget===m?1:0)}i.push(new No(".morphTargetInfluence["+m+"]",p,d))}a=c.length*(o||1)}else{var x=".bones["+t[l].name+"]";n(Uo,x+".position",s,"pos",i),n(Io,x+".quaternion",s,"rot",i),n(Uo,x+".scale",s,"scl",i)}}return 0===i.length?null:new Bo(r,a,i)}}),Object.assign(Bo.prototype,{resetDuration:function(){for(var e=0,t=0,n=this.tracks.length;t!==n;++t){var i=this.tracks[t];e=Math.max(e,i.times[i.times.length-1])}return this.duration=e,this},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},validate:function(){for(var e=!0,t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this},clone:function(){for(var e=[],t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new Bo(this.name,this.duration,e)}});var jo={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function Ho(e,t,n){var i=this,r=!1,a=0,o=0,q=void 0,l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){o++,!1===r&&void 0!==i.onStart&&i.onStart(e,a,o),r=!0},this.itemEnd=function(e){a++,void 0!==i.onProgress&&i.onProgress(e,a,o),a===o&&(r=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(e){void 0!==i.onError&&i.onError(e)},this.resolveURL=function(e){return q?q(e):e},this.setURLModifier=function(e){return q=e,this},this.addHandler=function(e,t){return l.push(e,t),this},this.removeHandler=function(e){var t=l.indexOf(e);return-1!==t&&l.splice(t,2),this},this.getHandler=function(e){for(var t=0,n=l.length;t<n;t+=2){var i=l[t],r=l[t+1];if(i.global&&(i.lastIndex=0),i.test(e))return r}return null}}var Go=new Ho;function Vo(e){this.manager=void 0!==e?e:Go,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(Vo.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this}});var Wo={};function Xo(e){Vo.call(this,e)}function Yo(e){Vo.call(this,e)}function Jo(e){Vo.call(this,e)}function Zo(e){Vo.call(this,e)}function Ko(e){Vo.call(this,e)}function $o(e){Vo.call(this,e)}function Qo(e){Vo.call(this,e)}function eq(){this.type="Curve",this.arcLengthDivisions=200}function tq(e,t,n,i,r,a,o,q){eq.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=n||1,this.yRadius=i||1,this.aStartAngle=r||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=q||0}function nq(e,t,n,i,r,a){tq.call(this,e,t,n,n,i,r,a),this.type="ArcCurve"}function iq(){var e=0,t=0,n=0,i=0;function r(r,a,o,q){e=r,t=o,n=-3*r+3*a-2*o-q,i=2*r-2*a+o+q}return{initCatmullRom:function(e,t,n,i,a){r(t,n,a*(n-e),a*(i-t))},initNonuniformCatmullRom:function(e,t,n,i,a,o,q){var l=(t-e)/a-(n-e)/(a+o)+(n-t)/o,s=(n-t)/o-(i-t)/(o+q)+(i-n)/q;r(t,n,l*=o,s*=o)},calc:function(r){var a=r*r;return e+t*r+n*a+i*(a*r)}}}Xo.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Xo,load:function(e,t,n,i){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var r=this,a=jo.get(e);if(void 0!==a)return r.manager.itemStart(e),setTimeout((function(){t&&t(a),r.manager.itemEnd(e)}),0),a;if(void 0===Wo[e]){var o=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var q=o[1],l=!!o[2],s=o[3];s=decodeURIComponent(s),l&&(s=atob(s));try{var c,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var u=new Uint8Array(s.length),m=0;m<s.length;m++)u[m]=s.charCodeAt(m);c="blob"===h?new Blob([u.buffer],{type:q}):u.buffer;break;case"document":var p=new DOMParser;c=p.parseFromString(s,q);break;case"json":c=JSON.parse(s);break;default:c=s}setTimeout((function(){t&&t(c),r.manager.itemEnd(e)}),0)}catch(t){setTimeout((function(){i&&i(t),r.manager.itemError(e),r.manager.itemEnd(e)}),0)}}else{Wo[e]=[],Wo[e].push({onLoad:t,onProgress:n,onError:i});var d=new XMLHttpRequest;for(var f in d.open("GET",e,!0),d.addEventListener("load",(function(t){var n=this.response,i=Wo[e];if(delete Wo[e],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),jo.add(e,n);for(var a=0,o=i.length;a<o;a++){(q=i[a]).onLoad&&q.onLoad(n)}r.manager.itemEnd(e)}else{for(a=0,o=i.length;a<o;a++){var q;(q=i[a]).onError&&q.onError(t)}r.manager.itemError(e),r.manager.itemEnd(e)}}),!1),d.addEventListener("progress",(function(t){for(var n=Wo[e],i=0,r=n.length;i<r;i++){var a=n[i];a.onProgress&&a.onProgress(t)}}),!1),d.addEventListener("error",(function(t){var n=Wo[e];delete Wo[e];for(var i=0,a=n.length;i<a;i++){var o=n[i];o.onError&&o.onError(t)}r.manager.itemError(e),r.manager.itemEnd(e)}),!1),d.addEventListener("abort",(function(t){var n=Wo[e];delete Wo[e];for(var i=0,a=n.length;i<a;i++){var o=n[i];o.onError&&o.onError(t)}r.manager.itemError(e),r.manager.itemEnd(e)}),!1),void 0!==this.responseType&&(d.responseType=this.responseType),void 0!==this.withCredentials&&(d.withCredentials=this.withCredentials),d.overrideMimeType&&d.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)d.setRequestHeader(f,this.requestHeader[f]);d.send(null)}return r.manager.itemStart(e),d}Wo[e].push({onLoad:t,onProgress:n,onError:i})},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),Yo.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Yo,load:function(e,t,n,i){var r=this,a=new Xo(r.manager);a.setPath(r.path),a.load(e,(function(e){t(r.parse(JSON.parse(e)))}),n,i)},parse:function(e){for(var t=[],n=0;n<e.length;n++){var i=Bo.parse(e[n]);t.push(i)}return t}}),Jo.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Jo,load:function(e,t,n,i){var r=this,a=[],o=new Qr;o.image=a;var q=new Xo(this.manager);function l(l){q.load(e[l],(function(e){var n=r.parse(e,!0);a[l]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(s+=1)&&(1===n.mipmapCount&&(o.minFilter=1006),o.format=n.format,o.needsUpdate=!0,t&&t(o))}),n,i)}if(q.setPath(this.path),q.setResponseType("arraybuffer"),Array.isArray(e))for(var s=0,c=0,h=e.length;c<h;++c)l(c);else q.load(e,(function(e){var n=r.parse(e,!0);if(n.isCubemap)for(var i=n.mipmaps.length/n.mipmapCount,q=0;q<i;q++){a[q]={mipmaps:[]};for(var l=0;l<n.mipmapCount;l++)a[q].mipmaps.push(n.mipmaps[q*n.mipmapCount+l]),a[q].format=n.format,a[q].width=n.width,a[q].height=n.height}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;1===n.mipmapCount&&(o.minFilter=1006),o.format=n.format,o.needsUpdate=!0,t&&t(o)}),n,i);return o}}),Zo.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Zo,load:function(e,t,n,i){var r=this,a=new Wt,o=new Xo(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(e,(function(e){var n=r.parse(e);n&&(void 0!==n.image?a.image=n.image:void 0!==n.data&&(a.image.width=n.width,a.image.height=n.height,a.image.data=n.data),a.wrapS=void 0!==n.wrapS?n.wrapS:1001,a.wrapT=void 0!==n.wrapT?n.wrapT:1001,a.magFilter=void 0!==n.magFilter?n.magFilter:1006,a.minFilter=void 0!==n.minFilter?n.minFilter:1006,a.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(a.format=n.format),void 0!==n.type&&(a.type=n.type),void 0!==n.mipmaps&&(a.mipmaps=n.mipmaps,a.minFilter=1008),1===n.mipmapCount&&(a.minFilter=1006),a.needsUpdate=!0,t&&t(a,n))}),n,i),a}}),Ko.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Ko,load:function(e,t,n,i){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var r=this,a=jo.get(e);if(void 0!==a)return r.manager.itemStart(e),setTimeout((function(){t&&t(a),r.manager.itemEnd(e)}),0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function q(){o.removeEventListener("load",q,!1),o.removeEventListener("error",l,!1),jo.add(e,this),t&&t(this),r.manager.itemEnd(e)}function l(t){o.removeEventListener("load",q,!1),o.removeEventListener("error",l,!1),i&&i(t),r.manager.itemError(e),r.manager.itemEnd(e)}return o.addEventListener("load",q,!1),o.addEventListener("error",l,!1),"data:"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(e),o.src=e,o}}),$o.prototype=Object.assign(Object.create(Vo.prototype),{constructor:$o,load:function(e,t,n,i){var r=new dn,a=new Ko(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function q(n){a.load(e[n],(function(e){r.images[n]=e,6===++o&&(r.needsUpdate=!0,t&&t(r))}),void 0,i)}for(var l=0;l<e.length;++l)q(l);return r}}),Qo.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Qo,load:function(e,t,n,i){var r=new u,a=new Ko(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,(function(n){r.image=n;var i=e.search(/\.jpe?g($|\?)/i)>0||0===e.search(/^data\:image\/jpeg/);r.format=i?1022:1023,r.needsUpdate=!0,void 0!==t&&t(r)}),n,i),r}}),Object.assign(eq.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){var n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,n,i=[],r=this.getPoint(0),a=0;for(i.push(0),n=1;n<=e;n++)a+=(t=this.getPoint(n/e)).distanceTo(r),i.push(a),r=t;return this.cacheArcLengths=i,i},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var n,i=this.getLengths(),r=0,a=i.length;n=t||e*i[a-1];for(var o,q=0,l=a-1;q<=l;)if((o=i[r=Math.floor(q+(l-q)/2)]-n)<0)q=r+1;else{if(!(o>0)){l=r;break}l=r-1}if(i[r=l]===n)return r/(a-1);var s=i[r];return(r+(n-s)/(i[r+1]-s))/(a-1)},getTangent:function(e){var t=e-1e-4,n=e+1e-4;t<0&&(t=0),n>1&&(n=1);var i=this.getPoint(t);return this.getPoint(n).clone().sub(i).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var n,i,r,a=new v,o=[],l=[],s=[],c=new v,h=new E;for(n=0;n<=e;n++)i=n/e,o[n]=this.getTangentAt(i),o[n].normalize();l[0]=new v,s[0]=new v;var u=Number.MAX_VALUE,m=Math.abs(o[0].x),p=Math.abs(o[0].y),d=Math.abs(o[0].z);for(m<=u&&(u=m,a.set(1,0,0)),p<=u&&(u=p,a.set(0,1,0)),d<=u&&a.set(0,0,1),c.crossVectors(o[0],a).normalize(),l[0].crossVectors(o[0],c),s[0].crossVectors(o[0],l[0]),n=1;n<=e;n++)l[n]=l[n-1].clone(),s[n]=s[n-1].clone(),c.crossVectors(o[n-1],o[n]),c.length()>Number.EPSILON&&(c.normalize(),r=Math.acos(q.clamp(o[n-1].dot(o[n]),-1,1)),l[n].applyMatrix4(h.makeRotationAxis(c,r))),s[n].crossVectors(o[n],l[n]);if(!0===t)for(r=Math.acos(q.clamp(l[0].dot(l[e]),-1,1)),r/=e,o[0].dot(c.crossVectors(l[0],l[e]))>0&&(r=-r),n=1;n<=e;n++)l[n].applyMatrix4(h.makeRotationAxis(o[n],r*n)),s[n].crossVectors(o[n],l[n]);return{tangents:o,normals:l,binormals:s}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){var e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),tq.prototype=Object.create(eq.prototype),tq.prototype.constructor=tq,tq.prototype.isEllipseCurve=!0,tq.prototype.getPoint=function(e,t){for(var n=t||new l,i=2*Math.PI,r=this.aEndAngle-this.aStartAngle,a=Math.abs(r)<Number.EPSILON;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=a?0:i),!0!==this.aClockwise||a||(r===i?r=-i:r-=i);var o=this.aStartAngle+e*r,q=this.aX+this.xRadius*Math.cos(o),s=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var c=Math.cos(this.aRotation),h=Math.sin(this.aRotation),u=q-this.aX,m=s-this.aY;q=u*c-m*h+this.aX,s=u*h+m*c+this.aY}return n.set(q,s)},tq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},tq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e},tq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},nq.prototype=Object.create(tq.prototype),nq.prototype.constructor=nq,nq.prototype.isArcCurve=!0;var rq=new v,aq=new iq,oq=new iq,qq=new iq;function lq(e,t,n,i){eq.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=n||"centripetal",this.tension=i||.5}function sq(e,t,n,i,r){var a=.5*(i-t),o=.5*(r-n),q=e*e;return(2*n-2*i+a+o)*(e*q)+(-3*n+3*i-2*a-o)*q+a*e+n}function cq(e,t,n,i){return function(e,t){var n=1-e;return n*n*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,n)+function(e,t){return e*e*t}(e,i)}function hq(e,t,n,i,r){return function(e,t){var n=1-e;return n*n*n*t}(e,t)+function(e,t){var n=1-e;return 3*n*n*e*t}(e,n)+function(e,t){return 3*(1-e)*e*e*t}(e,i)+function(e,t){return e*e*e*t}(e,r)}function uq(e,t,n,i){eq.call(this),this.type="CubicBezierCurve",this.v0=e||new l,this.v1=t||new l,this.v2=n||new l,this.v3=i||new l}function mq(e,t,n,i){eq.call(this),this.type="CubicBezierCurve3",this.v0=e||new v,this.v1=t||new v,this.v2=n||new v,this.v3=i||new v}function pq(e,t){eq.call(this),this.type="LineCurve",this.v1=e||new l,this.v2=t||new l}function dq(e,t){eq.call(this),this.type="LineCurve3",this.v1=e||new v,this.v2=t||new v}function fq(e,t,n){eq.call(this),this.type="QuadraticBezierCurve",this.v0=e||new l,this.v1=t||new l,this.v2=n||new l}function xq(e,t,n){eq.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new v,this.v1=t||new v,this.v2=n||new v}function gq(e){eq.call(this),this.type="SplineCurve",this.points=e||[]}lq.prototype=Object.create(eq.prototype),lq.prototype.constructor=lq,lq.prototype.isCatmullRomCurve3=!0,lq.prototype.getPoint=function(e,t){var n,i,r,a,o=t||new v,q=this.points,l=q.length,s=(l-(this.closed?0:1))*e,c=Math.floor(s),h=s-c;if(this.closed?c+=c>0?0:(Math.floor(Math.abs(c)/l)+1)*l:0===h&&c===l-1&&(c=l-2,h=1),this.closed||c>0?n=q[(c-1)%l]:(rq.subVectors(q[0],q[1]).add(q[0]),n=rq),i=q[c%l],r=q[(c+1)%l],this.closed||c+2<l?a=q[(c+2)%l]:(rq.subVectors(q[l-1],q[l-2]).add(q[l-1]),a=rq),"centripetal"===this.curveType||"chordal"===this.curveType){var u="chordal"===this.curveType?.5:.25,m=Math.pow(n.distanceToSquared(i),u),p=Math.pow(i.distanceToSquared(r),u),d=Math.pow(r.distanceToSquared(a),u);p<1e-4&&(p=1),m<1e-4&&(m=p),d<1e-4&&(d=p),aq.initNonuniformCatmullRom(n.x,i.x,r.x,a.x,m,p,d),oq.initNonuniformCatmullRom(n.y,i.y,r.y,a.y,m,p,d),qq.initNonuniformCatmullRom(n.z,i.z,r.z,a.z,m,p,d)}else"catmullrom"===this.curveType&&(aq.initCatmullRom(n.x,i.x,r.x,a.x,this.tension),oq.initCatmullRom(n.y,i.y,r.y,a.y,this.tension),qq.initCatmullRom(n.z,i.z,r.z,a.z,this.tension));return o.set(aq.calc(h),oq.calc(h),qq.calc(h)),o},lq.prototype.copy=function(e){eq.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},lq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);e.points=[];for(var t=0,n=this.points.length;t<n;t++){var i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e},lq.prototype.fromJSON=function(e){eq.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push((new v).fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},uq.prototype=Object.create(eq.prototype),uq.prototype.constructor=uq,uq.prototype.isCubicBezierCurve=!0,uq.prototype.getPoint=function(e,t){var n=t||new l,i=this.v0,r=this.v1,a=this.v2,o=this.v3;return n.set(hq(e,i.x,r.x,a.x,o.x),hq(e,i.y,r.y,a.y,o.y)),n},uq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},uq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},uq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},mq.prototype=Object.create(eq.prototype),mq.prototype.constructor=mq,mq.prototype.isCubicBezierCurve3=!0,mq.prototype.getPoint=function(e,t){var n=t||new v,i=this.v0,r=this.v1,a=this.v2,o=this.v3;return n.set(hq(e,i.x,r.x,a.x,o.x),hq(e,i.y,r.y,a.y,o.y),hq(e,i.z,r.z,a.z,o.z)),n},mq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},mq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},mq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},pq.prototype=Object.create(eq.prototype),pq.prototype.constructor=pq,pq.prototype.isLineCurve=!0,pq.prototype.getPoint=function(e,t){var n=t||new l;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},pq.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},pq.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},pq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},pq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},pq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},dq.prototype=Object.create(eq.prototype),dq.prototype.constructor=dq,dq.prototype.isLineCurve3=!0,dq.prototype.getPoint=function(e,t){var n=t||new v;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},dq.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},dq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},dq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},dq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},fq.prototype=Object.create(eq.prototype),fq.prototype.constructor=fq,fq.prototype.isQuadraticBezierCurve=!0,fq.prototype.getPoint=function(e,t){var n=t||new l,i=this.v0,r=this.v1,a=this.v2;return n.set(cq(e,i.x,r.x,a.x),cq(e,i.y,r.y,a.y)),n},fq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},fq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},fq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},xq.prototype=Object.create(eq.prototype),xq.prototype.constructor=xq,xq.prototype.isQuadraticBezierCurve3=!0,xq.prototype.getPoint=function(e,t){var n=t||new v,i=this.v0,r=this.v1,a=this.v2;return n.set(cq(e,i.x,r.x,a.x),cq(e,i.y,r.y,a.y),cq(e,i.z,r.z,a.z)),n},xq.prototype.copy=function(e){return eq.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},xq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},xq.prototype.fromJSON=function(e){return eq.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},gq.prototype=Object.create(eq.prototype),gq.prototype.constructor=gq,gq.prototype.isSplineCurve=!0,gq.prototype.getPoint=function(e,t){var n=t||new l,i=this.points,r=(i.length-1)*e,a=Math.floor(r),o=r-a,q=i[0===a?a:a-1],s=i[a],c=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return n.set(sq(o,q.x,s.x,c.x,h.x),sq(o,q.y,s.y,c.y,h.y)),n},gq.prototype.copy=function(e){eq.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push(i.clone())}return this},gq.prototype.toJSON=function(){var e=eq.prototype.toJSON.call(this);e.points=[];for(var t=0,n=this.points.length;t<n;t++){var i=this.points[t];e.points.push(i.toArray())}return e},gq.prototype.fromJSON=function(e){eq.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var i=e.points[t];this.points.push((new l).fromArray(i))}return this};var vq=Object.freeze({__proto__:null,ArcCurve:nq,CatmullRomCurve3:lq,CubicBezierCurve:uq,CubicBezierCurve3:mq,EllipseCurve:tq,LineCurve:pq,LineCurve3:dq,QuadraticBezierCurve:fq,QuadraticBezierCurve3:xq,SplineCurve:gq});function _q(){eq.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function yq(e){_q.call(this),this.type="Path",this.currentPoint=new l,e&&this.setFromPoints(e)}function bq(e){yq.call(this,e),this.uuid=q.generateUUID(),this.type="Shape",this.holes=[]}function wq(e,t){V.call(this),this.type="Light",this.color=new De(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Mq(e,t,n){wq.call(this,e,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(V.DefaultUp),this.updateMatrix(),this.groundColor=new De(t)}function Sq(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new l(512,512),this.map=null,this.mapPass=null,this.matrix=new E,this._frustum=new Jt,this._frameExtents=new l(1,1),this._viewportCount=1,this._viewports=[new m(0,0,1,1)]}function Tq(){Sq.call(this,new Ht(50,1,.5,500))}function Eq(e,t,n,i,r,a){wq.call(this,e,t),this.type="SpotLight",this.position.copy(V.DefaultUp),this.updateMatrix(),this.target=new V,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==i?i:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==a?a:1,this.shadow=new Tq}function zq(){Sq.call(this,new Ht(90,1,.5,500)),this._frameExtents=new l(4,2),this._viewportCount=6,this._viewports=[new m(2,1,1,1),new m(0,1,1,1),new m(3,1,1,1),new m(1,1,1,1),new m(3,0,1,1),new m(1,0,1,1)],this._cubeDirections=[new v(1,0,0),new v(-1,0,0),new v(0,0,1),new v(0,0,-1),new v(0,1,0),new v(0,-1,0)],this._cubeUps=[new v(0,1,0),new v(0,1,0),new v(0,1,0),new v(0,1,0),new v(0,0,1),new v(0,0,-1)]}function Aq(e,t,n,i){wq.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==i?i:1,this.shadow=new zq}function Lq(e,t,n,i,r,a){jt.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==e?e:-1,this.right=void 0!==t?t:1,this.top=void 0!==n?n:1,this.bottom=void 0!==i?i:-1,this.near=void 0!==r?r:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function Cq(){Sq.call(this,new Lq(-5,5,5,-5,.5,500))}function Rq(e,t){wq.call(this,e,t),this.type="DirectionalLight",this.position.copy(V.DefaultUp),this.updateMatrix(),this.target=new V,this.shadow=new Cq}function Pq(e,t){wq.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0}function Oq(e,t,n,i){wq.call(this,e,t),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==i?i:10}function Nq(e){Vo.call(this,e),this.textures={}}_q.prototype=Object.assign(Object.create(eq.prototype),{constructor:_q,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new pq(t,e))},getPoint:function(e){for(var t=e*this.getLength(),n=this.getCurveLengths(),i=0;i<n.length;){if(n[i]>=t){var r=n[i]-t,a=this.curves[i],o=a.getLength(),q=0===o?0:1-r/o;return a.getPointAt(q)}i++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,n=[],i=0,r=this.curves;i<r.length;i++)for(var a=r[i],o=a&&a.isEllipseCurve?2*e:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?e*a.points.length:e,q=a.getPoints(o),l=0;l<q.length;l++){var s=q[l];t&&t.equals(s)||(n.push(s),t=s)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(e){eq.prototype.copy.call(this,e),this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){var e=eq.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(var t=0,n=this.curves.length;t<n;t++){var i=this.curves[t];e.curves.push(i.toJSON())}return e},fromJSON:function(e){eq.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var i=e.curves[t];this.curves.push((new vq[i.type]).fromJSON(i))}return this}}),yq.prototype=Object.assign(Object.create(_q.prototype),{constructor:yq,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this},moveTo:function(e,t){return this.currentPoint.set(e,t),this},lineTo:function(e,t){var n=new pq(this.currentPoint.clone(),new l(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this},quadraticCurveTo:function(e,t,n,i){var r=new fq(this.currentPoint.clone(),new l(e,t),new l(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this},bezierCurveTo:function(e,t,n,i,r,a){var o=new uq(this.currentPoint.clone(),new l(e,t),new l(n,i),new l(r,a));return this.curves.push(o),this.currentPoint.set(r,a),this},splineThru:function(e){var t=new gq([this.currentPoint.clone()].concat(e));return this.curves.push(t),this.currentPoint.copy(e[e.length-1]),this},arc:function(e,t,n,i,r,a){var o=this.currentPoint.x,q=this.currentPoint.y;return this.absarc(e+o,t+q,n,i,r,a),this},absarc:function(e,t,n,i,r,a){return this.absellipse(e,t,n,n,i,r,a),this},ellipse:function(e,t,n,i,r,a,o,q){var l=this.currentPoint.x,s=this.currentPoint.y;return this.absellipse(e+l,t+s,n,i,r,a,o,q),this},absellipse:function(e,t,n,i,r,a,o,q){var l=new tq(e,t,n,i,r,a,o,q);if(this.curves.length>0){var s=l.getPoint(0);s.equals(this.currentPoint)||this.lineTo(s.x,s.y)}this.curves.push(l);var c=l.getPoint(1);return this.currentPoint.copy(c),this},copy:function(e){return _q.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){var e=_q.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return _q.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}}),bq.prototype=Object.assign(Object.create(yq.prototype),{constructor:bq,getPointsHoles:function(e){for(var t=[],n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){yq.prototype.copy.call(this,e),this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var i=e.holes[t];this.holes.push(i.clone())}return this},toJSON:function(){var e=yq.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(var t=0,n=this.holes.length;t<n;t++){var i=this.holes[t];e.holes.push(i.toJSON())}return e},fromJSON:function(e){yq.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var i=e.holes[t];this.holes.push((new yq).fromJSON(i))}return this}}),wq.prototype=Object.assign(Object.create(V.prototype),{constructor:wq,isLight:!0,copy:function(e){return V.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=V.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Mq.prototype=Object.assign(Object.create(wq.prototype),{constructor:Mq,isHemisphereLight:!0,copy:function(e){return wq.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(Sq.prototype,{_projScreenMatrix:new E,_lightPositionWorld:new v,_lookTarget:new v,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(e){var t=this.camera,n=this.matrix,i=this._projScreenMatrix,r=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(e.matrixWorld),t.position.copy(a),r.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(r),t.updateMatrixWorld(),i.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(i),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)},getViewport:function(e){return this._viewports[e]},getFrameExtents:function(){return this._frameExtents},copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Tq.prototype=Object.assign(Object.create(Sq.prototype),{constructor:Tq,isSpotLightShadow:!0,updateMatrices:function(e){var t=this.camera,n=2*q.RAD2DEG*e.angle,i=this.mapSize.width/this.mapSize.height,r=e.distance||t.far;n===t.fov&&i===t.aspect&&r===t.far||(t.fov=n,t.aspect=i,t.far=r,t.updateProjectionMatrix()),Sq.prototype.updateMatrices.call(this,e)}}),Eq.prototype=Object.assign(Object.create(wq.prototype),{constructor:Eq,isSpotLight:!0,copy:function(e){return wq.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),zq.prototype=Object.assign(Object.create(Sq.prototype),{constructor:zq,isPointLightShadow:!0,updateMatrices:function(e,t){void 0===t&&(t=0);var n=this.camera,i=this.matrix,r=this._lightPositionWorld,a=this._lookTarget,o=this._projScreenMatrix;r.setFromMatrixPosition(e.matrixWorld),n.position.copy(r),a.copy(n.position),a.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(a),n.updateMatrixWorld(),i.makeTranslation(-r.x,-r.y,-r.z),o.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(o)}}),Aq.prototype=Object.assign(Object.create(wq.prototype),{constructor:Aq,isPointLight:!0,copy:function(e){return wq.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),Lq.prototype=Object.assign(Object.create(jt.prototype),{constructor:Lq,isOrthographicCamera:!0,copy:function(e,t){return jt.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2,r=n-e,a=n+e,o=i+t,q=i-t;if(null!==this.view&&this.view.enabled){var l=(this.right-this.left)/this.view.fullWidth/this.zoom,s=(this.top-this.bottom)/this.view.fullHeight/this.zoom;a=(r+=l*this.view.offsetX)+l*this.view.width,q=(o-=s*this.view.offsetY)-s*this.view.height}this.projectionMatrix.makeOrthographic(r,a,o,q,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=V.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),Cq.prototype=Object.assign(Object.create(Sq.prototype),{constructor:Cq,isDirectionalLightShadow:!0,updateMatrices:function(e){Sq.prototype.updateMatrices.call(this,e)}}),Rq.prototype=Object.assign(Object.create(wq.prototype),{constructor:Rq,isDirectionalLight:!0,copy:function(e){return wq.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Pq.prototype=Object.assign(Object.create(wq.prototype),{constructor:Pq,isAmbientLight:!0}),Oq.prototype=Object.assign(Object.create(wq.prototype),{constructor:Oq,isRectAreaLight:!0,copy:function(e){return wq.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=wq.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}}),Nq.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Nq,load:function(e,t,n,i){var r=this,a=new Xo(r.manager);a.setPath(r.path),a.load(e,(function(e){t(r.parse(JSON.parse(e)))}),n,i)},parse:function(e){var t=this.textures;function n(e){return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]}var i=new To[e.type];if(void 0!==e.uuid&&(i.uuid=e.uuid),void 0!==e.name&&(i.name=e.name),void 0!==e.color&&i.color.setHex(e.color),void 0!==e.roughness&&(i.roughness=e.roughness),void 0!==e.metalness&&(i.metalness=e.metalness),void 0!==e.sheen&&(i.sheen=(new De).setHex(e.sheen)),void 0!==e.emissive&&i.emissive.setHex(e.emissive),void 0!==e.specular&&i.specular.setHex(e.specular),void 0!==e.shininess&&(i.shininess=e.shininess),void 0!==e.clearcoat&&(i.clearcoat=e.clearcoat),void 0!==e.clearcoatRoughness&&(i.clearcoatRoughness=e.clearcoatRoughness),void 0!==e.fog&&(i.fog=e.fog),void 0!==e.flatShading&&(i.flatShading=e.flatShading),void 0!==e.blending&&(i.blending=e.blending),void 0!==e.combine&&(i.combine=e.combine),void 0!==e.side&&(i.side=e.side),void 0!==e.opacity&&(i.opacity=e.opacity),void 0!==e.transparent&&(i.transparent=e.transparent),void 0!==e.alphaTest&&(i.alphaTest=e.alphaTest),void 0!==e.depthTest&&(i.depthTest=e.depthTest),void 0!==e.depthWrite&&(i.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(i.colorWrite=e.colorWrite),void 0!==e.stencilWrite&&(i.stencilWrite=e.stencilWrite),void 0!==e.stencilWriteMask&&(i.stencilWriteMask=e.stencilWriteMask),void 0!==e.stencilFunc&&(i.stencilFunc=e.stencilFunc),void 0!==e.stencilRef&&(i.stencilRef=e.stencilRef),void 0!==e.stencilFuncMask&&(i.stencilFuncMask=e.stencilFuncMask),void 0!==e.stencilFail&&(i.stencilFail=e.stencilFail),void 0!==e.stencilZFail&&(i.stencilZFail=e.stencilZFail),void 0!==e.stencilZPass&&(i.stencilZPass=e.stencilZPass),void 0!==e.wireframe&&(i.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(i.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(i.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(i.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(i.rotation=e.rotation),1!==e.linewidth&&(i.linewidth=e.linewidth),void 0!==e.dashSize&&(i.dashSize=e.dashSize),void 0!==e.gapSize&&(i.gapSize=e.gapSize),void 0!==e.scale&&(i.scale=e.scale),void 0!==e.polygonOffset&&(i.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(i.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(i.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(i.skinning=e.skinning),void 0!==e.morphTargets&&(i.morphTargets=e.morphTargets),void 0!==e.morphNormals&&(i.morphNormals=e.morphNormals),void 0!==e.dithering&&(i.dithering=e.dithering),void 0!==e.vertexTangents&&(i.vertexTangents=e.vertexTangents),void 0!==e.visible&&(i.visible=e.visible),void 0!==e.toneMapped&&(i.toneMapped=e.toneMapped),void 0!==e.userData&&(i.userData=e.userData),void 0!==e.vertexColors&&("number"==typeof e.vertexColors?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),void 0!==e.uniforms)for(var r in e.uniforms){var a=e.uniforms[r];switch(i.uniforms[r]={},a.type){case"t":i.uniforms[r].value=n(a.value);break;case"c":i.uniforms[r].value=(new De).setHex(a.value);break;case"v2":i.uniforms[r].value=(new l).fromArray(a.value);break;case"v3":i.uniforms[r].value=(new v).fromArray(a.value);break;case"v4":i.uniforms[r].value=(new m).fromArray(a.value);break;case"m3":i.uniforms[r].value=(new s).fromArray(a.value);case"m4":i.uniforms[r].value=(new E).fromArray(a.value);break;default:i.uniforms[r].value=a.value}}if(void 0!==e.defines&&(i.defines=e.defines),void 0!==e.vertexShader&&(i.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(i.fragmentShader=e.fragmentShader),void 0!==e.extensions)for(var o in e.extensions)i.extensions[o]=e.extensions[o];if(void 0!==e.shading&&(i.flatShading=1===e.shading),void 0!==e.size&&(i.size=e.size),void 0!==e.sizeAttenuation&&(i.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(i.map=n(e.map)),void 0!==e.matcap&&(i.matcap=n(e.matcap)),void 0!==e.alphaMap&&(i.alphaMap=n(e.alphaMap)),void 0!==e.bumpMap&&(i.bumpMap=n(e.bumpMap)),void 0!==e.bumpScale&&(i.bumpScale=e.bumpScale),void 0!==e.normalMap&&(i.normalMap=n(e.normalMap)),void 0!==e.normalMapType&&(i.normalMapType=e.normalMapType),void 0!==e.normalScale){var q=e.normalScale;!1===Array.isArray(q)&&(q=[q,q]),i.normalScale=(new l).fromArray(q)}return void 0!==e.displacementMap&&(i.displacementMap=n(e.displacementMap)),void 0!==e.displacementScale&&(i.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(i.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(i.roughnessMap=n(e.roughnessMap)),void 0!==e.metalnessMap&&(i.metalnessMap=n(e.metalnessMap)),void 0!==e.emissiveMap&&(i.emissiveMap=n(e.emissiveMap)),void 0!==e.emissiveIntensity&&(i.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(i.specularMap=n(e.specularMap)),void 0!==e.envMap&&(i.envMap=n(e.envMap)),void 0!==e.envMapIntensity&&(i.envMapIntensity=e.envMapIntensity),void 0!==e.reflectivity&&(i.reflectivity=e.reflectivity),void 0!==e.refractionRatio&&(i.refractionRatio=e.refractionRatio),void 0!==e.lightMap&&(i.lightMap=n(e.lightMap)),void 0!==e.lightMapIntensity&&(i.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(i.aoMap=n(e.aoMap)),void 0!==e.aoMapIntensity&&(i.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(i.gradientMap=n(e.gradientMap)),void 0!==e.clearcoatMap&&(i.clearcoatMap=n(e.clearcoatMap)),void 0!==e.clearcoatRoughnessMap&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),void 0!==e.clearcoatNormalMap&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),void 0!==e.clearcoatNormalScale&&(i.clearcoatNormalScale=(new l).fromArray(e.clearcoatNormalScale)),i},setTextures:function(e){return this.textures=e,this}});var Dq=function(e){var t=e.lastIndexOf("/");return-1===t?"./":e.substr(0,t+1)};function Iq(){ct.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function kq(e,t,n,i){"number"==typeof n&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Ve.call(this,e,t,n),this.meshPerAttribute=i||1}function Uq(e){Vo.call(this,e)}Iq.prototype=Object.assign(Object.create(ct.prototype),{constructor:Iq,isInstancedBufferGeometry:!0,copy:function(e){return ct.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e=ct.prototype.toJSON.call(this);return e.maxInstancedCount=this.maxInstancedCount,e.isInstancedBufferGeometry=!0,e}}),kq.prototype=Object.assign(Object.create(Ve.prototype),{constructor:kq,isInstancedBufferAttribute:!0,copy:function(e){return Ve.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},toJSON:function(){var e=Ve.prototype.toJSON.call(this);return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}),Uq.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Uq,load:function(e,t,n,i){var r=this,a=new Xo(r.manager);a.setPath(r.path),a.load(e,(function(e){t(r.parse(JSON.parse(e)))}),n,i)},parse:function(e){var t=e.isInstancedBufferGeometry?new Iq:new ct,n=e.data.index;if(void 0!==n){var i=new Bq[n.type](n.array);t.setIndex(new Ve(i,1))}var r=e.data.attributes;for(var a in r){var o=r[a],q=(i=new Bq[o.type](o.array),new(o.isInstancedBufferAttribute?kq:Ve)(i,o.itemSize,o.normalized));void 0!==o.name&&(q.name=o.name),t.setAttribute(a,q)}var l=e.data.morphAttributes;if(l)for(var a in l){for(var s=l[a],c=[],h=0,u=s.length;h<u;h++){o=s[h],q=new Ve(i=new Bq[o.type](o.array),o.itemSize,o.normalized);void 0!==o.name&&(q.name=o.name),c.push(q)}t.morphAttributes[a]=c}e.data.morphTargetsRelative&&(t.morphTargetsRelative=!0);var m=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==m){h=0;for(var p=m.length;h!==p;++h){var d=m[h];t.addGroup(d.start,d.count,d.materialIndex)}}var f=e.data.boundingSphere;if(void 0!==f){var x=new v;void 0!==f.center&&x.fromArray(f.center),t.boundingSphere=new se(x,f.radius)}return e.name&&(t.name=e.name),e.userData&&(t.userData=e.userData),t}});var Bq={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Fq(e){Vo.call(this,e)}Fq.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Fq,load:function(e,t,n,i){var r=this,a=""===this.path?Dq(e):this.path;this.resourcePath=this.resourcePath||a;var o=new Xo(r.manager);o.setPath(this.path),o.load(e,(function(n){var a=null;try{a=JSON.parse(n)}catch(t){return void 0!==i&&i(t),void console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?r.parse(a,t):console.error("THREE.ObjectLoader: Can't load "+e)}),n,i)},parse:function(e,t){var n=this.parseShape(e.shapes),i=this.parseGeometries(e.geometries,n),r=this.parseImages(e.images,(function(){void 0!==t&&t(q)})),a=this.parseTextures(e.textures,r),o=this.parseMaterials(e.materials,a),q=this.parseObject(e.object,i,o);return e.animations&&(q.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(q),q},parseShape:function(e){var t={};if(void 0!==e)for(var n=0,i=e.length;n<i;n++){var r=(new bq).fromJSON(e[n]);t[r.uuid]=r}return t},parseGeometries:function(e,t){var n={};if(void 0!==e)for(var i=new Uq,r=0,a=e.length;r<a;r++){var o,q=e[r];switch(q.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new po[q.type](q.width,q.height,q.widthSegments,q.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new po[q.type](q.width,q.height,q.depth,q.widthSegments,q.heightSegments,q.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new po[q.type](q.radius,q.segments,q.thetaStart,q.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new po[q.type](q.radiusTop,q.radiusBottom,q.height,q.radialSegments,q.heightSegments,q.openEnded,q.thetaStart,q.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new po[q.type](q.radius,q.height,q.radialSegments,q.heightSegments,q.openEnded,q.thetaStart,q.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new po[q.type](q.radius,q.widthSegments,q.heightSegments,q.phiStart,q.phiLength,q.thetaStart,q.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new po[q.type](q.radius,q.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new po[q.type](q.innerRadius,q.outerRadius,q.thetaSegments,q.phiSegments,q.thetaStart,q.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new po[q.type](q.radius,q.tube,q.radialSegments,q.tubularSegments,q.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new po[q.type](q.radius,q.tube,q.tubularSegments,q.radialSegments,q.p,q.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new po[q.type]((new vq[q.path.type]).fromJSON(q.path),q.tubularSegments,q.radius,q.radialSegments,q.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new po[q.type](q.points,q.segments,q.phiStart,q.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new po[q.type](q.vertices,q.indices,q.radius,q.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var l=[],s=0,c=q.shapes.length;s<c;s++){var h=t[q.shapes[s]];l.push(h)}o=new po[q.type](l,q.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(l=[],s=0,c=q.shapes.length;s<c;s++){h=t[q.shapes[s]];l.push(h)}var u=q.options.extrudePath;void 0!==u&&(q.options.extrudePath=(new vq[u.type]).fromJSON(u)),o=new po[q.type](l,q.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=i.parse(q);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+q.type+'"');continue}o.uuid=q.uuid,void 0!==q.name&&(o.name=q.name),!0===o.isBufferGeometry&&void 0!==q.userData&&(o.userData=q.userData),n[q.uuid]=o}return n},parseMaterials:function(e,t){var n={},i={};if(void 0!==e){var r=new Nq;r.setTextures(t);for(var a=0,o=e.length;a<o;a++){var q=e[a];if("MultiMaterial"===q.type){for(var l=[],s=0;s<q.materials.length;s++){var c=q.materials[s];void 0===n[c.uuid]&&(n[c.uuid]=r.parse(c)),l.push(n[c.uuid])}i[q.uuid]=l}else void 0===n[q.uuid]&&(n[q.uuid]=r.parse(q)),i[q.uuid]=n[q.uuid]}}return i},parseAnimations:function(e){for(var t=[],n=0;n<e.length;n++){var i=e[n],r=Bo.parse(i);void 0!==i.uuid&&(r.uuid=i.uuid),t.push(r)}return t},parseImages:function(e,t){var n=this,i={};function r(e){return n.manager.itemStart(e),a.load(e,(function(){n.manager.itemEnd(e)}),void 0,(function(){n.manager.itemError(e),n.manager.itemEnd(e)}))}if(void 0!==e&&e.length>0){var a=new Ko(new Ho(t));a.setCrossOrigin(this.crossOrigin);for(var o=0,q=e.length;o<q;o++){var l=e[o],s=l.url;if(Array.isArray(s)){i[l.uuid]=[];for(var c=0,h=s.length;c<h;c++){var u=s[c],m=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(u)?u:n.resourcePath+u;i[l.uuid].push(r(m))}}else{m=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url)?l.url:n.resourcePath+l.url;i[l.uuid]=r(m)}}}return i},parseTextures:function(e,t){function n(e,t){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}var i={};if(void 0!==e)for(var r=0,a=e.length;r<a;r++){var o,q=e[r];void 0===q.image&&console.warn('THREE.ObjectLoader: No "image" specified for',q.uuid),void 0===t[q.image]&&console.warn("THREE.ObjectLoader: Undefined image",q.image),(o=Array.isArray(t[q.image])?new dn(t[q.image]):new u(t[q.image])).needsUpdate=!0,o.uuid=q.uuid,void 0!==q.name&&(o.name=q.name),void 0!==q.mapping&&(o.mapping=n(q.mapping,Hq)),void 0!==q.offset&&o.offset.fromArray(q.offset),void 0!==q.repeat&&o.repeat.fromArray(q.repeat),void 0!==q.center&&o.center.fromArray(q.center),void 0!==q.rotation&&(o.rotation=q.rotation),void 0!==q.wrap&&(o.wrapS=n(q.wrap[0],Gq),o.wrapT=n(q.wrap[1],Gq)),void 0!==q.format&&(o.format=q.format),void 0!==q.type&&(o.type=q.type),void 0!==q.encoding&&(o.encoding=q.encoding),void 0!==q.minFilter&&(o.minFilter=n(q.minFilter,Vq)),void 0!==q.magFilter&&(o.magFilter=n(q.magFilter,Vq)),void 0!==q.anisotropy&&(o.anisotropy=q.anisotropy),void 0!==q.flipY&&(o.flipY=q.flipY),void 0!==q.premultiplyAlpha&&(o.premultiplyAlpha=q.premultiplyAlpha),void 0!==q.unpackAlignment&&(o.unpackAlignment=q.unpackAlignment),i[q.uuid]=o}return i},parseObject:function(e,t,n){var i;function r(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],i=0,r=e.length;i<r;i++){var a=e[i];void 0===n[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),t.push(n[a])}return t}return void 0===n[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),n[e]}}switch(e.type){case"Scene":i=new W,void 0!==e.background&&Number.isInteger(e.background)&&(i.background=new De(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?i.fog=new tr(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(i.fog=new er(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":i=new Ht(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(i.focus=e.focus),void 0!==e.zoom&&(i.zoom=e.zoom),void 0!==e.filmGauge&&(i.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(i.filmOffset=e.filmOffset),void 0!==e.view&&(i.view=Object.assign({},e.view));break;case"OrthographicCamera":i=new Lq(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(i.zoom=e.zoom),void 0!==e.view&&(i.view=Object.assign({},e.view));break;case"AmbientLight":i=new Pq(e.color,e.intensity);break;case"DirectionalLight":i=new Rq(e.color,e.intensity);break;case"PointLight":i=new Aq(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":i=new Oq(e.color,e.intensity,e.width,e.height);break;case"SpotLight":i=new Eq(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":i=new Mq(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":i=new zt(o=r(e.geometry),q=a(e.material));break;case"InstancedMesh":var o=r(e.geometry),q=a(e.material),l=e.count,s=e.instanceMatrix;(i=new Pr(o,q,l)).instanceMatrix=new Ve(new Float32Array(s.array),16);break;case"LOD":i=new wr;break;case"Line":i=new Br(r(e.geometry),a(e.material),e.mode);break;case"LineLoop":i=new Gr(r(e.geometry),a(e.material));break;case"LineSegments":i=new Hr(r(e.geometry),a(e.material));break;case"PointCloud":case"Points":i=new Zr(r(e.geometry),a(e.material));break;case"Sprite":i=new vr(a(e.material));break;case"Group":i=new Ki;break;default:i=new V}if(i.uuid=e.uuid,void 0!==e.name&&(i.name=e.name),void 0!==e.matrix?(i.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(i.matrixAutoUpdate=e.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==e.position&&i.position.fromArray(e.position),void 0!==e.rotation&&i.rotation.fromArray(e.rotation),void 0!==e.quaternion&&i.quaternion.fromArray(e.quaternion),void 0!==e.scale&&i.scale.fromArray(e.scale)),void 0!==e.castShadow&&(i.castShadow=e.castShadow),void 0!==e.receiveShadow&&(i.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(i.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(i.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&i.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(i.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(i.visible=e.visible),void 0!==e.frustumCulled&&(i.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(i.renderOrder=e.renderOrder),void 0!==e.userData&&(i.userData=e.userData),void 0!==e.layers&&(i.layers.mask=e.layers),void 0!==e.children)for(var c=e.children,h=0;h<c.length;h++)i.add(this.parseObject(c[h],t,n));if("LOD"===e.type){void 0!==e.autoUpdate&&(i.autoUpdate=e.autoUpdate);for(var u=e.levels,m=0;m<u.length;m++){var p=u[m],d=i.getObjectByProperty("uuid",p.object);void 0!==d&&i.addLevel(d,p.distance)}}return i}});var jq,Hq={UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},Gq={RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},Vq={NearestFilter:1003,NearestMipmapNearestFilter:1004,NearestMipmapLinearFilter:1005,LinearFilter:1006,LinearMipmapNearestFilter:1007,LinearMipmapLinearFilter:1008};function Wq(e){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),Vo.call(this,e),this.options=void 0}function Xq(){this.type="ShapePath",this.color=new De,this.subPaths=[],this.currentPath=null}function Yq(e){this.type="Font",this.data=e}function Jq(e,t,n,i,r){var a=r.glyphs[e]||r.glyphs["?"];if(a){var o,q,l,s,c,h,u,m,p=new Xq;if(a.o)for(var d=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),f=0,x=d.length;f<x;){switch(d[f++]){case"m":o=d[f++]*t+n,q=d[f++]*t+i,p.moveTo(o,q);break;case"l":o=d[f++]*t+n,q=d[f++]*t+i,p.lineTo(o,q);break;case"q":l=d[f++]*t+n,s=d[f++]*t+i,c=d[f++]*t+n,h=d[f++]*t+i,p.quadraticCurveTo(c,h,l,s);break;case"b":l=d[f++]*t+n,s=d[f++]*t+i,c=d[f++]*t+n,h=d[f++]*t+i,u=d[f++]*t+n,m=d[f++]*t+i,p.bezierCurveTo(c,h,u,m,l,s)}}return{offsetX:a.ha*t,path:p}}console.error('THREE.Font: character "'+e+'" does not exists in font family '+r.familyName+".")}function Zq(e){Vo.call(this,e)}Wq.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Wq,setOptions:function(e){return this.options=e,this},load:function(e,t,n,i){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var r=this,a=jo.get(e);if(void 0!==a)return r.manager.itemStart(e),setTimeout((function(){t&&t(a),r.manager.itemEnd(e)}),0),a;fetch(e).then((function(e){return e.blob()})).then((function(e){return void 0===r.options?createImageBitmap(e):createImageBitmap(e,r.options)})).then((function(n){jo.add(e,n),t&&t(n),r.manager.itemEnd(e)})).catch((function(t){i&&i(t),r.manager.itemError(e),r.manager.itemEnd(e)})),r.manager.itemStart(e)}}),Object.assign(Xq.prototype,{moveTo:function(e,t){return this.currentPath=new yq,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this},lineTo:function(e,t){return this.currentPath.lineTo(e,t),this},quadraticCurveTo:function(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this},bezierCurveTo:function(e,t,n,i,r,a){return this.currentPath.bezierCurveTo(e,t,n,i,r,a),this},splineThru:function(e){return this.currentPath.splineThru(e),this},toShapes:function(e,t){function n(e){for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n],a=new bq;a.curves=r.curves,t.push(a)}return t}function i(e,t){for(var n=t.length,i=!1,r=n-1,a=0;a<n;r=a++){var o=t[r],q=t[a],l=q.x-o.x,s=q.y-o.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(o=t[a],l=-l,q=t[r],s=-s),e.y<o.y||e.y>q.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var c=s*(e.x-o.x)-l*(e.y-o.y);if(0===c)return!0;if(c<0)continue;i=!i}}else{if(e.y!==o.y)continue;if(q.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=q.x)return!0}}return i}var r=Ha.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===t)return n(a);var o,q,l,s=[];if(1===a.length)return q=a[0],(l=new bq).curves=q.curves,s.push(l),s;var c=!r(a[0].getPoints());c=e?!c:c;var h,u,m=[],p=[],d=[],f=0;p[f]=void 0,d[f]=[];for(var x=0,g=a.length;x<g;x++)o=r(h=(q=a[x]).getPoints()),(o=e?!o:o)?(!c&&p[f]&&f++,p[f]={s:new bq,p:h},p[f].s.curves=q.curves,c&&f++,d[f]=[]):d[f].push({h:q,p:h[0]});if(!p[0])return n(a);if(p.length>1){for(var v=!1,_=[],y=0,b=p.length;y<b;y++)m[y]=[];for(y=0,b=p.length;y<b;y++)for(var w=d[y],M=0;M<w.length;M++){for(var S=w[M],T=!0,E=0;E<p.length;E++)i(S.p,p[E].p)&&(y!==E&&_.push({froms:y,tos:E,hole:M}),T?(T=!1,m[E].push(S)):v=!0);T&&m[y].push(S)}_.length>0&&(v||(d=m))}x=0;for(var z=p.length;x<z;x++){l=p[x].s,s.push(l);for(var A=0,L=(u=d[x]).length;A<L;A++)l.holes.push(u[A].h)}return s}}),Object.assign(Yq.prototype,{isFont:!0,generateShapes:function(e,t){void 0===t&&(t=100);for(var n=[],i=function(e,t,n){for(var i=Array.from?Array.from(e):String(e).split(""),r=t/n.resolution,a=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*r,o=[],q=0,l=0,s=0;s<i.length;s++){var c=i[s];if("\n"===c)q=0,l-=a;else{var h=Jq(c,r,q,l,n);q+=h.offsetX,o.push(h.path)}}return o}(e,t,this.data),r=0,a=i.length;r<a;r++)Array.prototype.push.apply(n,i[r].toShapes());return n}}),Zq.prototype=Object.assign(Object.create(Vo.prototype),{constructor:Zq,load:function(e,t,n,i){var r=this,a=new Xo(this.manager);a.setPath(this.path),a.load(e,(function(e){var n;try{n=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(e.substring(65,e.length-2))}var i=r.parse(n);t&&t(i)}),n,i)},parse:function(e){return new Yq(e)}});var Kq=function(){return void 0===jq&&(jq=new(window.AudioContext||window.webkitAudioContext)),jq};function $q(e){Vo.call(this,e)}function Qq(){this.coefficients=[];for(var e=0;e<9;e++)this.coefficients.push(new v)}function el(e,t){wq.call(this,void 0,t),this.sh=void 0!==e?e:new Qq}function tl(e,t,n){el.call(this,void 0,n);var i=(new De).set(e),r=(new De).set(t),a=new v(i.r,i.g,i.b),o=new v(r.r,r.g,r.b),q=Math.sqrt(Math.PI),l=q*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(q),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(l)}function nl(e,t){el.call(this,void 0,t);var n=(new De).set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}$q.prototype=Object.assign(Object.create(Vo.prototype),{constructor:$q,load:function(e,t,n,i){var r=new Xo(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.load(e,(function(e){var n=e.slice(0);Kq().decodeAudioData(n,(function(e){t(e)}))}),n,i)}}),Object.assign(Qq.prototype,{isSphericalHarmonics3:!0,set:function(e){for(var t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this},zero:function(){for(var e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this},getAt:function(e,t){var n=e.x,i=e.y,r=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScaledVector(a[1],.488603*i),t.addScaledVector(a[2],.488603*r),t.addScaledVector(a[3],.488603*n),t.addScaledVector(a[4],n*i*1.092548),t.addScaledVector(a[5],i*r*1.092548),t.addScaledVector(a[6],.315392*(3*r*r-1)),t.addScaledVector(a[7],n*r*1.092548),t.addScaledVector(a[8],.546274*(n*n-i*i)),t},getIrradianceAt:function(e,t){var n=e.x,i=e.y,r=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScaledVector(a[1],1.023328*i),t.addScaledVector(a[2],1.023328*r),t.addScaledVector(a[3],1.023328*n),t.addScaledVector(a[4],.858086*n*i),t.addScaledVector(a[5],.858086*i*r),t.addScaledVector(a[6],.743125*r*r-.247708),t.addScaledVector(a[7],.858086*n*r),t.addScaledVector(a[8],.429043*(n*n-i*i)),t},add:function(e){for(var t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this},addScaledSH:function(e,t){for(var n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this},scale:function(e){for(var t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this},lerp:function(e,t){for(var n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this},equals:function(e){for(var t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0},copy:function(e){return this.set(e.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(e,t){void 0===t&&(t=0);for(var n=this.coefficients,i=0;i<9;i++)n[i].fromArray(e,t+3*i);return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var n=this.coefficients,i=0;i<9;i++)n[i].toArray(e,t+3*i);return e}}),Object.assign(Qq,{getBasisAt:function(e,t){var n=e.x,i=e.y,r=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*r,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*r,t[6]=.315392*(3*r*r-1),t[7]=1.092548*n*r,t[8]=.546274*(n*n-i*i)}}),el.prototype=Object.assign(Object.create(wq.prototype),{constructor:el,isLightProbe:!0,copy:function(e){return wq.prototype.copy.call(this,e),this.sh.copy(e.sh),this.intensity=e.intensity,this},toJSON:function(e){return wq.prototype.toJSON.call(this,e)}}),tl.prototype=Object.assign(Object.create(el.prototype),{constructor:tl,isHemisphereLightProbe:!0,copy:function(e){return el.prototype.copy.call(this,e),this},toJSON:function(e){return el.prototype.toJSON.call(this,e)}}),nl.prototype=Object.assign(Object.create(el.prototype),{constructor:nl,isAmbientLightProbe:!0,copy:function(e){return el.prototype.copy.call(this,e),this},toJSON:function(e){return el.prototype.toJSON.call(this,e)}});var il=new E,rl=new E;function al(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(function(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Ht,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Ht,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}.prototype,{update:function(e){var t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep;var n,i,r=e.projectionMatrix.clone(),a=t.eyeSep/2,o=a*t.near/t.focus,l=t.near*Math.tan(q.DEG2RAD*t.fov*.5)/t.zoom;rl.elements[12]=-a,il.elements[12]=a,n=-l*t.aspect+o,i=l*t.aspect+o,r.elements[0]=2*t.near/(i-n),r.elements[8]=(i+n)/(i-n),this.cameraL.projectionMatrix.copy(r),n=-l*t.aspect-o,i=l*t.aspect-o,r.elements[0]=2*t.near/(i-n),r.elements[8]=(i+n)/(i-n),this.cameraR.projectionMatrix.copy(r)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(rl),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(il)}}),Object.assign(al.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}});var ol=new v,ql=new f,ll=new v,sl=new v;function cl(){V.call(this),this.type="AudioListener",this.context=Kq(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new al}function hl(e){V.call(this),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this._startedAt=0,this._pausedAt=0,this.filters=[]}cl.prototype=Object.assign(Object.create(V.prototype),{constructor:cl,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(e){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this},updateMatrixWorld:function(e){V.prototype.updateMatrixWorld.call(this,e);var t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(ol,ql,ll),sl.set(0,0,-1).applyQuaternion(ql),t.positionX){var i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(ol.x,i),t.positionY.linearRampToValueAtTime(ol.y,i),t.positionZ.linearRampToValueAtTime(ol.z,i),t.forwardX.linearRampToValueAtTime(sl.x,i),t.forwardY.linearRampToValueAtTime(sl.y,i),t.forwardZ.linearRampToValueAtTime(sl.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(ol.x,ol.y,ol.z),t.setOrientation(sl.x,sl.y,sl.z,n.x,n.y,n.z)}}),hl.prototype=Object.assign(Object.create(V.prototype),{constructor:hl,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setMediaElementSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this},setMediaStreamSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(e){if(void 0===e&&(e=0),!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){this._startedAt=this.context.currentTime+e;var t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._pausedAt+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._pausedAt+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this._pausedAt=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},setDetune:function(e){if(this.detune=e,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){if(!1!==this.hasPlaybackControl)return this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(e){if(!1!==this.hasPlaybackControl)return this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},setLoopStart:function(e){return this.loopStart=e,this},setLoopEnd:function(e){return this.loopEnd=e,this},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}});var ul=new v,ml=new f,pl=new v,dl=new v;function fl(e){hl.call(this,e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function xl(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function gl(e,t,n){this.binding=e,this.valueSize=n;var i,r=Float64Array;switch(t){case"quaternion":i=this._slerp;break;case"string":case"bool":r=Array,i=this._select;break;default:i=this._lerp}this.buffer=new r(4*n),this._mixBufferRegion=i,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}fl.prototype=Object.assign(Object.create(hl.prototype),{constructor:fl,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){return this.panner.refDistance=e,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){return this.panner.rolloffFactor=e,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){return this.panner.distanceModel=e,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){return this.panner.maxDistance=e,this},setDirectionalCone:function(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(e){if(V.prototype.updateMatrixWorld.call(this,e),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(ul,ml,pl),dl.set(0,0,1).applyQuaternion(ml);var t=this.panner;if(t.positionX){var n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(ul.x,n),t.positionY.linearRampToValueAtTime(ul.y,n),t.positionZ.linearRampToValueAtTime(ul.z,n),t.orientationX.linearRampToValueAtTime(dl.x,n),t.orientationY.linearRampToValueAtTime(dl.y,n),t.orientationZ.linearRampToValueAtTime(dl.z,n)}else t.setPosition(ul.x,ul.y,ul.z),t.setOrientation(dl.x,dl.y,dl.z)}}}),Object.assign(xl.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),n=0;n<t.length;n++)e+=t[n];return e/t.length}}),Object.assign(gl.prototype,{accumulate:function(e,t){var n=this.buffer,i=this.valueSize,r=e*i+i,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==i;++o)n[r+o]=n[o];a=t}else{var q=t/(a+=t);this._mixBufferRegion(n,r,0,q,i)}this.cumulativeWeight=a},apply:function(e){var t=this.valueSize,n=this.buffer,i=e*t+t,r=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,r<1){var o=3*t;this._mixBufferRegion(n,i,o,1-r,t)}for(var q=t,l=t+t;q!==l;++q)if(n[q]!==n[q+t]){a.setValue(n,i);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,n=this.valueSize,i=3*n;e.getValue(t,i);for(var r=n,a=i;r!==a;++r)t[r]=t[i+r%n];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,n,i,r){if(i>=.5)for(var a=0;a!==r;++a)e[t+a]=e[n+a]},_slerp:function(e,t,n,i){f.slerpFlat(e,t,e,t,e,n,i)},_lerp:function(e,t,n,i,r){for(var a=1-i,o=0;o!==r;++o){var q=t+o;e[q]=e[q]*a+e[n+o]*i}}});var vl=new RegExp("[\\[\\]\\.:\\/]","g"),_l="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",yl=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),bl=/(WCOD+)?/.source.replace("WCOD",_l),wl=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Ml=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Sl=new RegExp("^"+yl+bl+wl+Ml+"$"),Tl=["material","materials","bones"];function El(e,t,n){var i=n||zl.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}function zl(e,t,n){this.path=t,this.parsedPath=n||zl.parseTrackName(t),this.node=zl.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function Al(e,t,n){this._mixer=e,this._clip=t,this._localRoot=n||null;for(var i=t.tracks,r=i.length,a=new Array(r),o={endingStart:2400,endingEnd:2400},q=0;q!==r;++q){var l=i[q].createInterpolant(null);a[q]=l,l.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Ll(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Cl(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}function Rl(e,t,n){nr.call(this,e,t),this.meshPerAttribute=n||1}function Pl(e,t,n,i){this.ray=new xe(e,t),this.near=n||0,this.far=i||1/0,this.camera=null,this.layers=new C,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Ol(e,t){return e.distance-t.distance}function Nl(e,t,n,i){if(e.layers.test(t.layers)&&e.raycast(t,n),!0===i)for(var r=e.children,a=0,o=r.length;a<o;a++)Nl(r[a],t,n,!0)}Object.assign(El.prototype,{getValue:function(e,t){this.bind();var n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(e,t)},setValue:function(e,t){for(var n=this._bindings,i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}),Object.assign(zl,{Composite:El,create:function(e,t,n){return e&&e.isAnimationObjectGroup?new zl.Composite(e,t,n):new zl(e,t,n)},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(vl,"")},parseTrackName:function(e){var t=Sl.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);var n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){var r=n.nodeName.substring(i+1);-1!==Tl.indexOf(r)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=r)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n},findNode:function(e,t){if(!t||""===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var n=e.skeleton.getBoneByName(t);if(void 0!==n)return n}if(e.children){var i=function(e){for(var n=0;n<e.length;n++){var r=e[n];if(r.name===t||r.uuid===t)return r;var a=i(r.children);if(a)return a}return null},r=i(e.children);if(r)return r}return null}}),Object.assign(zl.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)e[t++]=n[i]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=e[t++]},function(e,t){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,n=t.objectName,i=t.propertyName,r=t.propertyIndex;if(e||(e=zl.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,e){if(n){var a=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==a){if(void 0===e[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[a]}}var q=e[i];if(void 0!==q){var l=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?l=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate);var s=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(e.geometry.morphAttributes.position[o].name===r){r=o;break}}else{if(!e.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===r){r=o;break}}}s=this.BindingType.ArrayElement,this.resolvedProperty=q,this.propertyIndex=r}else void 0!==q.fromArray&&void 0!==q.toArray?(s=this.BindingType.HasFromToArray,this.resolvedProperty=q):Array.isArray(q)?(s=this.BindingType.EntireArray,this.resolvedProperty=q):this.propertyName=i;this.getValue=this.GetterByBindingType[s],this.setValue=this.SetterByBindingTypeAndVersioning[s][l]}else{var c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",e)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(zl.prototype,{_getValue_unbound:zl.prototype.getValue,_setValue_unbound:zl.prototype.setValue}),Object.assign(function(){this.uuid=q.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,n=arguments.length;t!==n;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}}.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,i=this._indicesByUUID,r=this._paths,a=this._parsedPaths,o=this._bindings,q=o.length,l=void 0,s=0,c=arguments.length;s!==c;++s){var h=arguments[s],u=h.uuid,m=i[u];if(void 0===m){m=t++,i[u]=m,e.push(h);for(var p=0,d=q;p!==d;++p)o[p].push(new zl(h,r[p],a[p]))}else if(m<n){l=e[m];var f=--n,x=e[f];i[x.uuid]=m,e[m]=x,i[u]=f,e[f]=h;for(p=0,d=q;p!==d;++p){var g=o[p],v=g[f],_=g[m];g[m]=v,void 0===_&&(_=new zl(h,r[p],a[p])),g[f]=_}}else e[m]!==l&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,n=this._indicesByUUID,i=this._bindings,r=i.length,a=0,o=arguments.length;a!==o;++a){var q=arguments[a],l=q.uuid,s=n[l];if(void 0!==s&&s>=t){var c=t++,h=e[c];n[h.uuid]=s,e[s]=h,n[l]=c,e[c]=q;for(var u=0,m=r;u!==m;++u){var p=i[u],d=p[c],f=p[s];p[s]=d,p[c]=f}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,i=this._indicesByUUID,r=this._bindings,a=r.length,o=0,q=arguments.length;o!==q;++o){var l=arguments[o],s=l.uuid,c=i[s];if(void 0!==c)if(delete i[s],c<n){var h=--n,u=e[h],m=e[g=--t];i[u.uuid]=c,e[c]=u,i[m.uuid]=h,e[h]=m,e.pop();for(var p=0,d=a;p!==d;++p){var f=(v=r[p])[h],x=v[g];v[c]=f,v[h]=x,v.pop()}}else{var g;i[(m=e[g=--t]).uuid]=c,e[c]=m,e.pop();for(p=0,d=a;p!==d;++p){var v;(v=r[p])[c]=v[g],v.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,t){var n=this._bindingsIndicesByPath,i=n[e],r=this._bindings;if(void 0!==i)return r[i];var a=this._paths,o=this._parsedPaths,q=this._objects,l=q.length,s=this.nCachedObjects_,c=new Array(l);i=r.length,n[e]=i,a.push(e),o.push(t),r.push(c);for(var h=s,u=q.length;h!==u;++h){var m=q[h];c[h]=new zl(m,e,t)}return c},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,n=t[e];if(void 0!==n){var i=this._paths,r=this._parsedPaths,a=this._bindings,o=a.length-1,q=a[o];t[e[o]]=n,a[n]=q,a.pop(),r[n]=r[o],r.pop(),i[n]=i[o],i.pop()}}}),Object.assign(Al.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){var i=this._clip.duration,r=e._clip.duration,a=r/i,o=i/r;e.warp(1,a,t),this.warp(o,1,t)}return this},crossFadeTo:function(e,t,n){return e.crossFadeFrom(this,t,n)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,n){var i=this._mixer,r=i.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);var q=a.parameterPositions,l=a.sampleValues;return q[0]=r,q[1]=r+n,l[0]=e/o,l[1]=t/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,n,i){if(this.enabled){var r=this._startTime;if(null!==r){var a=(e-r)*n;if(a<0||0===n)return;this._startTime=null,t=n*a}t*=this._updateTimeScale(e);var o=this._updateTime(t),q=this._updateWeight(e);if(q>0)for(var l=this._interpolants,s=this._propertyBindings,c=0,h=l.length;c!==h;++c)l[c].evaluate(o),s[c].accumulate(i,q)}else this._updateWeight(e)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var n=this._weightInterpolant;if(null!==n){var i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)t*=n.evaluate(e)[0],e>n.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e,n=this._clip.duration,i=this.loop,r=this._loopCount,a=2202===i;if(0===e)return-1===r?t:a&&1==(1&r)?n-t:t;if(2200===i){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=n)t=n;else{if(!(t<0)){this.time=t;break e}t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(-1===r&&(e>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=n||t<0){var o=Math.floor(t/n);t-=n*o,r+=Math.abs(o);var q=this.repetitions-r;if(q<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?n:0,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(1===q){var l=e<0;this._setEndings(l,!l,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this.time=t,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=t;if(a&&1==(1&r))return n-t}return t},_setEndings:function(e,t,n){var i=this._interpolantSettings;n?(i.endingStart=2401,i.endingEnd=2401):(i.endingStart=e?this.zeroSlopeAtStart?2401:2400:2402,i.endingEnd=t?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(e,t,n){var i=this._mixer,r=i.time,a=this._weightInterpolant;null===a&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,q=a.sampleValues;return o[0]=r,q[0]=t,o[1]=r+e,q[1]=n,this}}),Ll.prototype=Object.assign(Object.create(i.prototype),{constructor:Ll,_bindAction:function(e,t){var n=e._localRoot||this._root,i=e._clip.tracks,r=i.length,a=e._propertyBindings,o=e._interpolants,q=n.uuid,l=this._bindingsByRootAndName,s=l[q];void 0===s&&(s={},l[q]=s);for(var c=0;c!==r;++c){var h=i[c],u=h.name,m=s[u];if(void 0!==m)a[c]=m;else{if(void 0!==(m=a[c])){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,q,u));continue}var p=t&&t._propertyBindings[c].binding.parsedPath;++(m=new gl(zl.create(n,u,p),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(m,q,u),a[c]=m}o[c].resultBuffer=m.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,n=e._clip.uuid,i=this._actionsByClip[n];this._bindAction(e,i&&i.knownActions[0]),this._addInactiveAction(e,n,t)}for(var r=e._propertyBindings,a=0,o=r.length;a!==o;++a){var q=r[a];0==q.useCount++&&(this._lendBinding(q),q.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,n=0,i=t.length;n!==i;++n){var r=t[n];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,n){var i=this._actions,r=this._actionsByClip,a=r[t];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,r[t]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=i.length,i.push(e),a.actionByRoot[n]=e},_removeInactiveAction:function(e){var t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;var r=e._clip.uuid,a=this._actionsByClip,o=a[r],q=o.knownActions,l=q[q.length-1],s=e._byClipCacheIndex;l._byClipCacheIndex=s,q[s]=l,q.pop(),e._byClipCacheIndex=null,delete o.actionByRoot[(e._localRoot||this._root).uuid],0===q.length&&delete a[r],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,n=0,i=t.length;n!==i;++n){var r=t[n];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(e){var t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r},_takeBackAction:function(e){var t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r},_addInactiveBinding:function(e,t,n){var i=this._bindingsByRootAndName,r=i[t],a=this._bindings;void 0===r&&(r={},i[t]=r),r[n]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,n=e.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,o=a[i],q=t[t.length-1],l=e._cacheIndex;q._cacheIndex=l,t[l]=q,t.pop(),delete o[r],0===Object.keys(o).length&&delete a[i]},_lendBinding:function(e){var t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r},_takeBackBinding:function(e){var t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,n=e[t];return void 0===n&&((n=new Lo(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,e[t]=n),n},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,r=t[i];e.__cacheIndex=i,t[i]=e,r.__cacheIndex=n,t[n]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var n=t||this._root,i=n.uuid,r="string"==typeof e?Bo.findByName(n,e):e,a=null!==r?r.uuid:e,o=this._actionsByClip[a],q=null;if(void 0!==o){var l=o.actionByRoot[i];if(void 0!==l)return l;q=o.knownActions[0],null===r&&(r=q._clip)}if(null===r)return null;var s=new Al(this,r,t);return this._bindAction(s,q),this._addInactiveAction(s,a,i),s},existingAction:function(e,t){var n=t||this._root,i=n.uuid,r="string"==typeof e?Bo.findByName(n,e):e,a=r?r.uuid:e,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[i]||null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,n=this._bindings,i=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==t;++r)e[r].reset();for(r=0;r!==i;++r)n[r].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,n=this._nActiveActions,i=this.time+=e,r=Math.sign(e),a=this._accuIndex^=1,o=0;o!==n;++o){t[o]._update(i,e,r,a)}var q=this._bindings,l=this._nActiveBindings;for(o=0;o!==l;++o)q[o].apply(a);return this},setTime:function(e){this.time=0;for(var t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,n=e.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){for(var a=r.knownActions,o=0,q=a.length;o!==q;++o){var l=a[o];this._deactivateAction(l);var s=l._cacheIndex,c=t[t.length-1];l._cacheIndex=null,l._byClipCacheIndex=null,c._cacheIndex=s,t[s]=c,t.pop(),this._removeInactiveBindingsForAction(l)}delete i[n]}},uncacheRoot:function(e){var t=e.uuid,n=this._actionsByClip;for(var i in n){var r=n[i].actionByRoot[t];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var a=this._bindingsByRootAndName[t];if(void 0!==a)for(var o in a){var q=a[o];q.restoreOriginalState(),this._removeInactiveBinding(q)}},uncacheAction:function(e,t){var n=this.existingAction(e,t);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),Cl.prototype.clone=function(){return new Cl(void 0===this.value.clone?this.value:this.value.clone())},Rl.prototype=Object.assign(Object.create(nr.prototype),{constructor:Rl,isInstancedInterleavedBuffer:!0,copy:function(e){return nr.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(Pl.prototype,{set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t,n){var i=n||[];return Nl(e,this,i,t),i.sort(Ol),i},intersectObjects:function(e,t,n){var i=n||[];if(!1===Array.isArray(e))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var r=0,a=e.length;r<a;r++)Nl(e[r],this,i,t);return i.sort(Ol),i}}),Object.assign(function(e,t,n){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==n?n:0,this}.prototype,{set:function(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(q.clamp(t/this.radius,-1,1))),this}}),Object.assign(function(e,t,n){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==n?n:0,this}.prototype,{set:function(e,t,n){return this.radius=e,this.theta=t,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}});var Dl=new l;function Il(e,t){this.min=void 0!==e?e:new l(1/0,1/0),this.max=void 0!==t?t:new l(-1/0,-1/0)}Object.assign(Il.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var n=Dl.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box2: .getCenter() target is now required"),e=new l),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box2: .getSize() target is now required"),e=new l),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new l),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new l),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return Dl.copy(e).clamp(this.min,this.max).sub(e).length()},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var kl=new v,Ul=new v;function Bl(e,t){this.start=void 0!==e?e:new v,this.end=void 0!==t?t:new v}function Fl(e){V.call(this),this.material=e,this.render=function(){}}Object.assign(Bl.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return void 0===e&&(console.warn("THREE.Line3: .getCenter() target is now required"),e=new v),e.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return void 0===e&&(console.warn("THREE.Line3: .delta() target is now required"),e=new v),e.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){return void 0===t&&(console.warn("THREE.Line3: .at() target is now required"),t=new v),this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(e,t){kl.subVectors(e,this.start),Ul.subVectors(this.end,this.start);var n=Ul.dot(Ul),i=Ul.dot(kl)/n;return t&&(i=q.clamp(i,0,1)),i},closestPointToPoint:function(e,t,n){var i=this.closestPointToPointParameter(e,t);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new v),this.delta(n).multiplyScalar(i).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),Fl.prototype=Object.create(V.prototype),Fl.prototype.constructor=Fl,Fl.prototype.isImmediateRenderObject=!0;var jl=new v;function Hl(e,t){V.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var n=new ct,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,a=1;r<32;r++,a++){var o=r/32*Math.PI*2,q=a/32*Math.PI*2;i.push(Math.cos(o),Math.sin(o),1,Math.cos(q),Math.sin(q),1)}n.setAttribute("position",new Qe(i,3));var l=new Or({fog:!1,toneMapped:!1});this.cone=new Hr(n,l),this.add(this.cone),this.update()}Hl.prototype=Object.create(V.prototype),Hl.prototype.constructor=Hl,Hl.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},Hl.prototype.update=function(){this.light.updateMatrixWorld();var e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),jl.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(jl),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var Gl=new v,Vl=new E,Wl=new E;function Xl(e){for(var t=function e(t){var n=[];t&&t.isBone&&n.push(t);for(var i=0;i<t.children.length;i++)n.push.apply(n,e(t.children[i]));return n}(e),n=new ct,i=[],r=[],a=new De(0,0,1),o=new De(0,1,0),q=0;q<t.length;q++){var l=t[q];l.parent&&l.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(a.r,a.g,a.b),r.push(o.r,o.g,o.b))}n.setAttribute("position",new Qe(i,3)),n.setAttribute("color",new Qe(r,3));var s=new Or({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});Hr.call(this,n,s),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function Yl(e,t,n){this.light=e,this.light.updateMatrixWorld(),this.color=n;var i=new Qa(t,4,2),r=new He({wireframe:!0,fog:!1,toneMapped:!1});zt.call(this,i,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}Xl.prototype=Object.create(Hr.prototype),Xl.prototype.constructor=Xl,Xl.prototype.isSkeletonHelper=!0,Xl.prototype.updateMatrixWorld=function(e){var t=this.bones,n=this.geometry,i=n.getAttribute("position");Wl.getInverse(this.root.matrixWorld);for(var r=0,a=0;r<t.length;r++){var o=t[r];o.parent&&o.parent.isBone&&(Vl.multiplyMatrices(Wl,o.matrixWorld),Gl.setFromMatrixPosition(Vl),i.setXYZ(a,Gl.x,Gl.y,Gl.z),Vl.multiplyMatrices(Wl,o.parent.matrixWorld),Gl.setFromMatrixPosition(Vl),i.setXYZ(a+1,Gl.x,Gl.y,Gl.z),a+=2)}n.getAttribute("position").needsUpdate=!0,V.prototype.updateMatrixWorld.call(this,e)},Yl.prototype=Object.create(zt.prototype),Yl.prototype.constructor=Yl,Yl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Yl.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)};var Jl=new v,Zl=new De,Kl=new De;function $l(e,t,n){V.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var i=new ca(t);i.rotateY(.5*Math.PI),this.material=new He({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);var r=i.getAttribute("position"),a=new Float32Array(3*r.count);i.setAttribute("color",new Ve(a,3)),this.add(new zt(i,this.material)),this.update()}function Ql(e,t,n,i){e=e||10,t=t||10,n=new De(void 0!==n?n:4473924),i=new De(void 0!==i?i:8947848);for(var r=t/2,a=e/t,o=e/2,q=[],l=[],s=0,c=0,h=-o;s<=t;s++,h+=a){q.push(-o,0,h,o,0,h),q.push(h,0,-o,h,0,o);var u=s===r?n:i;u.toArray(l,c),c+=3,u.toArray(l,c),c+=3,u.toArray(l,c),c+=3,u.toArray(l,c),c+=3}var m=new ct;m.setAttribute("position",new Qe(q,3)),m.setAttribute("color",new Qe(l,3));var p=new Or({vertexColors:!0,toneMapped:!1});Hr.call(this,m,p)}function es(e,t,n,i,r,a){e=e||10,t=t||16,n=n||8,i=i||64,r=new De(void 0!==r?r:4473924),a=new De(void 0!==a?a:8947848);var o,q,l,s,c,h,u,m=[],p=[];for(s=0;s<=t;s++)l=s/t*(2*Math.PI),o=Math.sin(l)*e,q=Math.cos(l)*e,m.push(0,0,0),m.push(o,0,q),u=1&s?r:a,p.push(u.r,u.g,u.b),p.push(u.r,u.g,u.b);for(s=0;s<=n;s++)for(u=1&s?r:a,h=e-e/n*s,c=0;c<i;c++)l=c/i*(2*Math.PI),o=Math.sin(l)*h,q=Math.cos(l)*h,m.push(o,0,q),p.push(u.r,u.g,u.b),l=(c+1)/i*(2*Math.PI),o=Math.sin(l)*h,q=Math.cos(l)*h,m.push(o,0,q),p.push(u.r,u.g,u.b);var d=new ct;d.setAttribute("position",new Qe(m,3)),d.setAttribute("color",new Qe(p,3));var f=new Or({vertexColors:!0,toneMapped:!1});Hr.call(this,d,f)}$l.prototype=Object.create(V.prototype),$l.prototype.constructor=$l,$l.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},$l.prototype.update=function(){var e=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var t=e.geometry.getAttribute("color");Zl.copy(this.light.color),Kl.copy(this.light.groundColor);for(var n=0,i=t.count;n<i;n++){var r=n<i/2?Zl:Kl;t.setXYZ(n,r.r,r.g,r.b)}t.needsUpdate=!0}e.lookAt(Jl.setFromMatrixPosition(this.light.matrixWorld).negate())},Ql.prototype=Object.assign(Object.create(Hr.prototype),{constructor:Ql,copy:function(e){return Hr.prototype.copy.call(this,e),this.geometry.copy(e.geometry),this.material.copy(e.material),this},clone:function(){return(new this.constructor).copy(this)}}),es.prototype=Object.create(Hr.prototype),es.prototype.constructor=es;var ts=new v,ns=new v,is=new v;function rs(e,t,n){V.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===t&&(t=1);var i=new ct;i.setAttribute("position",new Qe([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var r=new Or({fog:!1,toneMapped:!1});this.lightPlane=new Br(i,r),this.add(this.lightPlane),(i=new ct).setAttribute("position",new Qe([0,0,0,0,0,1],3)),this.targetLine=new Br(i,r),this.add(this.targetLine),this.update()}rs.prototype=Object.create(V.prototype),rs.prototype.constructor=rs,rs.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},rs.prototype.update=function(){ts.setFromMatrixPosition(this.light.matrixWorld),ns.setFromMatrixPosition(this.light.target.matrixWorld),is.subVectors(ns,ts),this.lightPlane.lookAt(ns),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(ns),this.targetLine.scale.z=is.length()};var as=new v,os=new jt;function qs(e){var t=new ct,n=new Or({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],r=[],a={},o=new De(16755200),q=new De(16711680),l=new De(43775),s=new De(16777215),c=new De(3355443);function h(e,t,n){u(e,n),u(t,n)}function u(e,t){i.push(0,0,0),r.push(t.r,t.g,t.b),void 0===a[e]&&(a[e]=[]),a[e].push(i.length/3-1)}h("n1","n2",o),h("n2","n4",o),h("n4","n3",o),h("n3","n1",o),h("f1","f2",o),h("f2","f4",o),h("f4","f3",o),h("f3","f1",o),h("n1","f1",o),h("n2","f2",o),h("n3","f3",o),h("n4","f4",o),h("p","n1",q),h("p","n2",q),h("p","n3",q),h("p","n4",q),h("u1","u2",l),h("u2","u3",l),h("u3","u1",l),h("c","t",s),h("p","c",c),h("cn1","cn2",c),h("cn3","cn4",c),h("cf1","cf2",c),h("cf3","cf4",c),t.setAttribute("position",new Qe(i,3)),t.setAttribute("color",new Qe(r,3)),Hr.call(this,t,n),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function ls(e,t,n,i,r,a,o){as.set(r,a,o).unproject(i);var q=t[e];if(void 0!==q)for(var l=n.getAttribute("position"),s=0,c=q.length;s<c;s++)l.setXYZ(q[s],as.x,as.y,as.z)}qs.prototype=Object.create(Hr.prototype),qs.prototype.constructor=qs,qs.prototype.update=function(){var e=this.geometry,t=this.pointMap;os.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),ls("c",t,e,os,0,0,-1),ls("t",t,e,os,0,0,1),ls("n1",t,e,os,-1,-1,-1),ls("n2",t,e,os,1,-1,-1),ls("n3",t,e,os,-1,1,-1),ls("n4",t,e,os,1,1,-1),ls("f1",t,e,os,-1,-1,1),ls("f2",t,e,os,1,-1,1),ls("f3",t,e,os,-1,1,1),ls("f4",t,e,os,1,1,1),ls("u1",t,e,os,.7,1.1,-1),ls("u2",t,e,os,-.7,1.1,-1),ls("u3",t,e,os,0,2,-1),ls("cf1",t,e,os,-1,0,1),ls("cf2",t,e,os,1,0,1),ls("cf3",t,e,os,0,-1,1),ls("cf4",t,e,os,0,1,1),ls("cn1",t,e,os,-1,0,-1),ls("cn2",t,e,os,1,0,-1),ls("cn3",t,e,os,0,-1,-1),ls("cn4",t,e,os,0,1,-1),e.getAttribute("position").needsUpdate=!0};var ss=new oe;function cs(e,t){this.object=e,void 0===t&&(t=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),r=new ct;r.setIndex(new Ve(n,1)),r.setAttribute("position",new Ve(i,3)),Hr.call(this,r,new Or({color:t,toneMapped:!1})),this.matrixAutoUpdate=!1,this.update()}function hs(e,t){this.type="Box3Helper",this.box=e,t=t||16776960;var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new ct;i.setIndex(new Ve(n,1)),i.setAttribute("position",new Qe([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Hr.call(this,i,new Or({color:t,toneMapped:!1})),this.geometry.computeBoundingSphere()}function us(e,t,n){this.type="PlaneHelper",this.plane=e,this.size=void 0===t?1:t;var i=void 0!==n?n:16776960,r=new ct;r.setAttribute("position",new Qe([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),Br.call(this,r,new Or({color:i,toneMapped:!1}));var a=new ct;a.setAttribute("position",new Qe([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new zt(a,new He({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}cs.prototype=Object.create(Hr.prototype),cs.prototype.constructor=cs,cs.prototype.update=function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&ss.setFromObject(this.object),!ss.isEmpty()){var t=ss.min,n=ss.max,i=this.geometry.attributes.position,r=i.array;r[0]=n.x,r[1]=n.y,r[2]=n.z,r[3]=t.x,r[4]=n.y,r[5]=n.z,r[6]=t.x,r[7]=t.y,r[8]=n.z,r[9]=n.x,r[10]=t.y,r[11]=n.z,r[12]=n.x,r[13]=n.y,r[14]=t.z,r[15]=t.x,r[16]=n.y,r[17]=t.z,r[18]=t.x,r[19]=t.y,r[20]=t.z,r[21]=n.x,r[22]=t.y,r[23]=t.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}},cs.prototype.setFromObject=function(e){return this.object=e,this.update(),this},cs.prototype.copy=function(e){return Hr.prototype.copy.call(this,e),this.object=e.object,this},cs.prototype.clone=function(){return(new this.constructor).copy(this)},hs.prototype=Object.create(Hr.prototype),hs.prototype.constructor=hs,hs.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),V.prototype.updateMatrixWorld.call(this,e))},us.prototype=Object.create(Br.prototype),us.prototype.constructor=us,us.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?1:0,this.lookAt(this.plane.normal),V.prototype.updateMatrixWorld.call(this,e)};var ms,ps,ds=new v;function fs(e,t,n,i,r,a){V.call(this),void 0===e&&(e=new v(0,0,1)),void 0===t&&(t=new v(0,0,0)),void 0===n&&(n=1),void 0===i&&(i=16776960),void 0===r&&(r=.2*n),void 0===a&&(a=.2*r),void 0===ms&&((ms=new ct).setAttribute("position",new Qe([0,0,0,0,1,0],3)),(ps=new so(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new Br(ms,new Or({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new zt(ps,new He({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,r,a)}function xs(e){var t=[0,0,0,e=e||1,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=new ct;n.setAttribute("position",new Qe(t,3)),n.setAttribute("color",new Qe([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var i=new Or({vertexColors:!0,toneMapped:!1});Hr.call(this,n,i)}fs.prototype=Object.create(V.prototype),fs.prototype.constructor=fs,fs.prototype.setDirection=function(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{ds.set(e.z,0,-e.x).normalize();var t=Math.acos(e.y);this.quaternion.setFromAxisAngle(ds,t)}},fs.prototype.setLength=function(e,t,n){void 0===t&&(t=.2*e),void 0===n&&(n=.2*t),this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()},fs.prototype.setColor=function(e){this.line.material.color.set(e),this.cone.material.color.set(e)},fs.prototype.copy=function(e){return V.prototype.copy.call(this,e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this},fs.prototype.clone=function(){return(new this.constructor).copy(this)},xs.prototype=Object.create(Hr.prototype),xs.prototype.constructor=xs;var gs,vs,_s,ys,bs=Math.pow(2,8),ws=[.125,.215,.35,.446,.526,.582],Ms=5+ws.length,Ss={3e3:0,3001:1,3002:2,3004:3,3005:4,3006:5,3007:6},Ts=new Lq,Es=(gs=20,vs=new Float32Array(gs),_s=new v(0,1,0),(ys=new xo({defines:{n:gs},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:vs},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:_s},inputEncoding:{value:Ss[3e3]},outputEncoding:{value:Ss[3e3]}},vertexShader:Zs(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n${Ks()}\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvec3 getSample(float theta, vec3 axis) {\n\tfloat cosTheta = cos(theta);\n\t// Rodrigues' axis-angle rotation\n\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\n}\n\nvoid main() {\n\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\tif (all(equal(axis, vec3(0.0))))\n\t\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\n\taxis = normalize(axis);\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfloat theta = dTheta * float(i);\n\t\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\n\t\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:0,depthTest:!1,depthWrite:!1})).type="SphericalGaussianBlur",ys),zs=null,As=null,{_lodPlanes:Ls,_sizeLods:Cs,_sigmas:Rs}=function(){for(var e=[],t=[],n=[],i=8,r=0;r<Ms;r++){var a=Math.pow(2,i);t.push(a);var o=1/a;r>4?o=ws[r-8+4-1]:0==r&&(o=0),n.push(o);for(var q=1/(a-1),l=-q/2,s=1+q/2,c=[l,l,s,l,s,s,l,l,s,s,l,s],h=new Float32Array(108),u=new Float32Array(72),m=new Float32Array(36),p=0;p<6;p++){var d=p%3*2/3-1,f=p>2?0:-1,x=[d,f,0,d+2/3,f,0,d+2/3,f+1,0,d,f,0,d+2/3,f+1,0,d,f+1,0];h.set(x,18*p),u.set(c,12*p);var g=[p,p,p,p,p,p];m.set(g,6*p)}var v=new ct;v.setAttribute("position",new Ve(h,3)),v.setAttribute("uv",new Ve(u,2)),v.setAttribute("faceIndex",new Ve(m,1)),e.push(v),i>4&&i--}return{_lodPlanes:e,_sizeLods:t,_sigmas:n}}(),Ps=null,Os=null,Ns=null,Ds=(1+Math.sqrt(5))/2,Is=1/Ds,ks=[new v(1,1,1),new v(-1,1,1),new v(1,1,-1),new v(-1,1,-1),new v(0,Ds,Is),new v(0,Ds,-Is),new v(Is,0,Ds),new v(-Is,0,Ds),new v(Ds,Is,0),new v(-Ds,Is,0)];function Us(e){Os=e,js(Es)}function Bs(e){var t={magFilter:1003,minFilter:1003,generateMipmaps:!1,type:e?e.type:1009,format:e?e.format:1023,encoding:e?e.encoding:3002,depthBuffer:!1,stencilBuffer:!1},n=Hs(t);return n.depthBuffer=!e,Ps=Hs(t),n}function Fs(e){Ps.dispose(),Os.setRenderTarget(Ns),e.scissorTest=!1,e.setSize(e.width,e.height)}function js(e){var t=new W;t.add(new zt(Ls[0],e)),Os.compile(t,Ts)}function Hs(e){var t=new p(3*bs,3*bs,e);return t.texture.mapping=306,t.texture.name="PMREM.cubeUv",t.scissorTest=!0,t}function Gs(e,t,n,i,r){e.viewport.set(t,n,i,r),e.scissor.set(t,n,i,r)}function Vs(e){var t=Os.autoClear;Os.autoClear=!1;for(var n=1;n<Ms;n++){Ws(e,n-1,n,Math.sqrt(Rs[n]*Rs[n]-Rs[n-1]*Rs[n-1]),ks[(n-1)%ks.length])}Os.autoClear=t}function Ws(e,t,n,i,r){Xs(e,Ps,t,n,i,"latitudinal",r),Xs(Ps,e,n,n,i,"longitudinal",r)}function Xs(e,t,n,i,r,a,o){"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");var q=new W;q.add(new zt(Ls[i],Es));var l=Es.uniforms,s=Cs[n]-1,c=isFinite(r)?Math.PI/(2*s):2*Math.PI/39,h=r/c,u=isFinite(r)?1+Math.floor(3*h):20;u>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${u} samples when the maximum is set to 20`);for(var m=[],p=0,d=0;d<20;++d){var f=d/h,x=Math.exp(-f*f/2);m.push(x),0==d?p+=x:d<u&&(p+=2*x)}for(d=0;d<m.length;d++)m[d]=m[d]/p;l.envMap.value=e.texture,l.samples.value=u,l.weights.value=m,l.latitudinal.value="latitudinal"===a,o&&(l.poleAxis.value=o),l.dTheta.value=c,l.mipInt.value=8-n,l.inputEncoding.value=Ss[e.texture.encoding],l.outputEncoding.value=Ss[e.texture.encoding];var g=Cs[i];Gs(t,f=3*Math.max(0,bs-2*g),(0===i?0:2*bs)+2*g*(i>4?i-8+4:0),3*g,2*g),Os.setRenderTarget(t),Os.render(q,Ts)}function Ys(){var e=new xo({uniforms:{envMap:{value:null},texelSize:{value:new l(1,1)},inputEncoding:{value:Ss[3e3]},outputEncoding:{value:Ss[3e3]}},vertexShader:Zs(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n${Ks()}\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv;\n\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:0,depthTest:!1,depthWrite:!1});return e.type="EquirectangularToCubeUV",e}function Js(){var e=new xo({uniforms:{envMap:{value:null},inputEncoding:{value:Ss[3e3]},outputEncoding:{value:Ss[3e3]}},vertexShader:Zs(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n${Ks()}\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:0,depthTest:!1,depthWrite:!1});return e.type="CubemapToCubeUV",e}function Zs(){return"\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.x *= -1.0;\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.y *= -1.0;\n\t} else if (face == 5.0) {\n\t\tdirection.xz *= -1.0;\n\t}\n\treturn direction;\n}\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t"}function Ks(){return"\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t"}Us.prototype={constructor:Us,fromScene:function(e,t=0,n=.1,i=100){Ns=Os.getRenderTarget();var r=Bs();return function(e,t,n,i){var r=new Ht(90,1,t,n),a=[1,1,1,1,-1,1],o=[1,1,-1,-1,-1,1],q=Os.outputEncoding,l=Os.toneMapping,s=Os.toneMappingExposure,c=Os.getClearColor(),h=Os.getClearAlpha();Os.toneMapping=1,Os.toneMappingExposure=1,Os.outputEncoding=3e3,e.scale.z*=-1;var u=e.background;if(u&&u.isColor){u.convertSRGBToLinear();var m=Math.max(u.r,u.g,u.b),p=Math.min(Math.max(Math.ceil(Math.log2(m)),-128),127);u=u.multiplyScalar(Math.pow(2,-p));var d=(p+128)/255;Os.setClearColor(u,d),e.background=null}for(var f=0;f<6;f++){var x=f%3;0==x?(r.up.set(0,a[f],0),r.lookAt(o[f],0,0)):1==x?(r.up.set(0,0,a[f]),r.lookAt(0,o[f],0)):(r.up.set(0,a[f],0),r.lookAt(0,0,o[f])),Gs(i,x*bs,f>2?bs:0,bs,bs),Os.setRenderTarget(i),Os.render(e,r)}Os.toneMapping=l,Os.toneMappingExposure=s,Os.outputEncoding=q,Os.setClearColor(c,h),e.scale.z*=-1}(e,n,i,r),t>0&&Ws(r,0,0,t),Vs(r),Fs(r),r},fromEquirectangular:function(e){return e.magFilter=1003,e.minFilter=1003,e.generateMipmaps=!1,this.fromCubemap(e)},fromCubemap:function(e){Ns=Os.getRenderTarget();var t=Bs(e);return function(e,t){var n=new W;e.isCubeTexture?null==As&&(As=Js()):null==zs&&(zs=Ys());var i=e.isCubeTexture?As:zs;n.add(new zt(Ls[0],i));var r=i.uniforms;r.envMap.value=e,e.isCubeTexture||r.texelSize.value.set(1/e.image.width,1/e.image.height);r.inputEncoding.value=Ss[e.encoding],r.outputEncoding.value=Ss[e.encoding],Gs(t,0,0,3*bs,2*bs),Os.setRenderTarget(t),Os.render(n,Ts)}(e,t),Vs(t),Fs(t),t},compileCubemapShader:function(){null==As&&js(As=Js())},compileEquirectangularShader:function(){null==zs&&js(zs=Ys())},dispose:function(){Es.dispose(),null!=As&&As.dispose(),null!=zs&&zs.dispose();for(var e=0;e<Ls.length;e++)Ls[e].dispose()}};function $s(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),lq.call(this,e),this.type="catmullrom"}eq.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(eq.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(_q.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new Nt,n=0,i=e.length;n<i;n++){var r=e[n];t.vertices.push(new v(r.x,r.y,r.z||0))}return t}}),Object.assign(yq.prototype,{fromPoints:function(e){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}}),Object.create(lq.prototype),Object.create(lq.prototype),$s.prototype=Object.create(lq.prototype),Object.assign($s.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Ql.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Xl.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Vo.prototype,{extractUrlBase:function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Dq(e)}}),Vo.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(Fq.prototype,{setTexturePath:function(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}),Object.assign(Il.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}}),Object.assign(oe.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}}),Jt.prototype.setFromMatrix=function(e){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(e)},Bl.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Object.assign(q,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),q.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),q.ceilPowerOfTwo(e)}}),Object.assign(s.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBufferAttribute:function(e){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(E.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new v).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBufferAttribute:function(e){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,n,i,r,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,i,n,r,a)}}),ye.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},f.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},Object.assign(xe.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(Re.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},midpoint:function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},normal:function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},plane:function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)}}),Object.assign(Re,{barycoordFromPoint:function(e,t,n,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Re.getBarycoord(e,t,n,i,r)},normal:function(e,t,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Re.getNormal(e,t,n,i)}}),Object.assign(bq.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Wa(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new ro(this,e)}}),Object.assign(l.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(v.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(m.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Nt.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},applyMatrix:function(e){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}}),Object.assign(V.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},applyMatrix:function(e){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}}),Object.defineProperties(V.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.assign(zt.prototype,{setDrawMode:function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}),Object.defineProperties(zt.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Object.defineProperties(wr.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Er.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Mr.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(eq.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}}),Ht.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(wq.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(Ve.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),35048===this.usage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(35048)}}}),Object.assign(Ve.prototype,{setDynamic:function(e){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===e?35048:35044),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(ct.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addAttribute:function(e,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(e,t):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(e,new Ve(arguments[1],arguments[2])))},addDrawCall:function(e,t,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(e){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(e)},applyMatrix:function(e){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}}),Object.defineProperties(ct.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(Pl.prototype,{linePrecision:{get:function(){return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold},set:function(e){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold=e}}}),Object.defineProperties(nr.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),35048===this.usage},set:function(e){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(e)}}}),Object.assign(nr.prototype,{setDynamic:function(e){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===e?35048:35044),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(Xa.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Cl.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(je.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new De}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===e}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=e}}}),Object.defineProperties(_o.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(Ft.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),Object.assign(Qi.prototype,{clearTarget:function(e,t,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,n,i)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(Qi.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(e){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===e?3001:3e3}}}),Object.defineProperties(Wi.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(p.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.defineProperties(hl.prototype,{load:{value:function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new $q).load(e,(function(e){t.setBuffer(e)})),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}}),xl.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Gt.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};c.crossOrigin=void 0,c.loadTexture=function(e,t,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var r=new Qo;r.setCrossOrigin(this.crossOrigin);var a=r.load(e,n,void 0,i);return t&&(a.mapping=t),a},c.loadTextureCube=function(e,t,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var r=new $o;r.setCrossOrigin(this.crossOrigin);var a=r.load(e,n,void 0,i);return t&&(a.mapping=t),a},c.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},c.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"115"}}))},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.5.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-04-10T15:07Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var a=[],o=Object.getPrototypeOf,q=a.slice,l=a.flat?function(e){return a.flat.call(e)}:function(e){return a.concat.apply([],e)},s=a.push,c=a.indexOf,h={},u=h.toString,m=h.hasOwnProperty,p=m.toString,d=p.call(Object),f={},x=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},v=n.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function y(e,t,n){var i,r,a=(n=n||v).createElement("script");if(a.text=e,t)for(i in _)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&a.setAttribute(i,r);n.head.appendChild(a).parentNode.removeChild(a)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[u.call(e)]||"object":typeof e}var w=function(e,t){return new w.fn.init(e,t)};function M(e){var t=!!e&&"length"in e&&e.length,n=b(e);return!x(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}w.fn=w.prototype={jquery:"3.5.0",constructor:w,length:0,toArray:function(){return q.call(this)},get:function(e){return null==e?q.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(w.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(w.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:a.sort,splice:a.splice},w.extend=w.fn.extend=function(){var e,t,n,i,r,a,o=arguments[0]||{},q=1,l=arguments.length,s=!1;for("boolean"==typeof o&&(s=o,o=arguments[q]||{},q++),"object"==typeof o||x(o)||(o={}),q===l&&(o=this,q--);q<l;q++)if(null!=(e=arguments[q]))for(t in e)i=e[t],"__proto__"!==t&&o!==i&&(s&&i&&(w.isPlainObject(i)||(r=Array.isArray(i)))?(n=o[t],a=r&&!Array.isArray(n)?[]:r||w.isPlainObject(n)?n:{},r=!1,o[t]=w.extend(s,a,i)):void 0!==i&&(o[t]=i));return o},w.extend({expando:"jQuery"+("3.5.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==u.call(e))&&(!(t=o(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){y(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(M(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,a=e.length,o=!n;r<a;r++)!t(e[r],r)!==o&&i.push(e[r]);return i},map:function(e,t,n){var i,r,a=0,o=[];if(M(e))for(i=e.length;a<i;a++)null!=(r=t(e[a],a,n))&&o.push(r);else for(a in e)null!=(r=t(e[a],a,n))&&o.push(r);return l(o)},guid:1,support:f}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=a[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,i,r,a,o,q,l,s,c,h,u,m,p,d,f,x,g,v,_="sizzle"+1*new Date,y=e.document,b=0,w=0,M=le(),S=le(),T=le(),E=le(),z=function(e,t){return e===t&&(h=!0),0},A={}.hasOwnProperty,L=[],C=L.pop,R=L.push,P=L.push,O=L.slice,N=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},D="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",k="(?:\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",U="\\["+I+"*("+k+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+k+"))|)"+I+"*\\]",B=":("+k+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",F=new RegExp(I+"+","g"),j=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),H=new RegExp("^"+I+"*,"+I+"*"),G=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),V=new RegExp(I+"|>"),W=new RegExp(B),X=new RegExp("^"+k+"$"),Y={ID:new RegExp("^#("+k+")"),CLASS:new RegExp("^\\.("+k+")"),TAG:new RegExp("^("+k+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+D+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},J=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){u()},oe=_e((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{P.apply(L=O.call(y.childNodes),y.childNodes),L[y.childNodes.length].nodeType}catch(e){P={apply:L.length?function(e,t){R.apply(e,O.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function qe(e,t,i,r){var a,q,s,c,h,p,x,g=t&&t.ownerDocument,y=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==y&&9!==y&&11!==y)return i;if(!r&&(u(t),t=t||m,d)){if(11!==y&&(h=Q.exec(e)))if(a=h[1]){if(9===y){if(!(s=t.getElementById(a)))return i;if(s.id===a)return i.push(s),i}else if(g&&(s=g.getElementById(a))&&v(t,s)&&s.id===a)return i.push(s),i}else{if(h[2])return P.apply(i,t.getElementsByTagName(e)),i;if((a=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return P.apply(i,t.getElementsByClassName(a)),i}if(n.qsa&&!E[e+" "]&&(!f||!f.test(e))&&(1!==y||"object"!==t.nodeName.toLowerCase())){if(x=e,g=t,1===y&&(V.test(e)||G.test(e))){for((g=ee.test(e)&&xe(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(ie,re):t.setAttribute("id",c=_)),q=(p=o(e)).length;q--;)p[q]=(c?"#"+c:":scope")+" "+ve(p[q]);x=p.join(",")}try{return P.apply(i,g.querySelectorAll(x)),i}catch(t){E(e,!0)}finally{c===_&&t.removeAttribute("id")}}}return l(e.replace(j,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function se(e){return e[_]=!0,e}function ce(e){var t=m.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function he(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function me(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return se((function(t){return t=+t,se((function(n,i){for(var r,a=e([],n.length,t),o=a.length;o--;)n[r=a[o]]&&(n[r]=!(i[r]=n[r]))}))}))}function xe(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=qe.support={},a=qe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!J.test(t||n&&n.nodeName||"HTML")},u=qe.setDocument=function(e){var t,r,o=e?e.ownerDocument||e:y;return o!=m&&9===o.nodeType&&o.documentElement?(p=(m=o).documentElement,d=!a(m),y!=m&&(r=m.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ae,!1):r.attachEvent&&r.attachEvent("onunload",ae)),n.scope=ce((function(e){return p.appendChild(e).appendChild(m.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(m.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=$.test(m.getElementsByClassName),n.getById=ce((function(e){return p.appendChild(e).id=_,!m.getElementsByName||!m.getElementsByName(_).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n,i,r,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(r=t.getElementsByName(e),i=0;a=r[i++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[r++];)1===n.nodeType&&i.push(n);return i}return a},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&d)return t.getElementsByClassName(e)},x=[],f=[],(n.qsa=$.test(m.querySelectorAll))&&(ce((function(e){var t;p.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&f.push("[*^$]="+I+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||f.push("\\["+I+"*(?:value|"+D+")"),e.querySelectorAll("[id~="+_+"-]").length||f.push("~="),(t=m.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||f.push("\\["+I+"*name"+I+"*="+I+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||f.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||f.push(".#.+[+~]"),e.querySelectorAll("\\\f"),f.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=m.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&f.push("name"+I+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&f.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),f.push(",.*:")}))),(n.matchesSelector=$.test(g=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),x.push("!=",B)})),f=f.length&&new RegExp(f.join("|")),x=x.length&&new RegExp(x.join("|")),t=$.test(p.compareDocumentPosition),v=t||$.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return h=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==m||e.ownerDocument==y&&v(y,e)?-1:t==m||t.ownerDocument==y&&v(y,t)?1:c?N(c,e)-N(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,i=0,r=e.parentNode,a=t.parentNode,o=[e],q=[t];if(!r||!a)return e==m?-1:t==m?1:r?-1:a?1:c?N(c,e)-N(c,t):0;if(r===a)return ue(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)q.unshift(n);for(;o[i]===q[i];)i++;return i?ue(o[i],q[i]):o[i]==y?-1:q[i]==y?1:0},m):m},qe.matches=function(e,t){return qe(e,null,null,t)},qe.matchesSelector=function(e,t){if(u(e),n.matchesSelector&&d&&!E[t+" "]&&(!x||!x.test(t))&&(!f||!f.test(t)))try{var i=g.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){E(t,!0)}return qe(t,m,null,[e]).length>0},qe.contains=function(e,t){return(e.ownerDocument||e)!=m&&u(e),v(e,t)},qe.attr=function(e,t){(e.ownerDocument||e)!=m&&u(e);var r=i.attrHandle[t.toLowerCase()],a=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!d):void 0;return void 0!==a?a:n.attributes||!d?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},qe.escape=function(e){return(e+"").replace(ie,re)},qe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},qe.uniqueSort=function(e){var t,i=[],r=0,a=0;if(h=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(z),h){for(;t=e[a++];)t===e[a]&&(r=i.push(a));for(;r--;)e.splice(i[r],1)}return c=null,e},r=qe.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=qe.selectors={cacheLength:50,createPseudo:se,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||qe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&qe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=M[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&M(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=qe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),q="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var s,c,h,u,m,p,d=a!==o?"nextSibling":"previousSibling",f=t.parentNode,x=q&&t.nodeName.toLowerCase(),g=!l&&!q,v=!1;if(f){if(a){for(;d;){for(u=t;u=u[d];)if(q?u.nodeName.toLowerCase()===x:1===u.nodeType)return!1;p=d="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?f.firstChild:f.lastChild],o&&g){for(v=(m=(s=(c=(h=(u=f)[_]||(u[_]={}))[u.uniqueID]||(h[u.uniqueID]={}))[e]||[])[0]===b&&s[1])&&s[2],u=m&&f.childNodes[m];u=++m&&u&&u[d]||(v=m=0)||p.pop();)if(1===u.nodeType&&++v&&u===t){c[e]=[b,m,v];break}}else if(g&&(v=m=(s=(c=(h=(u=t)[_]||(u[_]={}))[u.uniqueID]||(h[u.uniqueID]={}))[e]||[])[0]===b&&s[1]),!1===v)for(;(u=++m&&u&&u[d]||(v=m=0)||p.pop())&&((q?u.nodeName.toLowerCase()!==x:1!==u.nodeType)||!++v||(g&&((c=(h=u[_]||(u[_]={}))[u.uniqueID]||(h[u.uniqueID]={}))[e]=[b,v]),u!==t)););return(v-=r)===i||v%i==0&&v/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||qe.error("unsupported pseudo: "+e);return r[_]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?se((function(e,n){for(var i,a=r(e,t),o=a.length;o--;)e[i=N(e,a[o])]=!(n[i]=a[o])})):function(e){return r(e,0,n)}):r}},pseudos:{not:se((function(e){var t=[],n=[],i=q(e.replace(j,"$1"));return i[_]?se((function(e,t,n,r){for(var a,o=i(e,null,r,[]),q=e.length;q--;)(a=o[q])&&(e[q]=!(t[q]=a))})):function(e,r,a){return t[0]=e,i(t,null,a,n),t[0]=null,!n.pop()}})),has:se((function(e){return function(t){return qe(e,t).length>0}})),contains:se((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:se((function(e){return X.test(e||"")||qe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=d?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===m.activeElement&&(!m.hasFocus||m.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe((function(){return[0]})),last:fe((function(e,t){return[t-1]})),eq:fe((function(e,t,n){return[n<0?n+t:n]})),even:fe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:fe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:fe((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:fe((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=me(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=pe(t);function ge(){}function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function _e(e,t,n){var i=t.dir,r=t.next,a=r||i,o=n&&"parentNode"===a,q=w++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,l){var s,c,h,u=[b,q];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(c=(h=t[_]||(t[_]={}))[t.uniqueID]||(h[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((s=c[a])&&s[0]===b&&s[1]===q)return u[2]=s[2];if(c[a]=u,u[2]=e(t,n,l))return!0}return!1}}function ye(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function be(e,t,n,i,r){for(var a,o=[],q=0,l=e.length,s=null!=t;q<l;q++)(a=e[q])&&(n&&!n(a,i,r)||(o.push(a),s&&t.push(q)));return o}function we(e,t,n,i,r,a){return i&&!i[_]&&(i=we(i)),r&&!r[_]&&(r=we(r,a)),se((function(a,o,q,l){var s,c,h,u=[],m=[],p=o.length,d=a||function(e,t,n){for(var i=0,r=t.length;i<r;i++)qe(e,t[i],n);return n}(t||"*",q.nodeType?[q]:q,[]),f=!e||!a&&t?d:be(d,u,e,q,l),x=n?r||(a?e:p||i)?[]:o:f;if(n&&n(f,x,q,l),i)for(s=be(x,m),i(s,[],q,l),c=s.length;c--;)(h=s[c])&&(x[m[c]]=!(f[m[c]]=h));if(a){if(r||e){if(r){for(s=[],c=x.length;c--;)(h=x[c])&&s.push(f[c]=h);r(null,x=[],s,l)}for(c=x.length;c--;)(h=x[c])&&(s=r?N(a,h):u[c])>-1&&(a[s]=!(o[s]=h))}}else x=be(x===o?x.splice(p,x.length):x),r?r(null,o,x,l):P.apply(o,x)}))}function Me(e){for(var t,n,r,a=e.length,o=i.relative[e[0].type],q=o||i.relative[" "],l=o?1:0,c=_e((function(e){return e===t}),q,!0),h=_e((function(e){return N(t,e)>-1}),q,!0),u=[function(e,n,i){var r=!o&&(i||n!==s)||((t=n).nodeType?c(e,n,i):h(e,n,i));return t=null,r}];l<a;l++)if(n=i.relative[e[l].type])u=[_e(ye(u),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[_]){for(r=++l;r<a&&!i.relative[e[r].type];r++);return we(l>1&&ye(u),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(j,"$1"),n,l<r&&Me(e.slice(l,r)),r<a&&Me(e=e.slice(r)),r<a&&ve(e))}u.push(n)}return ye(u)}return ge.prototype=i.filters=i.pseudos,i.setFilters=new ge,o=qe.tokenize=function(e,t){var n,r,a,o,q,l,s,c=S[e+" "];if(c)return t?0:c.slice(0);for(q=e,l=[],s=i.preFilter;q;){for(o in n&&!(r=H.exec(q))||(r&&(q=q.slice(r[0].length)||q),l.push(a=[])),n=!1,(r=G.exec(q))&&(n=r.shift(),a.push({value:n,type:r[0].replace(j," ")}),q=q.slice(n.length)),i.filter)!(r=Y[o].exec(q))||s[o]&&!(r=s[o](r))||(n=r.shift(),a.push({value:n,type:o,matches:r}),q=q.slice(n.length));if(!n)break}return t?q.length:q?qe.error(e):S(e,l).slice(0)},q=qe.compile=function(e,t){var n,r=[],a=[],q=T[e+" "];if(!q){for(t||(t=o(e)),n=t.length;n--;)(q=Me(t[n]))[_]?r.push(q):a.push(q);(q=T(e,function(e,t){var n=t.length>0,r=e.length>0,a=function(a,o,q,l,c){var h,p,f,x=0,g="0",v=a&&[],_=[],y=s,w=a||r&&i.find.TAG("*",c),M=b+=null==y?1:Math.random()||.1,S=w.length;for(c&&(s=o==m||o||c);g!==S&&null!=(h=w[g]);g++){if(r&&h){for(p=0,o||h.ownerDocument==m||(u(h),q=!d);f=e[p++];)if(f(h,o||m,q)){l.push(h);break}c&&(b=M)}n&&((h=!f&&h)&&x--,a&&v.push(h))}if(x+=g,n&&g!==x){for(p=0;f=t[p++];)f(v,_,o,q);if(a){if(x>0)for(;g--;)v[g]||_[g]||(_[g]=C.call(l));_=be(_)}P.apply(l,_),c&&!a&&_.length>0&&x+t.length>1&&qe.uniqueSort(l)}return c&&(b=M,s=y),v};return n?se(a):a}(a,r))).selector=e}return q},l=qe.select=function(e,t,n,r){var a,l,s,c,h,u="function"==typeof e&&e,m=!r&&o(e=u.selector||e);if(n=n||[],1===m.length){if((l=m[0]=m[0].slice(0)).length>2&&"ID"===(s=l[0]).type&&9===t.nodeType&&d&&i.relative[l[1].type]){if(!(t=(i.find.ID(s.matches[0].replace(te,ne),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(a=Y.needsContext.test(e)?0:l.length;a--&&(s=l[a],!i.relative[c=s.type]);)if((h=i.find[c])&&(r=h(s.matches[0].replace(te,ne),ee.test(l[0].type)&&xe(t.parentNode)||t))){if(l.splice(a,1),!(e=r.length&&ve(l)))return P.apply(n,r),n;break}}return(u||q(e,m))(r,t,!d,n,!t||ee.test(e)&&xe(t.parentNode)||t),n},n.sortStable=_.split("").sort(z).join("")===_,n.detectDuplicates=!!h,u(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(m.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||he("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||he("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||he(D,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),qe}(n);w.find=S,w.expr=S.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=S.uniqueSort,w.text=S.getText,w.isXMLDoc=S.isXML,w.contains=S.contains,w.escapeSelector=S.escape;var T=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&w(e).is(n))break;i.push(e)}return i},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},z=w.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var L=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function C(e,t,n){return x(t)?w.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?w.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?w.grep(e,(function(e){return c.call(t,e)>-1!==n})):w.filter(t,e,n)}w.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?w.find.matchesSelector(i,e)?[i]:[]:w.find.matches(e,w.grep(t,(function(e){return 1===e.nodeType})))},w.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(w(e).filter((function(){for(t=0;t<i;t++)if(w.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)w.find(e,r[t],n);return i>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(C(this,e||[],!1))},not:function(e){return this.pushStack(C(this,e||[],!0))},is:function(e){return!!C(this,"string"==typeof e&&z.test(e)?w(e):e||[],!1).length}});var R,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||R,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:P.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:v,!0)),L.test(i[1])&&w.isPlainObject(t))for(i in t)x(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=v.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):x(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,R=w(v);var O=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,a=[],o="string"!=typeof e&&w(e);if(!z.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?w.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?c.call(w(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},(function(e,t){w.fn[e]=function(n,i){var r=w.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=w.filter(i,r)),this.length>1&&(N[e]||w.uniqueSort(r),O.test(e)&&r.reverse()),this.pushStack(r)}}));var I=/[^\x20\t\r\n\f]+/g;function k(e){return e}function U(e){throw e}function B(e,t,n,i){var r;try{e&&x(r=e.promise)?r.call(e).done(t).fail(n):e&&x(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}w.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return w.each(e.match(I)||[],(function(e,n){t[n]=!0})),t}(e):w.extend({},e);var t,n,i,r,a=[],o=[],q=-1,l=function(){for(r=r||e.once,i=t=!0;o.length;q=-1)for(n=o.shift();++q<a.length;)!1===a[q].apply(n[0],n[1])&&e.stopOnFalse&&(q=a.length,n=!1);e.memory||(n=!1),t=!1,r&&(a=n?[]:"")},s={add:function(){return a&&(n&&!t&&(q=a.length-1,o.push(n)),function t(n){w.each(n,(function(n,i){x(i)?e.unique&&s.has(i)||a.push(i):i&&i.length&&"string"!==b(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return w.each(arguments,(function(e,t){for(var n;(n=w.inArray(t,a,n))>-1;)a.splice(n,1),n<=q&&q--})),this},has:function(e){return e?w.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return r=o=[],a=n="",this},disabled:function(){return!a},lock:function(){return r=o=[],n||t||(a=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!i}};return s},w.extend({Deferred:function(e){var t=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return w.Deferred((function(n){w.each(t,(function(t,i){var r=x(e[i[4]])&&e[i[4]];a[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&x(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var a=0;function o(e,t,i,r){return function(){var q=this,l=arguments,s=function(){var n,s;if(!(e<a)){if((n=i.apply(q,l))===t.promise())throw new TypeError("Thenable self-resolution");s=n&&("object"==typeof n||"function"==typeof n)&&n.then,x(s)?r?s.call(n,o(a,t,k,r),o(a,t,U,r)):(a++,s.call(n,o(a,t,k,r),o(a,t,U,r),o(a,t,k,t.notifyWith))):(i!==k&&(q=void 0,l=[n]),(r||t.resolveWith)(q,l))}},c=r?s:function(){try{s()}catch(n){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(n,c.stackTrace),e+1>=a&&(i!==U&&(q=void 0,l=[n]),t.rejectWith(q,l))}};e?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),n.setTimeout(c))}}return w.Deferred((function(n){t[0][3].add(o(0,n,x(r)?r:k,n.notifyWith)),t[1][3].add(o(0,n,x(e)?e:k)),t[2][3].add(o(0,n,x(i)?i:U))})).promise()},promise:function(e){return null!=e?w.extend(e,r):r}},a={};return w.each(t,(function(e,n){var o=n[2],q=n[5];r[n[1]]=o.add,q&&o.add((function(){i=q}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),a[n[0]]=function(){return a[n[0]+"With"](this===a?void 0:this,arguments),this},a[n[0]+"With"]=o.fireWith})),r.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,i=Array(n),r=q.call(arguments),a=w.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?q.call(arguments):n,--t||a.resolveWith(i,r)}};if(t<=1&&(B(e,a.done(o(n)).resolve,a.reject,!t),"pending"===a.state()||x(r[n]&&r[n].then)))return a.then();for(;n--;)B(r[n],o(n),a.reject);return a.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&F.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},w.readyException=function(e){n.setTimeout((function(){throw e}))};var j=w.Deferred();function H(){v.removeEventListener("DOMContentLoaded",H),n.removeEventListener("load",H),w.ready()}w.fn.ready=function(e){return j.then(e).catch((function(e){w.readyException(e)})),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||j.resolveWith(v,[w]))}}),w.ready.then=j.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?n.setTimeout(w.ready):(v.addEventListener("DOMContentLoaded",H),n.addEventListener("load",H));var G=function(e,t,n,i,r,a,o){var q=0,l=e.length,s=null==n;if("object"===b(n))for(q in r=!0,n)G(e,t,q,n[q],!0,a,o);else if(void 0!==i&&(r=!0,x(i)||(o=!0),s&&(o?(t.call(e,i),t=null):(s=t,t=function(e,t,n){return s.call(w(e),n)})),t))for(;q<l;q++)t(e[q],n,o?i:i.call(e[q],q,t(e[q],n)));return r?e:s?t.call(e):l?t(e[0],n):a},V=/^-ms-/,W=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(V,"ms-").replace(W,X)}var J=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Z(){this.expando=w.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(e){var t=e[this.expando];return t||(t=Object.create(null),J(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[Y(t)]=n;else for(i in t)r[Y(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in i?[t]:t.match(I)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||w.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var K=new Z,$=new Z,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Q.test(e)?JSON.parse(e):e)}(n)}catch(e){}$.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return $.hasData(e)||K.hasData(e)},data:function(e,t,n){return $.access(e,t,n)},removeData:function(e,t){$.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,i,r,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(r=$.get(a),1===a.nodeType&&!K.get(a,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(i=o[n].name).indexOf("data-")&&(i=Y(i.slice(5)),te(a,i,r[i]));K.set(a,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){$.set(this,e)})):G(this,(function(t){var n;if(a&&void 0===t)return void 0!==(n=$.get(a,e))||void 0!==(n=te(a,e))?n:void 0;this.each((function(){$.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){$.remove(this,e)}))}}),w.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=K.get(e,t),n&&(!i||Array.isArray(n)?i=K.access(e,t,w.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),i=n.length,r=n.shift(),a=w._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete a.stop,r.call(e,(function(){w.dequeue(e,t)}),a)),!i&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:w.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each((function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){w.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=w.Deferred(),a=this,o=this.length,q=function(){--i||r.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=K.get(a[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(q));return q(),r.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ae=v.documentElement,oe=function(e){return w.contains(e.ownerDocument,e)},qe={composed:!0};ae.getRootNode&&(oe=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(qe)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===w.css(e,"display")};function se(e,t,n,i){var r,a,o=20,q=i?function(){return i.cur()}:function(){return w.css(e,t,"")},l=q(),s=n&&n[3]||(w.cssNumber[t]?"":"px"),c=e.nodeType&&(w.cssNumber[t]||"px"!==s&&+l)&&ie.exec(w.css(e,t));if(c&&c[3]!==s){for(l/=2,s=s||c[3],c=+l||1;o--;)w.style(e,t,c+s),(1-a)*(1-(a=q()/l||.5))<=0&&(o=0),c/=a;c*=2,w.style(e,t,c+s),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=s,i.start=c,i.end=r)),r}var ce={};function he(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=w.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function ue(e,t){for(var n,i,r=[],a=0,o=e.length;a<o;a++)(i=e[a]).style&&(n=i.style.display,t?("none"===n&&(r[a]=K.get(i,"display")||null,r[a]||(i.style.display="")),""===i.style.display&&le(i)&&(r[a]=he(i))):"none"!==n&&(r[a]="none",K.set(i,"display",n)));for(a=0;a<o;a++)null!=r[a]&&(e[a].style.display=r[a]);return e}w.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?w(this).show():w(this).hide()}))}});var me,pe,de=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,xe=/^$|^module$|\/(?:java|ecma)script/i;me=v.createDocumentFragment().appendChild(v.createElement("div")),(pe=v.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),me.appendChild(pe),f.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue,me.innerHTML="<option></option>",f.option=!!me.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?w.merge([e],n):n}function _e(e,t){for(var n=0,i=e.length;n<i;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,f.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,n,i,r){for(var a,o,q,l,s,c,h=t.createDocumentFragment(),u=[],m=0,p=e.length;m<p;m++)if((a=e[m])||0===a)if("object"===b(a))w.merge(u,a.nodeType?[a]:a);else if(ye.test(a)){for(o=o||h.appendChild(t.createElement("div")),q=(fe.exec(a)||["",""])[1].toLowerCase(),l=ge[q]||ge._default,o.innerHTML=l[1]+w.htmlPrefilter(a)+l[2],c=l[0];c--;)o=o.lastChild;w.merge(u,o.childNodes),(o=h.firstChild).textContent=""}else u.push(t.createTextNode(a));for(h.textContent="",m=0;a=u[m++];)if(i&&w.inArray(a,i)>-1)r&&r.push(a);else if(s=oe(a),o=ve(h.appendChild(a),"script"),s&&_e(o),n)for(c=0;a=o[c++];)xe.test(a.type||"")&&n.push(a);return h}var we=/^key/,Me=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ee(){return!1}function ze(e,t){return e===function(){try{return v.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,i,r,a){var o,q;if("object"==typeof t){for(q in"string"!=typeof n&&(i=i||n,n=void 0),t)Ae(e,q,n,i,t[q],a);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ee;else if(!r)return e;return 1===a&&(o=r,(r=function(e){return w().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=w.guid++)),e.each((function(){w.event.add(this,t,r,i,n)}))}function Le(e,t,n){n?(K.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var i,r,a=K.get(this,t);if(1&e.isTrigger&&this[t]){if(a.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=q.call(arguments),K.set(this,t,a),i=n(this,t),this[t](),a!==(r=K.get(this,t))||i?K.set(this,t,!1):r={},a!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else a.length&&(K.set(this,t,{value:w.event.trigger(w.extend(a[0],w.Event.prototype),a.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&w.event.add(e,t,Te)}w.event={global:{},add:function(e,t,n,i,r){var a,o,q,l,s,c,h,u,m,p,d,f=K.get(e);if(J(e))for(n.handler&&(n=(a=n).handler,r=a.selector),r&&w.find.matchesSelector(ae,r),n.guid||(n.guid=w.guid++),(l=f.events)||(l=f.events=Object.create(null)),(o=f.handle)||(o=f.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(I)||[""]).length;s--;)m=d=(q=Se.exec(t[s])||[])[1],p=(q[2]||"").split(".").sort(),m&&(h=w.event.special[m]||{},m=(r?h.delegateType:h.bindType)||m,h=w.event.special[m]||{},c=w.extend({type:m,origType:d,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&w.expr.match.needsContext.test(r),namespace:p.join(".")},a),(u=l[m])||((u=l[m]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,p,o)||e.addEventListener&&e.addEventListener(m,o)),h.add&&(h.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?u.splice(u.delegateCount++,0,c):u.push(c),w.event.global[m]=!0)},remove:function(e,t,n,i,r){var a,o,q,l,s,c,h,u,m,p,d,f=K.hasData(e)&&K.get(e);if(f&&(l=f.events)){for(s=(t=(t||"").match(I)||[""]).length;s--;)if(m=d=(q=Se.exec(t[s])||[])[1],p=(q[2]||"").split(".").sort(),m){for(h=w.event.special[m]||{},u=l[m=(i?h.delegateType:h.bindType)||m]||[],q=q[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=u.length;a--;)c=u[a],!r&&d!==c.origType||n&&n.guid!==c.guid||q&&!q.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(u.splice(a,1),c.selector&&u.delegateCount--,h.remove&&h.remove.call(e,c));o&&!u.length&&(h.teardown&&!1!==h.teardown.call(e,p,f.handle)||w.removeEvent(e,m,f.handle),delete l[m])}else for(m in l)w.event.remove(e,m+t[s],n,i,!0);w.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,a,o,q=new Array(arguments.length),l=w.event.fix(e),s=(K.get(this,"events")||Object.create(null))[l.type]||[],c=w.event.special[l.type]||{};for(q[0]=l,t=1;t<arguments.length;t++)q[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=w.event.handlers.call(this,l,s),t=0;(r=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,q))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,a,o,q=[],l=t.delegateCount,s=e.target;if(l&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(a=[],o={},n=0;n<l;n++)void 0===o[r=(i=t[n]).selector+" "]&&(o[r]=i.needsContext?w(r,this).index(s)>-1:w.find(r,this,null,[s]).length),o[r]&&a.push(i);a.length&&q.push({elem:s,handlers:a})}return s=this,l<t.length&&q.push({elem:s,handlers:t.slice(l)}),q},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:x(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return de.test(t.type)&&t.click&&A(t,"input")&&Le(t,"click",Te),!1},trigger:function(e){var t=this||e;return de.test(t.type)&&t.click&&A(t,"input")&&Le(t,"click"),!0},_default:function(e){var t=e.target;return de.test(t.type)&&t.click&&A(t,"input")&&K.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Me.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(e,t){w.event.special[e]={setup:function(){return Le(this,e,ze),!1},trigger:function(){return Le(this,e),!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,a=e.handleObj;return r&&(r===i||w.contains(i,r))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}})),w.fn.extend({on:function(e,t,n,i){return Ae(this,e,t,n,i)},one:function(e,t,n,i){return Ae(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,w(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){w.event.remove(this,e,n,t)}))}});var Ce=/<script|<style|<link/i,Re=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var n,i,r,a,o,q;if(1===t.nodeType){if(K.hasData(e)&&(q=K.get(e).events))for(r in K.remove(t,"handle events"),q)for(n=0,i=q[r].length;n<i;n++)w.event.add(t,r,q[r][n]);$.hasData(e)&&(a=$.access(e),o=w.extend({},a),$.set(t,o))}}function ke(e,t){var n=t.nodeName.toLowerCase();"input"===n&&de.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ue(e,t,n,i){t=l(t);var r,a,o,q,s,c,h=0,u=e.length,m=u-1,p=t[0],d=x(p);if(d||u>1&&"string"==typeof p&&!f.checkClone&&Re.test(p))return e.each((function(r){var a=e.eq(r);d&&(t[0]=p.call(this,r,a.html())),Ue(a,t,n,i)}));if(u&&(a=(r=be(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=a),a||i)){for(q=(o=w.map(ve(r,"script"),Ne)).length;h<u;h++)s=r,h!==m&&(s=w.clone(s,!0,!0),q&&w.merge(o,ve(s,"script"))),n.call(e[h],s,h);if(q)for(c=o[o.length-1].ownerDocument,w.map(o,De),h=0;h<q;h++)s=o[h],xe.test(s.type||"")&&!K.access(s,"globalEval")&&w.contains(c,s)&&(s.src&&"module"!==(s.type||"").toLowerCase()?w._evalUrl&&!s.noModule&&w._evalUrl(s.src,{nonce:s.nonce||s.getAttribute("nonce")},c):y(s.textContent.replace(Pe,""),s,c))}return e}function Be(e,t,n){for(var i,r=t?w.filter(t,e):e,a=0;null!=(i=r[a]);a++)n||1!==i.nodeType||w.cleanData(ve(i)),i.parentNode&&(n&&oe(i)&&_e(ve(i,"script")),i.parentNode.removeChild(i));return e}w.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,a,o,q=e.cloneNode(!0),l=oe(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(o=ve(q),i=0,r=(a=ve(e)).length;i<r;i++)ke(a[i],o[i]);if(t)if(n)for(a=a||ve(e),o=o||ve(q),i=0,r=a.length;i<r;i++)Ie(a[i],o[i]);else Ie(e,q);return(o=ve(q,"script")).length>0&&_e(o,!l&&ve(e,"script")),q},cleanData:function(e){for(var t,n,i,r=w.event.special,a=0;void 0!==(n=e[a]);a++)if(J(n)){if(t=n[K.expando]){if(t.events)for(i in t.events)r[i]?w.event.remove(n,i):w.removeEvent(n,i,t.handle);n[K.expando]=void 0}n[$.expando]&&(n[$.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return G(this,(function(e){return void 0===e?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ue(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return Ue(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ue(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ue(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return w.clone(this,e,t)}))},html:function(e){return G(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ce.test(e)&&!ge[(fe.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ue(this,arguments,(function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ve(this)),n&&n.replaceChild(t,this))}),e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){w.fn[e]=function(e){for(var n,i=[],r=w(e),a=r.length-1,o=0;o<=a;o++)n=o===a?this:this.clone(!0),w(r[o])[t](n),s.apply(i,n.get());return this.pushStack(i)}}));var Fe=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),je=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},He=function(e,t,n){var i,r,a={};for(r in t)a[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=a[r];return i},Ge=new RegExp(re.join("|"),"i");function Ve(e,t,n){var i,r,a,o,q=e.style;return(n=n||je(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||oe(e)||(o=w.style(e,t)),!f.pixelBoxStyles()&&Fe.test(o)&&Ge.test(t)&&(i=q.width,r=q.minWidth,a=q.maxWidth,q.minWidth=q.maxWidth=q.width=o,o=n.width,q.width=i,q.minWidth=r,q.maxWidth=a)),void 0!==o?o+"":o}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(s).appendChild(c);var e=n.getComputedStyle(c);i="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",o=36===t(e.right),r=36===t(e.width),c.style.position="absolute",a=12===t(c.offsetWidth/3),ae.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var i,r,a,o,q,l,s=v.createElement("div"),c=v.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(f,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,t,i,r;return null==q&&(e=v.createElement("table"),t=v.createElement("tr"),i=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ae.appendChild(e).appendChild(t).appendChild(i),r=n.getComputedStyle(t),q=parseInt(r.height)>3,ae.removeChild(e)),q}}))}();var Xe=["Webkit","Moz","ms"],Ye=v.createElement("div").style,Je={};function Ze(e){var t=w.cssProps[e]||Je[e];return t||(e in Ye?e:Je[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ye)return e}(e)||e)}var Ke=/^(none|table(?!-c[ea]).+)/,$e=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var i=ie.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function nt(e,t,n,i,r,a){var o="width"===t?1:0,q=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=w.css(e,n+re[o],!0,r)),i?("content"===n&&(l-=w.css(e,"padding"+re[o],!0,r)),"margin"!==n&&(l-=w.css(e,"border"+re[o]+"Width",!0,r))):(l+=w.css(e,"padding"+re[o],!0,r),"padding"!==n?l+=w.css(e,"border"+re[o]+"Width",!0,r):q+=w.css(e,"border"+re[o]+"Width",!0,r));return!i&&a>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-q-.5))||0),l}function it(e,t,n){var i=je(e),r=(!f.boxSizingReliable()||n)&&"border-box"===w.css(e,"boxSizing",!1,i),a=r,o=Ve(e,t,i),q="offset"+t[0].toUpperCase()+t.slice(1);if(Fe.test(o)){if(!n)return o;o="auto"}return(!f.boxSizingReliable()&&r||!f.reliableTrDimensions()&&A(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===w.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===w.css(e,"boxSizing",!1,i),(a=q in e)&&(o=e[q])),(o=parseFloat(o)||0)+nt(e,t,n||(r?"border":"content"),a,i,o)+"px"}function rt(e,t,n,i,r){return new rt.prototype.init(e,t,n,i,r)}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ve(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,a,o,q=Y(t),l=$e.test(t),s=e.style;if(l||(t=Ze(q)),o=w.cssHooks[t]||w.cssHooks[q],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:s[t];"string"===(a=typeof n)&&(r=ie.exec(n))&&r[1]&&(n=se(e,t,r),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=r&&r[3]||(w.cssNumber[q]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,i){var r,a,o,q=Y(t);return $e.test(t)||(t=Ze(q)),(o=w.cssHooks[t]||w.cssHooks[q])&&"get"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=Ve(e,t,i)),"normal"===r&&t in et&&(r=et[t]),""===n||n?(a=parseFloat(r),!0===n||isFinite(a)?a||0:r):r}}),w.each(["height","width"],(function(e,t){w.cssHooks[t]={get:function(e,n,i){if(n)return!Ke.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,i):He(e,Qe,(function(){return it(e,t,i)}))},set:function(e,n,i){var r,a=je(e),o=!f.scrollboxSize()&&"absolute"===a.position,q=(o||i)&&"border-box"===w.css(e,"boxSizing",!1,a),l=i?nt(e,t,i,q,a):0;return q&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-nt(e,t,"border",!1,a)-.5)),l&&(r=ie.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),tt(0,n,l)}}})),w.cssHooks.marginLeft=We(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-He(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(e,t){w.cssHooks[e+t]={expand:function(n){for(var i=0,r={},a="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+re[i]+t]=a[i]||a[i-2]||a[0];return r}},"margin"!==e&&(w.cssHooks[e+t].set=tt)})),w.fn.extend({css:function(e,t){return G(this,(function(e,t,n){var i,r,a={},o=0;if(Array.isArray(t)){for(i=je(e),r=t.length;o<r;o++)a[t[o]]=w.css(e,t[o],!1,i);return a}return void 0!==n?w.style(e,t,n):w.css(e,t)}),e,t,arguments.length>1)}}),w.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,i,r,a){this.elem=e,this.prop=n,this.easing=r||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=a||(w.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||!w.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=rt.prototype.init,w.fx.step={};var at,ot,qt=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function st(){ot&&(!1===v.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,w.fx.interval),w.fx.tick())}function ct(){return n.setTimeout((function(){at=void 0})),at=Date.now()}function ht(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=re[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ut(e,t,n){for(var i,r=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),a=0,o=r.length;a<o;a++)if(i=r[a].call(n,t,e))return i}function mt(e,t,n){var i,r,a=0,o=mt.prefilters.length,q=w.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=at||ct(),n=Math.max(0,s.startTime+s.duration-t),i=1-(n/s.duration||0),a=0,o=s.tweens.length;a<o;a++)s.tweens[a].run(i);return q.notifyWith(e,[s,i,n]),i<1&&o?n:(o||q.notifyWith(e,[s,1,0]),q.resolveWith(e,[s]),!1)},s=q.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var i=w.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(i),i},stop:function(t){var n=0,i=t?s.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)s.tweens[n].run(1);return t?(q.notifyWith(e,[s,1,0]),q.resolveWith(e,[s,t])):q.rejectWith(e,[s,t]),this}}),c=s.props;for(!function(e,t){var n,i,r,a,o;for(n in e)if(r=t[i=Y(n)],a=e[n],Array.isArray(a)&&(r=a[1],a=e[n]=a[0]),n!==i&&(e[i]=a,delete e[n]),(o=w.cssHooks[i])&&"expand"in o)for(n in a=o.expand(a),delete e[i],a)n in e||(e[n]=a[n],t[n]=r);else t[i]=r}(c,s.opts.specialEasing);a<o;a++)if(i=mt.prefilters[a].call(s,e,c,s.opts))return x(i.stop)&&(w._queueHooks(s.elem,s.opts.queue).stop=i.stop.bind(i)),i;return w.map(c,ut,s),x(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),w.fx.timer(w.extend(l,{elem:e,anim:s,queue:s.opts.queue})),s}w.Animation=w.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){x(e)?(t=e,e=["*"]):e=e.match(I);for(var n,i=0,r=e.length;i<r;i++)n=e[i],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,a,o,q,l,s,c,h="width"in t||"height"in t,u=this,m={},p=e.style,d=e.nodeType&&le(e),f=K.get(e,"fxshow");for(i in n.queue||(null==(o=w._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,q=o.empty.fire,o.empty.fire=function(){o.unqueued||q()}),o.unqueued++,u.always((function(){u.always((function(){o.unqueued--,w.queue(e,"fx").length||o.empty.fire()}))}))),t)if(r=t[i],qt.test(r)){if(delete t[i],a=a||"toggle"===r,r===(d?"hide":"show")){if("show"!==r||!f||void 0===f[i])continue;d=!0}m[i]=f&&f[i]||w.style(e,i)}if((l=!w.isEmptyObject(t))||!w.isEmptyObject(m))for(i in h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(s=f&&f.display)&&(s=K.get(e,"display")),"none"===(c=w.css(e,"display"))&&(s?c=s:(ue([e],!0),s=e.style.display||s,c=w.css(e,"display"),ue([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===w.css(e,"float")&&(l||(u.done((function(){p.display=s})),null==s&&(c=p.display,s="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",u.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,m)l||(f?"hidden"in f&&(d=f.hidden):f=K.access(e,"fxshow",{display:s}),a&&(f.hidden=!d),d&&ue([e],!0),u.done((function(){for(i in d||ue([e]),K.remove(e,"fxshow"),m)w.style(e,i,m[i])}))),l=ut(d?f[i]:0,i,u),i in f||(f[i]=l.start,d&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),w.speed=function(e,t,n){var i=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||x(e)&&e,duration:e,easing:n&&t||t&&!x(t)&&t};return w.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in w.fx.speeds?i.duration=w.fx.speeds[i.duration]:i.duration=w.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){x(i.old)&&i.old.call(this),i.queue&&w.dequeue(this,i.queue)},i},w.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=w.isEmptyObject(e),a=w.speed(t,n,i),o=function(){var t=mt(this,w.extend({},e),a);(r||K.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",a=w.timers,o=K.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&lt.test(r)&&i(o[r]);for(r=a.length;r--;)a[r].elem!==this||null!=e&&a[r].queue!==e||(a[r].anim.stop(n),t=!1,a.splice(r,1));!t&&n||w.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],a=w.timers,o=i?i.length:0;for(n.finish=!0,w.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),w.each(["toggle","show","hide"],(function(e,t){var n=w.fn[t];w.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ht(t,!0),e,i,r)}})),w.each({slideDown:ht("show"),slideUp:ht("hide"),slideToggle:ht("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){w.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),at=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){ot||(ot=!0,st())},w.fx.stop=function(){ot=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(e,t){return e=w.fx&&w.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},function(){var e=v.createElement("input"),t=v.createElement("select").appendChild(v.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=t.selected,(e=v.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var pt,dt=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return G(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){w.removeAttr(this,e)}))}}),w.extend({attr:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?w.prop(e,t,n):(1===a&&w.isXMLDoc(e)||(r=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=w.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(I);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=dt[t]||w.find.attr;dt[t]=function(e,t,i){var r,a,o=t.toLowerCase();return i||(a=dt[o],dt[o]=r,r=null!=n(e,t,i)?o:null,dt[o]=a),r}}));var ft=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;function gt(e){return(e.match(I)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function _t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}w.fn.extend({prop:function(e,t){return G(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[w.propFix[e]||e]}))}}),w.extend({prop:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&w.isXMLDoc(e)||(t=w.propFix[t]||t,r=w.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(e){var t,n,i,r,a,o,q,l=0;if(x(e))return this.each((function(t){w(this).addClass(e.call(this,t,vt(this)))}));if((t=_t(e)).length)for(;n=this[l++];)if(r=vt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(o=0;a=t[o++];)i.indexOf(" "+a+" ")<0&&(i+=a+" ");r!==(q=gt(i))&&n.setAttribute("class",q)}return this},removeClass:function(e){var t,n,i,r,a,o,q,l=0;if(x(e))return this.each((function(t){w(this).removeClass(e.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=_t(e)).length)for(;n=this[l++];)if(r=vt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(o=0;a=t[o++];)for(;i.indexOf(" "+a+" ")>-1;)i=i.replace(" "+a+" "," ");r!==(q=gt(i))&&n.setAttribute("class",q)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):x(e)?this.each((function(n){w(this).toggleClass(e.call(this,n,vt(this),t),t)})):this.each((function(){var t,r,a,o;if(i)for(r=0,a=w(this),o=_t(e);t=o[r++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=vt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+gt(vt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;w.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=x(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,w(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=w.map(r,(function(e){return null==e?"":e+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=w.valHooks[r.type]||w.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(yt,""):null==n?"":n:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:gt(w.text(e))}},select:{get:function(e){var t,n,i,r=e.options,a=e.selectedIndex,o="select-one"===e.type,q=o?null:[],l=o?a+1:r.length;for(i=a<0?l:o?a:0;i<l;i++)if(((n=r[i]).selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=w(n).val(),o)return t;q.push(t)}return q},set:function(e,t){for(var n,i,r=e.options,a=w.makeArray(t),o=r.length;o--;)((i=r[o]).selected=w.inArray(w.valHooks.option.get(i),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},f.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(e,t,i,r){var a,o,q,l,s,c,h,u,p=[i||v],d=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(o=u=q=i=i||v,3!==i.nodeType&&8!==i.nodeType&&!bt.test(d+w.event.triggered)&&(d.indexOf(".")>-1&&(f=d.split("."),d=f.shift(),f.sort()),s=d.indexOf(":")<0&&"on"+d,(e=e[w.expando]?e:new w.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:w.makeArray(t,[e]),h=w.event.special[d]||{},r||!h.trigger||!1!==h.trigger.apply(i,t))){if(!r&&!h.noBubble&&!g(i)){for(l=h.delegateType||d,bt.test(l+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),q=o;q===(i.ownerDocument||v)&&p.push(q.defaultView||q.parentWindow||n)}for(a=0;(o=p[a++])&&!e.isPropagationStopped();)u=o,e.type=a>1?l:h.bindType||d,(c=(K.get(o,"events")||Object.create(null))[e.type]&&K.get(o,"handle"))&&c.apply(o,t),(c=s&&o[s])&&c.apply&&J(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!J(i)||s&&x(i[d])&&!g(i)&&((q=i[s])&&(i[s]=null),w.event.triggered=d,e.isPropagationStopped()&&u.addEventListener(d,wt),i[d](),e.isPropagationStopped()&&u.removeEventListener(d,wt),w.event.triggered=void 0,q&&(i[s]=q)),e.result}},simulate:function(e,t,n){var i=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(i,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each((function(){w.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),f.focusin||w.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=K.access(i,t);r||i.addEventListener(e,n,!0),K.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=K.access(i,t)-1;r?K.access(i,t,r):(i.removeEventListener(e,n,!0),K.remove(i,t))}}}));var Mt=n.location,St={guid:Date.now()},Tt=/\?/;w.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+e),t};var Et=/\[\]$/,zt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;function Ct(e,t,n,i){var r;if(Array.isArray(t))w.each(t,(function(t,r){n||Et.test(e)?i(e,r):Ct(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==b(t))i(e,t);else for(r in t)Ct(e+"["+r+"]",t[r],n,i)}w.param=function(e,t){var n,i=[],r=function(e,t){var n=x(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,(function(){r(this.name,this.value)}));else for(n in e)Ct(n,e[n],t,r);return i.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&Lt.test(this.nodeName)&&!At.test(e)&&(this.checked||!de.test(e))})).map((function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,(function(e){return{name:t.name,value:e.replace(zt,"\r\n")}})):{name:t.name,value:n.replace(zt,"\r\n")}})).get()}});var Rt=/%20/g,Pt=/#.*$/,Ot=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Dt=/^(?:GET|HEAD)$/,It=/^\/\//,kt={},Ut={},Bt="*/".concat("*"),Ft=v.createElement("a");function jt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,a=t.toLowerCase().match(I)||[];if(x(n))for(;i=a[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ht(e,t,n,i){var r={},a=e===Ut;function o(q){var l;return r[q]=!0,w.each(e[q]||[],(function(e,q){var s=q(t,n,i);return"string"!=typeof s||a||r[s]?a?!(l=s):void 0:(t.dataTypes.unshift(s),o(s),!1)})),l}return o(t.dataTypes[0])||!r["*"]&&o("*")}function Gt(e,t){var n,i,r=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&w.extend(!0,e,i),e}Ft.href=Mt.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Gt(Gt(e,w.ajaxSettings),t):Gt(w.ajaxSettings,e)},ajaxPrefilter:jt(kt),ajaxTransport:jt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,a,o,q,l,s,c,h,u,m=w.ajaxSetup({},t),p=m.context||m,d=m.context&&(p.nodeType||p.jquery)?w(p):w.event,f=w.Deferred(),x=w.Callbacks("once memory"),g=m.statusCode||{},_={},y={},b="canceled",M={readyState:0,getResponseHeader:function(e){var t;if(s){if(!o)for(o={};t=Nt.exec(a);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return s?a:null},setRequestHeader:function(e,t){return null==s&&(e=y[e.toLowerCase()]=y[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==s&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(s)M.always(e[M.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||b;return i&&i.abort(t),S(0,t),this}};if(f.promise(M),m.url=((e||m.url||Mt.href)+"").replace(It,Mt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(I)||[""],null==m.crossDomain){l=v.createElement("a");try{l.href=m.url,l.href=l.href,m.crossDomain=Ft.protocol+"//"+Ft.host!=l.protocol+"//"+l.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=w.param(m.data,m.traditional)),Ht(kt,m,t,M),s)return M;for(h in(c=w.event&&m.global)&&0==w.active++&&w.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Dt.test(m.type),r=m.url.replace(Pt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Rt,"+")):(u=m.url.slice(r.length),m.data&&(m.processData||"string"==typeof m.data)&&(r+=(Tt.test(r)?"&":"?")+m.data,delete m.data),!1===m.cache&&(r=r.replace(Ot,"$1"),u=(Tt.test(r)?"&":"?")+"_="+St.guid+++u),m.url=r+u),m.ifModified&&(w.lastModified[r]&&M.setRequestHeader("If-Modified-Since",w.lastModified[r]),w.etag[r]&&M.setRequestHeader("If-None-Match",w.etag[r])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&M.setRequestHeader("Content-Type",m.contentType),M.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Bt+"; q=0.01":""):m.accepts["*"]),m.headers)M.setRequestHeader(h,m.headers[h]);if(m.beforeSend&&(!1===m.beforeSend.call(p,M,m)||s))return M.abort();if(b="abort",x.add(m.complete),M.done(m.success),M.fail(m.error),i=Ht(Ut,m,t,M)){if(M.readyState=1,c&&d.trigger("ajaxSend",[M,m]),s)return M;m.async&&m.timeout>0&&(q=n.setTimeout((function(){M.abort("timeout")}),m.timeout));try{s=!1,i.send(_,S)}catch(e){if(s)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,o,l){var h,u,v,_,y,b=t;s||(s=!0,q&&n.clearTimeout(q),i=void 0,a=l||"",M.readyState=e>0?4:0,h=e>=200&&e<300||304===e,o&&(_=function(e,t,n){for(var i,r,a,o,q=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in q)if(q[r]&&q[r].test(i)){l.unshift(r);break}if(l[0]in n)a=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){a=r;break}o||(o=r)}a=a||o}if(a)return a!==l[0]&&l.unshift(a),n[a]}(m,M,o)),!h&&w.inArray("script",m.dataTypes)>-1&&(m.converters["text script"]=function(){}),_=function(e,t,n,i){var r,a,o,q,l,s={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)s[o.toLowerCase()]=e.converters[o];for(a=c.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=c.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=s[l+" "+a]||s["* "+a]))for(r in s)if((q=r.split(" "))[1]===a&&(o=s[l+" "+q[0]]||s["* "+q[0]])){!0===o?o=s[r]:!0!==s[r]&&(a=q[0],c.unshift(q[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(m,_,M,h),h?(m.ifModified&&((y=M.getResponseHeader("Last-Modified"))&&(w.lastModified[r]=y),(y=M.getResponseHeader("etag"))&&(w.etag[r]=y)),204===e||"HEAD"===m.type?b="nocontent":304===e?b="notmodified":(b=_.state,u=_.data,h=!(v=_.error))):(v=b,!e&&b||(b="error",e<0&&(e=0))),M.status=e,M.statusText=(t||b)+"",h?f.resolveWith(p,[u,b,M]):f.rejectWith(p,[M,b,v]),M.statusCode(g),g=void 0,c&&d.trigger(h?"ajaxSuccess":"ajaxError",[M,m,h?u:v]),x.fireWith(p,[M,b]),c&&(d.trigger("ajaxComplete",[M,m]),--w.active||w.event.trigger("ajaxStop")))}return M},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],(function(e,t){w[t]=function(e,n,i,r){return x(n)&&(r=r||i,i=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:r,data:n,success:i},w.isPlainObject(e)&&e))}})),w.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),w._evalUrl=function(e,t,n){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){w.globalEval(e,t,n)}})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(x(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return x(e)?this.each((function(t){w(this).wrapInner(e.call(this,t))})):this.each((function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=x(e);return this.each((function(n){w(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Wt=w.ajaxSettings.xhr();f.cors=!!Wt&&"withCredentials"in Wt,f.ajax=Wt=!!Wt,w.ajaxTransport((function(e){var t,i;if(f.cors||Wt&&!e.crossDomain)return{send:function(r,a){var o,q=e.xhr();if(q.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)q[o]=e.xhrFields[o];for(o in e.mimeType&&q.overrideMimeType&&q.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)q.setRequestHeader(o,r[o]);t=function(e){return function(){t&&(t=i=q.onload=q.onerror=q.onabort=q.ontimeout=q.onreadystatechange=null,"abort"===e?q.abort():"error"===e?"number"!=typeof q.status?a(0,"error"):a(q.status,q.statusText):a(Vt[q.status]||q.status,q.statusText,"text"!==(q.responseType||"text")||"string"!=typeof q.responseText?{binary:q.response}:{text:q.responseText},q.getAllResponseHeaders()))}},q.onload=t(),i=q.onerror=q.ontimeout=t("error"),void 0!==q.onabort?q.onabort=i:q.onreadystatechange=function(){4===q.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{q.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),w.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),w.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=w("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),v.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Yt=[],Jt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+St.guid++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",(function(e,t,i){var r,a,o,q=!1!==e.jsonp&&(Jt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jt.test(e.data)&&"data");if(q||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=x(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,q?e[q]=e[q].replace(Jt,"$1"+r):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||w.error(r+" was not called"),o[0]},e.dataTypes[0]="json",a=n[r],n[r]=function(){o=arguments},i.always((function(){void 0===a?w(n).removeProp(r):n[r]=a,e[r]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(r)),o&&x(a)&&a(o[0]),o=a=void 0})),"script"})),f.createHTMLDocument=((Xt=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),w.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(f.createHTMLDocument?((i=(t=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,t.head.appendChild(i)):t=v),a=!n&&[],(r=L.exec(e))?[t.createElement(r[1])]:(r=be([e],t,a),a&&a.length&&w(a).remove(),w.merge([],r.childNodes)));var i,r,a},w.fn.load=function(e,t,n){var i,r,a,o=this,q=e.indexOf(" ");return q>-1&&(i=gt(e.slice(q)),e=e.slice(0,q)),x(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&w.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){a=arguments,o.html(i?w("<div>").append(w.parseHTML(e)).find(i):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,a||[e.responseText,t,e])}))}),this},w.expr.pseudos.animated=function(e){return w.grep(w.timers,(function(t){return e===t.elem})).length},w.offset={setOffset:function(e,t,n){var i,r,a,o,q,l,s=w.css(e,"position"),c=w(e),h={};"static"===s&&(e.style.position="relative"),q=c.offset(),a=w.css(e,"top"),l=w.css(e,"left"),("absolute"===s||"fixed"===s)&&(a+l).indexOf("auto")>-1?(o=(i=c.position()).top,r=i.left):(o=parseFloat(a)||0,r=parseFloat(l)||0),x(t)&&(t=t.call(e,n,w.extend({},q))),null!=t.top&&(h.top=t.top-q.top+o),null!=t.left&&(h.left=t.left-q.left+r),"using"in t?t.using.call(e,h):("number"==typeof h.top&&(h.top+="px"),"number"==typeof h.left&&(h.left+="px"),c.css(h))}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){w.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===w.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),r.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-w.css(i,"marginTop",!0),left:t.left-r.left-w.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||ae}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;w.fn[e]=function(i){return G(this,(function(e,i,r){var a;if(g(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===r)return a?a[t]:e[i];a?a.scrollTo(n?a.pageXOffset:r,n?r:a.pageYOffset):e[i]=r}),e,i,arguments.length)}})),w.each(["top","left"],(function(e,t){w.cssHooks[t]=We(f.pixelPosition,(function(e,n){if(n)return n=Ve(e,t),Fe.test(n)?w(e).position()[t]+"px":n}))})),w.each({Height:"height",Width:"width"},(function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){w.fn[i]=function(r,a){var o=arguments.length&&(n||"boolean"!=typeof r),q=n||(!0===r||!0===a?"margin":"border");return G(this,(function(t,n,r){var a;return g(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===r?w.css(t,n,q):w.style(t,n,r,q)}),t,o?r:void 0,o)}}))})),w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){w.fn[t]=function(e){return this.on(t,e)}})),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),x(e))return i=q.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(q.call(arguments)))}).guid=e.guid=e.guid||w.guid++,r},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=A,w.isFunction=x,w.isWindow=g,w.camelCase=Y,w.type=b,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},w.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},void 0===(i=function(){return w}.apply(t,[]))||(e.exports=i);var Kt=n.jQuery,$t=n.$;return w.noConflict=function(e){return n.$===w&&(n.$=$t),e&&n.jQuery===w&&(n.jQuery=Kt),w},void 0===r&&(n.jQuery=n.$=w),w}))},function(e,t,n){"use strict";t.a={playerSettings:{id:"",x:0,y:0,isMovingX:!1,isMovingY:!1,nickname:"noname"},visibleArea:{}}},function(e,t,n){"use strict";var i=n(0),r=n(2);class a{constructor(e){this.window=e,this.screenWidth=e.innerWidth,this.screenHeight=e.innerHeight,this.onResizeCallbacks=[],e.addEventListener("resize",this.resize.bind(this))}addOnResize(e){this.onResizeCallbacks.push(e)}resize(){this.screenWidth=this.window.innerWidth,this.screenHeight=this.window.innerHeight,this.onResizeCallbacks.forEach((function(e){e.call()}))}}let o=!1;var q={getInstance:e=>o||(o=new a(e))};t.a=new class{constructor(e){this.window=e,this._sizer=q.getInstance(e),this._updateCallbacks=[]}get playground(){return this._renderer.domElement}initGraph(){this.initRenderer(),this.initCamera(),this.initOnResize(),this.initScene(),this.window.document.body.appendChild(this.playground)}initScene(){this._scene=new i.j}initOnResize(){this._sizer.addOnResize(()=>{this.playground.width=this._sizer.screenWidth,this.playground.height=this._sizer.screenHeight,this._renderer.setSize(this._sizer.screenWidth,this._sizer.screenHeight),this._camera.aspect=this._sizer.screenWidth/this._sizer.screenHeight,this._camera.updateProjectionMatrix()})}initRenderer(){this._renderer=new i.l({antialias:!0}),this._renderer.setClearColor(16774886),this._renderer.setSize(this._sizer.screenWidth,this._sizer.screenHeight),this._renderer.shadowMap.enabled=!0}initCamera(){this._camera=new i.h(35,this._sizer.screenWidth/this._sizer.screenHeight,.1,5e3),this._camera.position.z=175}addDynamic(e){this._scene.add(e.sceneObject),this._updateCallbacks.push(e.onSceneUpdate)}addStatic(e){this._scene.add(e)}update(){this._camera.position.x=r.a.playerSettings.x,this._camera.position.y=r.a.playerSettings.y,this._updateCallbacks.forEach((function(e){e.call()})),this._renderer.render(this._scene,this._camera)}remove(e){this._scene.remove(e)}}(window)},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=i.sources.map((function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"}));return[n].concat(a).concat([r]).join("\n")}var o;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(i[a]=!0)}for(r=0;r<e.length;r++){var o=e[r];"number"==typeof o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){var i,r,a={},o=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),q=function(e,t){return t?t.querySelector(e):document.querySelector(e)},l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var i=q.call(this,e,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),s=null,c=0,h=[],u=n(20);function m(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=a[i.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](i.parts[o]);for(;o<i.parts.length;o++)r.parts.push(v(i.parts[o],t))}else{var q=[];for(o=0;o<i.parts.length;o++)q.push(v(i.parts[o],t));a[i.id]={id:i.id,refs:1,parts:q}}}}function p(e,t){for(var n=[],i={},r=0;r<e.length;r++){var a=e[r],o=t.base?a[0]+t.base:a[0],q={css:a[1],media:a[2],sourceMap:a[3]};i[o]?i[o].parts.push(q):n.push(i[o]={id:o,parts:[q]})}return n}function d(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=h[h.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),h.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertAt.before,n);n.insertBefore(t,r)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=h.indexOf(e);t>=0&&h.splice(t,1)}function x(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return n.nc}();i&&(e.attrs.nonce=i)}return g(t,e.attrs),d(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function v(e,t){var n,i,r,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var o=c++;n=s||(s=x(t)),i=b.bind(null,n,o,!1),r=b.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),d(e,t),t}(t),i=M.bind(null,n,t),r=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=x(t),i=w.bind(null,n),r=function(){f(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return m(n,t),function(e){for(var i=[],r=0;r<n.length;r++){var o=n[r];(q=a[o.id]).refs--,i.push(q)}e&&m(p(e,t),t);for(r=0;r<i.length;r++){var q;if(0===(q=i[r]).refs){for(var l=0;l<q.parts.length;l++)q.parts[l]();delete a[q.id]}}}};var _,y=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function b(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var a=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function w(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function M(e,t,n){var i=n.css,r=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||a)&&(i=u(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([i],{type:"text/css"}),q=e.href;e.href=URL.createObjectURL(o),q&&URL.revokeObjectURL(q)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));n(18);var i=n(1),r=n.n(i),a=(n(21),n(23),n(0)),o=(n(25),n(3)),q=n(12),l=n(7);const s=n(2).a.playerSettings;class c extends l.a{get onSceneUpdate(){return()=>{this.position={x:s.x,y:s.y}}}}var h=function(){return r()("<button>",{text:"Play!",class:"play-button",click:function(){const e=r()(".game-menu-area");e.hide();try{!function(e){q.a.connectToServer(window.document,e),o.a.initGraph();const t=new c(null,null,e);o.a.addDynamic(t);const n=new a.a(150);o.a.addStatic(n);const i=new a.e(new a.i(150,150,150,150),new a.f({color:8684420,wireframe:!0}));o.a.addStatic(i),function e(){o.a.update(),requestAnimationFrame(e)}()}((r()("#nickname-field-input").val()||"noname").slice(0,32))}catch(t){e.show()}}})};let u;function m(){return u||(u=r()("<div>",{class:"game-menu-area",html:r()("<div>",{class:"game-menu",html:[r()("<div>",{class:"game-title",text:"Zorg"}),r()("<div>",{class:"nickname-input-wrapper",html:r()("<input>",{id:"nickname-field-input",class:"nickname-field",type:"text",placeholder:"nickname",onload:function(){setTimeout(()=>r()(this).focus(),200)}})}),h()]})}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return q}));var i=n(0),r=n(3);var a=n(16),o={get ubuntuBold(){return(new i.c).parse(a)}};class q extends class{constructor(e){this._sceneObject=e}get sceneObject(){return this._sceneObject}get onSceneUpdate(){return function(){}}destroy(){r.a.remove(this._sceneObject)}}{constructor(e,t,n){super(q.buildSceneObject(n)),e&&(this.id=e),this.name=n||"noname",t&&(this.position=t)}get position(){return this._sceneObject.position}set position(e){this._sceneObject.position.x=e.x,this._sceneObject.position.y=e.y}get rotation(){return this._sceneObject.rotation}static buildSceneObject(e){let t=new i.d,n=new i.b(4,4,4),r=new i.g({color:16056316}),a=new i.g({color:1024});const q=new i.k(e,{font:o.ubuntuBold,size:2,height:0});let l=new i.e(q,a);return l.scale.set(1,1,1),l.position.z=2,l.position.y=2,l.position.x=2,t.add(l),t.add(new i.e(n,r)),t}}},function(e,t,n){"use strict";var i=n(2),r=n(7);const a=i.a.visibleArea;class o extends r.a{get onSceneUpdate(){return()=>{a[this.id]||this.destroy()}}}var q=n(3);const l=i.a.playerSettings,s=i.a.visibleArea;t.a={setPosition(e,t){l.id!==e?(s[e]=s[e]||{}).position=t:function(e){l.x=e.x,l.y=e.y}(t)},spawnNewUser({id:e,coordinates:t,nickname:n}){const i=new o(e,t,n);s[e]=i,q.a.addDynamic(i)},dismissUser(e){delete s[e]}}},function(e,t){var n,i,r=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function q(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(e){i=o}}();var l,s=[],c=!1,h=-1;function u(){c&&l&&(c=!1,l.length?s=l.concat(s):h=-1,s.length&&m())}function m(){if(!c){var e=q(u);c=!0;for(var t=s.length;t;){for(l=s,s=[];++h<t;)l&&l[h].run();h=-1,t=s.length}l=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function d(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new p(e,t)),1!==s.length||c||q(m)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=d,r.addListener=d,r.once=d,r.off=d,r.removeListener=d,r.removeAllListeners=d,r.emit=d,r.prependListener=d,r.prependOnceListener=d,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new a(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(27),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(11))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e){var i=n(13),r=n(17),a=n(2),o=n(15),q=n(8);const l=a.a.playerSettings;function s(e){console.log("spawning new user:",e),q.a.spawnNewUser(e)}function c(e){q.a.setPosition(e.id,e.coordinates)}const h={connectToServer:function(t,n){this._document=t;const i=e.env.WS_URL||"ws://18.184.23.62:8080/conn";this._server=new r.a(i).userData({nickname:n}).onGreeting(this.onGreeting.bind(this)).onMessage(this.onMessage.bind(this)).onClose(this.onClose.bind(this)).connect()},onGreeting(e){console.log(e);const t=new o.a(e);this.keyListener=new i.a(this._document,this._server),l.id=t.id,c(t),t.users.forEach(s)},onMessage:function(e){const t=JSON.parse(e.data);console.log(t);const n=t.user;var i;n&&(t.greeting&&s(n),n.positionChange&&c(n),n.leavingGameEvent&&(i=n.id,q.a.dismissUser(i)))},onClose(){this.keyListener&&this.keyListener.shutDown()}};t.a=h}).call(this,n(9))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const i={};class r{constructor(e,t){this._document=e,this._server=t,this.initKeyDown(),this.initKeyUp()}_onKeyDown({keyCode:e}){i[e]||(i[e]=e,function(e,t){switch(e){case 38:case 87:return t.sendPlayerMoveNorth;case 40:case 83:return t.sendPlayerMoveSouth;case 37:case 65:return t.sendPlayerMoveWest;case 39:case 68:return t.sendPlayerMoveEast;default:return new Function}}(e,this._server).call(this._server))}_onKeyUp({keyCode:e}){delete i[e],function(e,t){switch(e){case 38:case 87:return t.sendPlayerStopMoveNorth;case 40:case 83:return t.sendPlayerStopMoveSouth;case 37:case 65:return t.sendPlayerStopMoveWest;case 39:case 68:return t.sendPlayerStopMoveEast;default:return new Function}}(e,this._server).call(this._server)}initKeyDown(){this._document.addEventListener("keydown",this._onKeyDown.bind(this))}initKeyUp(){this._document.addEventListener("keyup",this._onKeyUp.bind(this))}shutDown(){this._document.removeEventListener("keydown",this._onKeyDown.bind(this)),this._document.removeEventListener("keyup",this._onKeyUp.bind(this))}}},function(e,t,n){(function(t,n){e.exports=function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=8)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="swal-button";t.CLASS_NAMES={MODAL:"swal-modal",OVERLAY:"swal-overlay",SHOW_MODAL:"swal-overlay--show-modal",MODAL_TITLE:"swal-title",MODAL_TEXT:"swal-text",ICON:"swal-icon",ICON_CUSTOM:"swal-icon--custom",CONTENT:"swal-content",FOOTER:"swal-footer",BUTTON_CONTAINER:"swal-button-container",BUTTON:i,CONFIRM_BUTTON:i+"--confirm",CANCEL_BUTTON:i+"--cancel",DANGER_BUTTON:i+"--danger",BUTTON_LOADING:i+"--loading",BUTTON_LOADER:i+"__loader"},t.default=t.CLASS_NAMES},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getNode=function(e){var t="."+e;return document.querySelector(t)},t.stringToNode=function(e){var t=document.createElement("div");return t.innerHTML=e.trim(),t.firstChild},t.insertAfter=function(e,t){var n=t.nextSibling;t.parentNode.insertBefore(e,n)},t.removeNode=function(e){e.parentElement.removeChild(e)},t.throwErr=function(e){throw"SweetAlert: "+(e=e.replace(/ +(?= )/g,"")).trim()},t.isPlainObject=function(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype},t.ordinalSuffixOf=function(e){var t=e%10,n=e%100;return 1===t&&11!==n?e+"st":2===t&&12!==n?e+"nd":3===t&&13!==n?e+"rd":e+"th"}},function(e,t,n){"use strict";function i(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),i(n(25));var r=n(26);t.overlayMarkup=r.default,i(n(27)),i(n(28)),i(n(29));var a=n(0),o=a.default.MODAL_TITLE,q=a.default.MODAL_TEXT,l=a.default.ICON,s=a.default.FOOTER;t.iconMarkup='\n  <div class="'+l+'"></div>',t.titleMarkup='\n  <div class="'+o+'"></div>\n',t.textMarkup='\n  <div class="'+q+'"></div>',t.footerMarkup='\n  <div class="'+s+'"></div>\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1);t.CONFIRM_KEY="confirm",t.CANCEL_KEY="cancel";var r={visible:!0,text:null,value:null,className:"",closeModal:!0},a=Object.assign({},r,{visible:!1,text:"Cancel",value:null}),o=Object.assign({},r,{text:"OK",value:!0});t.defaultButtonList={cancel:a,confirm:o};var q=function(e){switch(e){case t.CONFIRM_KEY:return o;case t.CANCEL_KEY:return a;default:var n=e.charAt(0).toUpperCase()+e.slice(1);return Object.assign({},r,{text:n,value:e})}},l=function(e,t){var n=q(e);return!0===t?Object.assign({},n,{visible:!0}):"string"==typeof t?Object.assign({},n,{visible:!0,text:t}):i.isPlainObject(t)?Object.assign({visible:!0},n,t):Object.assign({},n,{visible:!1})},s=function(e){var n={};switch(e.length){case 1:n[t.CANCEL_KEY]=Object.assign({},a,{visible:!1});break;case 2:n[t.CANCEL_KEY]=l(t.CANCEL_KEY,e[0]),n[t.CONFIRM_KEY]=l(t.CONFIRM_KEY,e[1]);break;default:i.throwErr("Invalid number of 'buttons' in array ("+e.length+").\n      If you want more than 2 buttons, you need to use an object!")}return n};t.getButtonListOpts=function(e){var n=t.defaultButtonList;return"string"==typeof e?n[t.CONFIRM_KEY]=l(t.CONFIRM_KEY,e):Array.isArray(e)?n=s(e):i.isPlainObject(e)?n=function(e){for(var t={},n=0,i=Object.keys(e);n<i.length;n++){var r=i[n],o=e[r],q=l(r,o);t[r]=q}return t.cancel||(t.cancel=a),t}(e):!0===e?n=s([!0,!0]):!1===e?n=s([!1,!1]):void 0===e&&(n=t.defaultButtonList),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(2),a=n(0),o=a.default.MODAL,q=a.default.OVERLAY,l=n(30),s=n(31),c=n(32),h=n(33);t.injectElIntoModal=function(e){var t=i.getNode(o),n=i.stringToNode(e);return t.appendChild(n),n};var u=function(e,t){!function(e){e.className=o,e.textContent=""}(e);var n=t.className;n&&e.classList.add(n)};t.initModalContent=function(e){var t=i.getNode(o);u(t,e),l.default(e.icon),s.initTitle(e.title),s.initText(e.text),h.default(e.content),c.default(e.buttons,e.dangerMode)},t.default=function(){var e=i.getNode(q),t=i.stringToNode(r.modalMarkup);e.appendChild(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),r={isOpen:!1,promise:null,actions:{},timer:null},a=Object.assign({},r);t.resetState=function(){a=Object.assign({},r)},t.setActionValue=function(e){if("string"==typeof e)return o(i.CONFIRM_KEY,e);for(var t in e)o(t,e[t])};var o=function(e,t){a.actions[e]||(a.actions[e]={}),Object.assign(a.actions[e],{value:t})};t.setActionOptionsFor=function(e,t){var n=(void 0===t?{}:t).closeModal,i=void 0===n||n;Object.assign(a.actions[e],{closeModal:i})},t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(3),a=n(0),o=a.default.OVERLAY,q=a.default.SHOW_MODAL,l=a.default.BUTTON,s=a.default.BUTTON_LOADING,c=n(5);t.openModal=function(){i.getNode(o).classList.add(q),c.default.isOpen=!0},t.onAction=function(e){void 0===e&&(e=r.CANCEL_KEY);var t=c.default.actions[e],n=t.value;if(!1===t.closeModal){var a=l+"--"+e;i.getNode(a).classList.add(s)}else i.getNode(o).classList.remove(q),c.default.isOpen=!1;c.default.promise.resolve(n)},t.getState=function(){var e=Object.assign({},c.default);return delete e.promise,delete e.timer,e},t.stopLoading=function(){for(var e=document.querySelectorAll("."+l),t=0;t<e.length;t++)e[t].classList.remove(s)}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){e.exports=t.sweetAlert=n(9)}).call(t,n(7))},function(e,t,n){(function(t){e.exports=t.swal=n(10)}).call(t,n(7))},function(e,t,n){"undefined"!=typeof window&&n(11),n(16);var i=n(23).default;e.exports=i},function(e,t,n){var i=n(12);"string"==typeof i&&(i=[[e.i,i,""]]);var r={insertAt:"top",transform:void 0};n(14)(i,r),i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(13)(void 0)).push([e.i,'.swal-icon--error{border-color:#f27474;-webkit-animation:animateErrorIcon .5s;animation:animateErrorIcon .5s}.swal-icon--error__x-mark{position:relative;display:block;-webkit-animation:animateXMark .5s;animation:animateXMark .5s}.swal-icon--error__line{position:absolute;height:5px;width:47px;background-color:#f27474;display:block;top:37px;border-radius:2px}.swal-icon--error__line--left{-webkit-transform:rotate(45deg);transform:rotate(45deg);left:17px}.swal-icon--error__line--right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg);right:16px}@-webkit-keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}@keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}.swal-icon--warning{border-color:#f8bb86;-webkit-animation:pulseWarning .75s infinite alternate;animation:pulseWarning .75s infinite alternate}.swal-icon--warning__body{width:5px;height:47px;top:10px;border-radius:2px;margin-left:-2px}.swal-icon--warning__body,.swal-icon--warning__dot{position:absolute;left:50%;background-color:#f8bb86}.swal-icon--warning__dot{width:7px;height:7px;border-radius:50%;margin-left:-4px;bottom:-11px}@-webkit-keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}@keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}.swal-icon--success{border-color:#a5dc86}.swal-icon--success:after,.swal-icon--success:before{content:"";border-radius:50%;position:absolute;width:60px;height:120px;background:#fff;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal-icon--success:before{border-radius:120px 0 0 120px;top:-7px;left:-33px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:60px 60px;transform-origin:60px 60px}.swal-icon--success:after{border-radius:0 120px 120px 0;top:-11px;left:30px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 60px;transform-origin:0 60px;-webkit-animation:rotatePlaceholder 4.25s ease-in;animation:rotatePlaceholder 4.25s ease-in}.swal-icon--success__ring{width:80px;height:80px;border:4px solid hsla(98,55%,69%,.2);border-radius:50%;box-sizing:content-box;position:absolute;left:-4px;top:-4px;z-index:2}.swal-icon--success__hide-corners{width:5px;height:90px;background-color:#fff;padding:1px;position:absolute;left:28px;top:8px;z-index:1;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal-icon--success__line{height:5px;background-color:#a5dc86;display:block;border-radius:2px;position:absolute;z-index:2}.swal-icon--success__line--tip{width:25px;left:14px;top:46px;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-animation:animateSuccessTip .75s;animation:animateSuccessTip .75s}.swal-icon--success__line--long{width:47px;right:8px;top:38px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-animation:animateSuccessLong .75s;animation:animateSuccessLong .75s}@-webkit-keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}.swal-icon--info{border-color:#c9dae1}.swal-icon--info:before{width:5px;height:29px;bottom:17px;border-radius:2px;margin-left:-2px}.swal-icon--info:after,.swal-icon--info:before{content:"";position:absolute;left:50%;background-color:#c9dae1}.swal-icon--info:after{width:7px;height:7px;border-radius:50%;margin-left:-3px;top:19px}.swal-icon{width:80px;height:80px;border-width:4px;border-style:solid;border-radius:50%;padding:0;position:relative;box-sizing:content-box;margin:20px auto}.swal-icon:first-child{margin-top:32px}.swal-icon--custom{width:auto;height:auto;max-width:100%;border:none;border-radius:0}.swal-icon img{max-width:100%;max-height:100%}.swal-title{color:rgba(0,0,0,.65);font-weight:600;text-transform:none;position:relative;display:block;padding:13px 16px;font-size:27px;line-height:normal;text-align:center;margin-bottom:0}.swal-title:first-child{margin-top:26px}.swal-title:not(:first-child){padding-bottom:0}.swal-title:not(:last-child){margin-bottom:13px}.swal-text{font-size:16px;position:relative;float:none;line-height:normal;vertical-align:top;text-align:left;display:inline-block;margin:0;padding:0 10px;font-weight:400;color:rgba(0,0,0,.64);max-width:calc(100% - 20px);overflow-wrap:break-word;box-sizing:border-box}.swal-text:first-child{margin-top:45px}.swal-text:last-child{margin-bottom:45px}.swal-footer{text-align:right;padding-top:13px;margin-top:13px;padding:13px 16px;border-radius:inherit;border-top-left-radius:0;border-top-right-radius:0}.swal-button-container{margin:5px;display:inline-block;position:relative}.swal-button{background-color:#7cd1f9;color:#fff;border:none;box-shadow:none;border-radius:5px;font-weight:600;font-size:14px;padding:10px 24px;margin:0;cursor:pointer}.swal-button:not([disabled]):hover{background-color:#78cbf2}.swal-button:active{background-color:#70bce0}.swal-button:focus{outline:none;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(43,114,165,.29)}.swal-button[disabled]{opacity:.5;cursor:default}.swal-button::-moz-focus-inner{border:0}.swal-button--cancel{color:#555;background-color:#efefef}.swal-button--cancel:not([disabled]):hover{background-color:#e8e8e8}.swal-button--cancel:active{background-color:#d7d7d7}.swal-button--cancel:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(116,136,150,.29)}.swal-button--danger{background-color:#e64942}.swal-button--danger:not([disabled]):hover{background-color:#df4740}.swal-button--danger:active{background-color:#cf423b}.swal-button--danger:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(165,43,43,.29)}.swal-content{padding:0 20px;margin-top:20px;font-size:medium}.swal-content:last-child{margin-bottom:20px}.swal-content__input,.swal-content__textarea{-webkit-appearance:none;background-color:#fff;border:none;font-size:14px;display:block;box-sizing:border-box;width:100%;border:1px solid rgba(0,0,0,.14);padding:10px 13px;border-radius:2px;transition:border-color .2s}.swal-content__input:focus,.swal-content__textarea:focus{outline:none;border-color:#6db8ff}.swal-content__textarea{resize:vertical}.swal-button--loading{color:transparent}.swal-button--loading~.swal-button__loader{opacity:1}.swal-button__loader{position:absolute;height:auto;width:43px;z-index:2;left:50%;top:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);text-align:center;pointer-events:none;opacity:0}.swal-button__loader div{display:inline-block;float:none;vertical-align:baseline;width:9px;height:9px;padding:0;border:none;margin:2px;opacity:.4;border-radius:7px;background-color:hsla(0,0%,100%,.9);transition:background .2s;-webkit-animation:swal-loading-anim 1s infinite;animation:swal-loading-anim 1s infinite}.swal-button__loader div:nth-child(3n+2){-webkit-animation-delay:.15s;animation-delay:.15s}.swal-button__loader div:nth-child(3n+3){-webkit-animation-delay:.3s;animation-delay:.3s}@-webkit-keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}@keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}.swal-overlay{position:fixed;top:0;bottom:0;left:0;right:0;text-align:center;font-size:0;overflow-y:auto;background-color:rgba(0,0,0,.4);z-index:10000;pointer-events:none;opacity:0;transition:opacity .3s}.swal-overlay:before{content:" ";display:inline-block;vertical-align:middle;height:100%}.swal-overlay--show-modal{opacity:1;pointer-events:auto}.swal-overlay--show-modal .swal-modal{opacity:1;pointer-events:auto;box-sizing:border-box;-webkit-animation:showSweetAlert .3s;animation:showSweetAlert .3s;will-change:transform}.swal-modal{width:478px;opacity:0;pointer-events:none;background-color:#fff;text-align:center;border-radius:5px;position:static;margin:20px auto;display:inline-block;vertical-align:middle;-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;z-index:10001;transition:opacity .2s,-webkit-transform .3s;transition:transform .3s,opacity .2s;transition:transform .3s,opacity .2s,-webkit-transform .3s}@media (max-width:500px){.swal-modal{width:calc(100% - 20px)}}@-webkit-keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}',""])},function(e,t){function n(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(i);return[n].concat(i.sources.map((function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"}))).concat([r]).join("\n")}return[n].join("\n")}e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=n(t,e);return t[2]?"@media "+t[2]+"{"+i+"}":i})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(i[a]=!0)}for(r=0;r<e.length;r++){var o=e[r];"number"==typeof o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){function i(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=p[i.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(c(i.parts[a],t))}else{var o=[];for(a=0;a<i.parts.length;a++)o.push(c(i.parts[a],t));p[i.id]={id:i.id,refs:1,parts:o}}}}function r(e,t){for(var n=[],i={},r=0;r<e.length;r++){var a=e[r],o=t.base?a[0]+t.base:a[0],q={css:a[1],media:a[2],sourceMap:a[3]};i[o]?i[o].parts.push(q):n.push(i[o]={id:o,parts:[q]})}return n}function a(e,t){var n=f(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=v[v.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),v.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function o(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=v.indexOf(e);t>=0&&v.splice(t,1)}function q(e){var t=document.createElement("style");return e.attrs.type="text/css",s(t,e.attrs),a(e,t),t}function l(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",s(t,e.attrs),a(e,t),t}function s(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function c(e,t){var n,i,r,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var s=g++;n=x||(x=q(t)),i=h.bind(null,n,s,!1),r=h.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=l(t),i=m.bind(null,n,t),r=function(){o(n),n.href&&URL.revokeObjectURL(n.href)}):(n=q(t),i=u.bind(null,n),r=function(){o(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}function h(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var a=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function u(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function m(e,t,n){var i=n.css,r=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||a)&&(i=_(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([i],{type:"text/css"}),q=e.href;e.href=URL.createObjectURL(o),q&&URL.revokeObjectURL(q)}var p={},d=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}((function(){return window&&document&&document.all&&!window.atob})),f=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}((function(e){return document.querySelector(e)})),x=null,g=0,v=[],_=n(15);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=d()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=r(e,t);return i(n,t),function(e){for(var a=[],o=0;o<n.length;o++){var q=n[o];(l=p[q.id]).refs--,a.push(l)}for(e&&i(r(e,t),t),o=0;o<a.length;o++){var l;if(0===(l=a[o]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete p[l.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,a=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(a)?e:(r=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},function(e,t,n){var i=n(17);"undefined"==typeof window||window.Promise||(window.Promise=i),n(21),String.prototype.includes||(String.prototype.includes=function(e,t){"use strict";return"number"!=typeof t&&(t=0),!(t+e.length>this.length)&&-1!==this.indexOf(e,t)}),Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e,t){if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),i=n.length>>>0;if(0===i)return!1;for(var r=0|t,a=Math.max(r>=0?r:i-Math.abs(r),0);a<i;){if(function(e,t){return e===t||"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}(n[a],e))return!0;a++}return!1}}),"undefined"!=typeof window&&[Element.prototype,CharacterData.prototype,DocumentType.prototype].forEach((function(e){e.hasOwnProperty("remove")||Object.defineProperty(e,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){this.parentNode.removeChild(this)}})}))},function(e,t,n){(function(t){!function(n){function i(){}function r(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],c(e,this)}function a(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,r._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var i;try{i=n(e._value)}catch(e){return void q(t.promise,e)}o(t.promise,i)}else(1===e._state?o:q)(t.promise,e._value)}))):e._deferreds.push(t)}function o(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof r)return e._state=3,e._value=t,void l(e);if("function"==typeof n)return void c(function(e,t){return function(){e.apply(t,arguments)}}(n,t),e)}e._state=1,e._value=t,l(e)}catch(t){q(e,t)}}function q(e,t){e._state=2,e._value=t,l(e)}function l(e){2===e._state&&0===e._deferreds.length&&r._immediateFn((function(){e._handled||r._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)a(e,e._deferreds[t]);e._deferreds=null}function s(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function c(e,t){var n=!1;try{e((function(e){n||(n=!0,o(t,e))}),(function(e){n||(n=!0,q(t,e))}))}catch(e){if(n)return;n=!0,q(t,e)}}var h=setTimeout;r.prototype.catch=function(e){return this.then(null,e)},r.prototype.then=function(e,t){var n=new this.constructor(i);return a(this,new s(e,t,n)),n},r.all=function(e){var t=Array.prototype.slice.call(e);return new r((function(e,n){function i(a,o){try{if(o&&("object"==typeof o||"function"==typeof o)){var q=o.then;if("function"==typeof q)return void q.call(o,(function(e){i(a,e)}),n)}t[a]=o,0==--r&&e(t)}catch(e){n(e)}}if(0===t.length)return e([]);for(var r=t.length,a=0;a<t.length;a++)i(a,t[a])}))},r.resolve=function(e){return e&&"object"==typeof e&&e.constructor===r?e:new r((function(t){t(e)}))},r.reject=function(e){return new r((function(t,n){n(e)}))},r.race=function(e){return new r((function(t,n){for(var i=0,r=e.length;i<r;i++)e[i].then(t,n)}))},r._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){h(e,0)},r._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},r._setImmediateFn=function(e){r._immediateFn=e},r._setUnhandledRejectionFn=function(e){r._unhandledRejectionFn=e},void 0!==e&&e.exports?e.exports=r:n.Promise||(n.Promise=r)}(this)}).call(t,n(18).setImmediate)},function(e,i,r){function a(e,t){this._id=e,this._clearFn=t}var o=Function.prototype.apply;i.setTimeout=function(){return new a(o.call(setTimeout,window,arguments),clearTimeout)},i.setInterval=function(){return new a(o.call(setInterval,window,arguments),clearInterval)},i.clearTimeout=i.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(window,this._id)},i.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},i.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},i._unrefActive=i.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(19),i.setImmediate=t,i.clearImmediate=n},function(e,t,n){(function(e,t){!function(e,n){"use strict";function i(e){delete q[e]}function r(e){if(l)setTimeout(r,0,e);else{var t=q[e];if(t){l=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{i(e),l=!1}}}}if(!e.setImmediate){var a,o=1,q={},l=!1,s=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,"[object process]"==={}.toString.call(e.process)?a=function(e){t.nextTick((function(){r(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&r(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),a=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){r(e.data)},a=function(t){e.port2.postMessage(t)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var e=s.documentElement;a=function(t){var n=s.createElement("script");n.onreadystatechange=function(){r(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():a=function(e){setTimeout(r,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return q[o]=i,a(o),o++},c.clearImmediate=i}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,n(7),n(20))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function r(e){if(s===setTimeout)return setTimeout(e,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}function a(){p&&u&&(p=!1,u.length?m=u.concat(m):d=-1,m.length&&o())}function o(){if(!p){var e=r(a);p=!0;for(var t=m.length;t;){for(u=m,m=[];++d<t;)u&&u[d].run();d=-1,t=m.length}u=null,p=!1,function(e){if(c===clearTimeout)return clearTimeout(e);if((c===i||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(e);try{c(e)}catch(t){try{return c.call(null,e)}catch(t){return c.call(this,e)}}}(e)}}function q(e,t){this.fun=e,this.array=t}function l(){}var s,c,h=e.exports={};!function(){try{s="function"==typeof setTimeout?setTimeout:n}catch(e){s=n}try{c="function"==typeof clearTimeout?clearTimeout:i}catch(e){c=i}}();var u,m=[],p=!1,d=-1;h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];m.push(new q(e,t)),1!==m.length||p||r(o)},q.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=l,h.addListener=l,h.once=l,h.off=l,h.removeListener=l,h.removeAllListeners=l,h.emit=l,h.prependListener=l,h.prependOnceListener=l,h.listeners=function(e){return[]},h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},function(e,t,n){"use strict";n(22).polyfill()},function(e,t,n){"use strict";function i(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var n=Object(e),i=1;i<arguments.length;i++){var r=arguments[i];if(null!=r)for(var a=Object.keys(Object(r)),o=0,q=a.length;o<q;o++){var l=a[o],s=Object.getOwnPropertyDescriptor(r,l);void 0!==s&&s.enumerable&&(n[l]=r[l])}}return n}e.exports={assign:i,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:i})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(24),r=n(6),a=n(5),o=n(36),q=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if("undefined"!=typeof window){var n=o.getOpts.apply(void 0,e);return new Promise((function(e,t){a.default.promise={resolve:e,reject:t},i.default(n),setTimeout((function(){r.openModal()}))}))}};q.close=r.onAction,q.getState=r.getState,q.setActionValue=a.setActionValue,q.stopLoading=r.stopLoading,q.setDefaults=o.setDefaults,t.default=q},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(0).default.MODAL,a=n(4),o=n(34),q=n(35),l=n(1);t.init=function(e){i.getNode(r)||(document.body||l.throwErr("You can only use SweetAlert AFTER the DOM has loaded!"),o.default(),a.default()),a.initModalContent(e),q.default(e)},t.default=t.init},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0).default.MODAL;t.modalMarkup='\n  <div class="'+i+'" role="dialog" aria-modal="true"></div>',t.default=t.modalMarkup},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i='<div \n    class="'+n(0).default.OVERLAY+'"\n    tabIndex="-1">\n  </div>';t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0).default.ICON;t.errorIconMarkup=function(){var e=i+"--error",t=e+"__line";return'\n    <div class="'+e+'__x-mark">\n      <span class="'+t+" "+t+'--left"></span>\n      <span class="'+t+" "+t+'--right"></span>\n    </div>\n  '},t.warningIconMarkup=function(){var e=i+"--warning";return'\n    <span class="'+e+'__body">\n      <span class="'+e+'__dot"></span>\n    </span>\n  '},t.successIconMarkup=function(){var e=i+"--success";return'\n    <span class="'+e+"__line "+e+'__line--long"></span>\n    <span class="'+e+"__line "+e+'__line--tip"></span>\n\n    <div class="'+e+'__ring"></div>\n    <div class="'+e+'__hide-corners"></div>\n  '}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0).default.CONTENT;t.contentMarkup='\n  <div class="'+i+'">\n\n  </div>\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),r=i.default.BUTTON_CONTAINER,a=i.default.BUTTON,o=i.default.BUTTON_LOADER;t.buttonMarkup='\n  <div class="'+r+'">\n\n    <button\n      class="'+a+'"\n    ></button>\n\n    <div class="'+o+'">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n\n  </div>\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(4),r=n(2),a=n(0),o=a.default.ICON,q=a.default.ICON_CUSTOM,l=["error","warning","success","info"],s={error:r.errorIconMarkup(),warning:r.warningIconMarkup(),success:r.successIconMarkup()};t.default=function(e){if(e){var t=i.injectElIntoModal(r.iconMarkup);l.includes(e)?function(e,t){var n=o+"--"+e;t.classList.add(n);var i=s[e];i&&(t.innerHTML=i)}(e,t):function(e,t){t.classList.add(q);var n=document.createElement("img");n.src=e,t.appendChild(n)}(e,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=n(4),a=function(e){navigator.userAgent.includes("AppleWebKit")&&(e.style.display="none",e.offsetHeight,e.style.display="")};t.initTitle=function(e){if(e){var t=r.injectElIntoModal(i.titleMarkup);t.textContent=e,a(t)}},t.initText=function(e){if(e){var t=document.createDocumentFragment();e.split("\n").forEach((function(e,n,i){t.appendChild(document.createTextNode(e)),n<i.length-1&&t.appendChild(document.createElement("br"))}));var n=r.injectElIntoModal(i.textMarkup);n.appendChild(t),a(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(4),a=n(0),o=a.default.BUTTON,q=a.default.DANGER_BUTTON,l=n(3),s=n(2),c=n(6),h=n(5),u=function(e,t,n){var r=t.text,a=t.value,u=t.className,m=t.closeModal,p=i.stringToNode(s.buttonMarkup),d=p.querySelector("."+o),f=o+"--"+e;d.classList.add(f),u&&(Array.isArray(u)?u:u.split(" ")).filter((function(e){return e.length>0})).forEach((function(e){d.classList.add(e)})),n&&e===l.CONFIRM_KEY&&d.classList.add(q),d.textContent=r;var x={};return x[e]=a,h.setActionValue(x),h.setActionOptionsFor(e,{closeModal:m}),d.addEventListener("click",(function(){return c.onAction(e)})),p};t.default=function(e,t){var n=r.injectElIntoModal(s.footerMarkup);for(var i in e){var a=e[i],o=u(i,a,t);a.visible&&n.appendChild(o)}0===n.children.length&&n.remove()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),r=n(4),a=n(2),o=n(5),q=n(6),l=n(0).default.CONTENT,s=function(e){e.addEventListener("input",(function(e){var t=e.target.value;o.setActionValue(t)})),e.addEventListener("keyup",(function(e){if("Enter"===e.key)return q.onAction(i.CONFIRM_KEY)})),setTimeout((function(){e.focus(),o.setActionValue("")}),0)};t.default=function(e){if(e){var t=r.injectElIntoModal(a.contentMarkup),n=e.element,i=e.attributes;"string"==typeof n?function(e,t,n){var i=document.createElement(t),r=l+"__"+t;for(var a in i.classList.add(r),n){var o=n[a];i[a]=o}"input"===t&&s(i),e.appendChild(i)}(t,n,i):t.appendChild(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(2);t.default=function(){var e=i.stringToNode(r.overlayMarkup);document.body.appendChild(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),r=n(6),a=n(1),o=n(3),q=n(0),l=q.default.MODAL,s=q.default.BUTTON,c=q.default.OVERLAY,h=function(e){if(i.default.isOpen)switch(e.key){case"Escape":return r.onAction(o.CANCEL_KEY)}},u=function(e){if(i.default.isOpen)switch(e.key){case"Tab":return function(e){e.preventDefault(),p()}(e)}},m=function(e){if(i.default.isOpen)return"Tab"===e.key&&e.shiftKey?function(e){e.preventDefault(),d()}(e):void 0},p=function(){var e=a.getNode(s);e&&(e.tabIndex=0,e.focus())},d=function(){var e=a.getNode(l).querySelectorAll("."+s),t=e[e.length-1];t&&t.focus()},f=function(){var e=a.getNode(l).querySelectorAll("."+s);e.length&&(function(e){e[e.length-1].addEventListener("keydown",u)}(e),function(e){e[0].addEventListener("keydown",m)}(e))},x=function(e){if(a.getNode(c)===e.target)return r.onAction(o.CANCEL_KEY)};t.default=function(e){e.closeOnEsc?document.addEventListener("keyup",h):document.removeEventListener("keyup",h),e.dangerMode?p():d(),f(),function(e){var t=a.getNode(c);t.removeEventListener("click",x),e&&t.addEventListener("click",x)}(e.closeOnClickOutside),function(e){i.default.timer&&clearTimeout(i.default.timer),e&&(i.default.timer=window.setTimeout((function(){return r.onAction(o.CANCEL_KEY)}),e))}(e.timer)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r=n(3),a=n(37),o=n(38),q={title:null,text:null,icon:null,buttons:r.defaultButtonList,content:null,className:null,closeOnClickOutside:!0,closeOnEsc:!0,dangerMode:!1,timer:null},l=Object.assign({},q);t.setDefaults=function(e){l=Object.assign({},q,e)};var s=function(e){var t=e&&e.button,n=e&&e.buttons;return void 0!==t&&void 0!==n&&i.throwErr("Cannot set both 'button' and 'buttons' options!"),void 0!==t?{confirm:t}:n},c=function(e){return i.ordinalSuffixOf(e+1)},h=function(e,t){i.throwErr(c(t)+" argument ('"+e+"') is invalid")},u=function(e,t){var n=e+1,r=t[n];i.isPlainObject(r)||void 0===r||i.throwErr("Expected "+c(n)+" argument ('"+r+"') to be a plain object")},m=function(e,t,n,r){var a=t instanceof Element;if("string"==typeof t){if(0===n)return{text:t};if(1===n)return{text:t,title:r[0]};if(2===n)return u(n,r),{icon:t};h(t,n)}else{if(a&&0===n)return u(n,r),{content:t};if(i.isPlainObject(t))return function(e,t){var n=e+1,r=t[n];void 0!==r&&i.throwErr("Unexpected "+c(n)+" argument ("+r+")")}(n,r),t;h(t,n)}};t.getOpts=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n={};e.forEach((function(t,i){var r=m(0,t,i,e);Object.assign(n,r)}));var i=s(n);n.buttons=r.getButtonListOpts(i),delete n.button,n.content=a.getContentOpts(n.content);var c=Object.assign({},q,l,n);return Object.keys(c).forEach((function(e){o.DEPRECATED_OPTS[e]&&o.logDeprecation(e)})),c}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),r={element:"input",attributes:{placeholder:""}};t.getContentOpts=function(e){return i.isPlainObject(e)?Object.assign({},e):e instanceof Element?{element:e}:"input"===e?r:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logDeprecation=function(e){var n=t.DEPRECATED_OPTS[e],i=n.onlyRename,r=n.replacement,a=n.subOption,o=n.link,q='SweetAlert warning: "'+e+'" option has been '+(i?"renamed":"deprecated")+".";r&&(q+=" Please use"+(a?' "'+a+'" in ':" ")+'"'+r+'" instead.');var l="https://sweetalert.js.org";q+=o?" More details: "+l+o:" More details: "+l+"/guides/#upgrading-from-1x",console.warn(q)},t.DEPRECATED_OPTS={type:{replacement:"icon",link:"/docs/#icon"},imageUrl:{replacement:"icon",link:"/docs/#icon"},customClass:{replacement:"className",onlyRename:!0,link:"/docs/#classname"},imageSize:{},showCancelButton:{replacement:"buttons",link:"/docs/#buttons"},showConfirmButton:{replacement:"button",link:"/docs/#button"},confirmButtonText:{replacement:"button",link:"/docs/#button"},confirmButtonColor:{},cancelButtonText:{replacement:"buttons",link:"/docs/#buttons"},closeOnConfirm:{replacement:"button",subOption:"closeModal",link:"/docs/#button"},closeOnCancel:{replacement:"buttons",subOption:"closeModal",link:"/docs/#buttons"},showLoaderOnConfirm:{replacement:"buttons"},animation:{},inputType:{replacement:"content",link:"/docs/#content"},inputValue:{replacement:"content",link:"/docs/#content"},inputPlaceholder:{replacement:"content",link:"/docs/#content"},html:{replacement:"content",link:"/docs/#content"},allowEscapeKey:{replacement:"closeOnEsc",onlyRename:!0,link:"/docs/#closeonesc"},allowClickOutside:{replacement:"closeOnClickOutside",onlyRename:!0,link:"/docs/#closeonclickoutside"}}}])}).call(this,n(10).setImmediate,n(10).clearImmediate)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));class i{constructor(e){if(!e.greeting)throw console.error(e),Error("Invalid greeting message!");this.id=e.user.id,this.coordinates=e.user.coordinates,this.users=e.users,this.nickname=e.user.nickname}}},function(e){e.exports=JSON.parse('{"glyphs":{"0":{"ha":789,"x_min":47,"x_max":742,"o":"m 742 483 q 649 110 742 240 q 394 -19 557 -19 q 140 110 232 -19 q 47 483 47 240 q 72 697 47 604 q 142 854 96 790 q 251 951 188 918 q 394 985 315 985 q 649 855 557 985 q 742 483 742 725 m 531 483 q 524 615 531 556 q 501 717 517 674 q 460 783 486 760 q 394 807 433 807 q 330 783 356 807 q 288 717 304 760 q 265 615 272 674 q 258 483 258 556 q 265 351 258 411 q 288 249 272 292 q 330 182 304 206 q 394 158 356 158 q 460 182 433 158 q 501 249 486 206 q 524 351 517 292 q 531 483 531 411 z "},"1":{"ha":789,"x_min":97,"x_max":560,"o":"m 97 763 q 181 801 138 779 q 267 848 225 822 q 347 902 308 874 q 415 963 385 931 l 560 963 l 560 0 l 353 0 l 353 693 q 260 642 311 665 q 160 603 208 619 l 97 763 z "},"2":{"ha":789,"x_min":49,"x_max":718,"o":"m 689 710 q 668 608 689 657 q 614 515 647 560 q 539 428 581 469 q 457 349 497 386 q 412 305 436 329 q 365 256 388 281 q 326 209 343 231 q 304 174 308 188 l 718 174 l 718 0 l 76 0 q 74 39 74 15 q 74 72 74 63 q 95 194 74 139 q 151 298 117 250 q 230 388 186 346 q 317 471 274 429 q 379 531 350 503 q 431 587 408 560 q 465 641 453 614 q 478 696 478 668 q 443 782 478 757 q 357 807 408 807 q 287 795 319 807 q 227 767 254 783 q 181 735 200 751 q 151 710 161 719 l 49 854 q 191 948 110 911 q 365 985 272 985 q 511 965 450 985 q 612 910 572 946 q 670 824 651 875 q 689 710 689 774 z "},"3":{"ha":789,"x_min":36,"x_max":701,"o":"m 317 -21 q 238 -16 279 -21 q 157 -3 196 -11 q 86 15 118 6 q 36 33 54 25 l 76 206 q 169 173 113 190 q 308 156 225 156 q 449 192 404 156 q 493 289 493 228 q 477 352 493 326 q 433 394 461 378 q 367 416 406 410 q 286 422 329 422 l 206 422 l 206 589 l 297 589 q 356 594 328 589 q 407 613 385 600 q 442 649 429 626 q 456 707 456 672 q 444 753 456 733 q 416 785 433 772 q 376 803 399 797 q 329 810 353 810 q 219 792 269 810 q 126 747 168 774 l 53 899 q 105 928 75 913 q 171 956 135 943 q 248 976 207 968 q 335 985 289 985 q 481 965 419 985 q 583 908 543 944 q 643 822 624 871 q 663 714 663 772 q 631 603 663 657 q 544 522 599 550 q 660 431 619 492 q 701 286 701 371 q 679 163 701 219 q 610 66 657 107 q 490 2 563 25 q 317 -21 417 -21 z "},"4":{"ha":789,"x_min":28,"x_max":749,"o":"m 443 710 q 328 556 389 639 q 225 385 267 472 l 443 385 l 443 710 m 646 963 l 646 385 l 749 385 l 749 215 l 646 215 l 646 0 l 443 0 l 443 215 l 28 215 l 28 367 q 104 505 58 428 q 206 663 150 582 q 325 822 263 744 q 450 963 388 900 l 646 963 z "},"5":{"ha":789,"x_min":53,"x_max":707,"o":"m 500 283 q 482 355 500 324 q 419 407 464 386 q 300 439 375 428 q 111 450 225 450 q 136 713 126 579 q 151 963 146 846 l 672 963 l 672 789 l 325 789 q 319 692 322 739 q 311 611 315 646 q 610 516 514 597 q 707 290 707 435 q 683 167 707 224 q 613 68 660 110 q 494 3 565 26 q 326 -21 422 -21 q 248 -16 289 -21 q 169 -3 207 -11 q 100 13 131 4 q 53 29 69 21 l 90 200 q 182 170 125 185 q 318 156 239 156 q 457 194 414 156 q 500 283 500 232 z "},"6":{"ha":789,"x_min":51,"x_max":740,"o":"m 381 453 q 315 447 350 453 q 261 432 281 442 q 260 415 261 426 q 260 396 260 404 q 267 301 260 346 q 290 224 274 257 q 335 172 307 190 q 404 153 363 153 q 463 167 439 153 q 503 204 488 182 q 527 253 519 226 q 535 306 535 281 q 499 415 535 376 q 381 453 464 453 m 407 614 q 560 590 497 614 q 664 524 624 565 q 722 426 704 482 q 740 308 740 371 q 720 194 740 253 q 659 89 700 136 q 555 11 618 42 q 406 -19 492 -19 q 142 90 232 -19 q 51 393 51 200 q 94 639 51 532 q 217 819 138 746 q 410 930 297 892 q 665 969 524 968 q 671 885 668 926 q 676 800 674 844 q 544 787 606 799 q 431 750 482 775 q 343 685 381 725 q 285 589 306 646 q 347 608 315 603 q 407 614 379 614 z "},"7":{"ha":789,"x_min":60,"x_max":733,"o":"m 197 0 q 232 211 206 101 q 297 426 258 321 q 382 626 335 532 q 478 788 429 719 l 60 788 l 60 964 l 733 964 l 733 814 q 635 679 689 765 q 534 484 582 593 q 451 250 486 375 q 407 0 415 125 l 197 0 z "},"8":{"ha":789,"x_min":54,"x_max":736,"o":"m 736 268 q 715 153 736 206 q 650 63 693 101 q 542 2 607 24 q 393 -19 478 -19 q 231 8 296 -19 q 127 75 167 35 q 71 163 88 115 q 54 251 54 211 q 65 328 54 293 q 96 391 76 363 q 140 443 115 419 q 192 488 164 467 q 103 583 132 536 q 75 704 75 631 q 98 811 75 760 q 163 901 121 863 q 263 962 204 939 q 394 985 322 985 q 540 960 479 985 q 639 899 600 936 q 695 815 678 861 q 713 722 713 768 q 677 598 713 656 q 589 507 642 540 q 702 399 668 456 q 736 268 736 343 m 256 260 q 263 223 256 243 q 288 186 271 203 q 331 158 304 169 q 394 147 357 147 q 500 182 467 147 q 533 260 533 217 q 519 317 533 292 q 479 360 504 342 q 420 394 454 379 q 347 421 386 408 q 282 353 308 392 q 256 260 256 314 m 513 717 q 506 749 513 732 q 485 782 500 767 q 449 808 471 797 q 394 818 426 818 q 342 808 364 818 q 305 783 319 799 q 283 749 290 767 q 276 714 276 731 q 309 631 276 669 q 421 564 342 592 q 489 628 465 592 q 513 717 513 664 z "},"9":{"ha":789,"x_min":39,"x_max":729,"o":"m 401 517 q 468 523 433 517 q 519 540 503 529 l 519 553 q 520 564 519 558 q 521 574 521 569 q 513 667 519 624 q 489 744 506 711 q 444 795 472 776 q 374 814 415 814 q 315 800 340 814 q 275 764 290 786 q 252 715 260 742 q 244 664 244 689 q 281 553 244 589 q 401 517 318 517 m 503 382 q 438 362 474 368 q 378 356 403 356 q 224 377 288 356 q 119 438 160 399 q 58 533 78 478 q 39 656 39 589 q 58 769 39 711 q 117 876 76 828 q 219 955 157 924 q 368 986 281 986 q 638 876 547 986 q 729 558 729 765 q 694 318 729 422 q 584 143 658 214 q 394 35 510 72 q 121 -3 279 -1 q 117 83 119 42 q 111 169 114 125 q 254 181 190 171 q 367 216 318 192 q 449 281 415 240 q 503 382 483 321 z "},"\\u0000":{"ha":0,"x_min":0,"x_max":0,"o":""},"\\t":{"ha":333,"x_min":0,"x_max":0,"o":""}," ":{"ha":333,"x_min":0,"x_max":0,"o":""},"!":{"ha":397,"x_min":69,"x_max":328,"o":"m 310 714 q 301 504 310 601 q 279 307 293 407 l 121 307 q 98 504 107 407 q 89 714 89 601 l 89 963 l 310 963 l 310 714 m 328 110 q 288 15 328 49 q 199 -18 249 -18 q 109 15 149 -18 q 69 110 69 49 q 109 204 69 171 q 199 238 149 238 q 288 204 249 238 q 328 110 328 171 z "},"\\"":{"ha":646,"x_min":69,"x_max":576,"o":"m 274 1056 l 274 953 q 263 807 274 886 q 240 647 253 728 l 103 647 q 78 807 88 728 q 69 954 69 886 l 69 1056 l 274 1056 m 576 1056 l 576 953 q 566 807 576 886 q 543 647 556 728 l 406 647 q 381 807 390 728 q 372 954 372 886 l 372 1056 l 576 1056 z "},"#":{"ha":971,"x_min":76,"x_max":894,"o":"m 451 726 l 613 726 l 658 963 l 839 963 l 793 726 l 894 726 l 894 567 l 763 567 l 729 396 l 894 396 l 894 236 l 699 236 l 654 0 l 474 0 l 518 236 l 357 236 l 313 0 l 132 0 l 176 236 l 76 236 l 76 396 l 207 396 l 240 567 l 76 567 l 76 726 l 271 726 l 317 963 l 497 963 l 451 726 m 388 396 l 549 396 l 582 567 l 421 567 l 388 396 z "},"$":{"ha":789,"x_min":49,"x_max":726,"o":"m 307 14 q 142 45 206 22 q 49 83 79 68 l 108 243 q 224 200 157 219 q 367 181 292 181 q 483 203 451 181 q 514 268 514 226 q 501 313 514 294 q 465 347 489 332 q 406 377 442 363 q 322 408 369 392 q 233 445 276 425 q 153 494 189 465 q 97 566 118 524 q 75 668 75 608 q 88 756 75 714 q 129 833 101 799 q 201 892 157 868 q 307 928 246 917 l 307 1078 l 482 1078 l 482 933 q 606 913 554 926 q 689 885 658 899 l 646 718 q 540 751 600 738 q 413 765 479 765 q 317 743 346 765 q 288 685 288 721 q 297 647 288 663 q 325 618 306 631 q 373 594 344 606 q 442 568 401 582 q 555 519 503 546 q 645 459 607 493 q 705 379 683 425 q 726 272 726 333 q 714 190 726 231 q 672 114 701 149 q 597 54 643 79 q 482 18 550 29 l 482 -151 l 307 -151 l 307 14 z "},"%":{"ha":1275,"x_min":49,"x_max":1226,"o":"m 540 715 q 474 515 540 585 q 294 446 407 446 q 115 515 182 446 q 49 715 49 585 q 115 915 49 846 q 294 985 182 985 q 474 915 407 985 q 540 715 540 846 m 383 715 q 358 818 383 786 q 294 850 333 850 q 230 818 254 850 q 206 715 206 786 q 230 612 206 644 q 294 579 254 579 q 358 612 333 579 q 383 715 383 644 m 811 963 l 1004 963 l 461 0 l 268 0 l 811 963 m 1226 247 q 1160 47 1226 117 q 981 -22 1093 -22 q 801 47 868 -22 q 735 247 735 117 q 801 447 735 378 q 981 517 868 517 q 1160 447 1093 517 q 1226 247 1226 378 m 1069 247 q 1044 350 1069 318 q 981 382 1019 382 q 916 350 940 382 q 892 247 892 318 q 916 144 892 176 q 981 111 940 111 q 1044 144 1019 111 q 1069 247 1069 176 z "},"&":{"ha":979,"x_min":49,"x_max":965,"o":"m 49 256 q 64 352 49 308 q 105 431 79 396 q 165 494 131 467 q 236 542 199 521 q 176 628 203 582 q 150 731 150 675 q 224 919 150 853 q 426 985 297 985 q 540 967 492 985 q 622 920 589 950 q 671 851 654 890 q 688 765 688 811 q 640 615 688 681 q 518 504 592 549 l 674 349 q 698 419 686 376 q 713 493 710 461 l 885 471 q 875 413 882 444 q 858 350 868 382 q 834 286 847 318 q 806 228 821 254 q 892 119 850 178 q 965 0 935 60 l 753 0 q 722 45 742 18 q 683 92 703 72 q 554 17 628 47 q 389 -12 481 -12 q 226 12 292 -12 q 122 74 161 36 q 65 160 82 113 q 49 256 49 208 m 242 276 q 250 233 242 256 q 277 192 258 211 q 325 162 296 174 q 396 150 354 150 q 498 165 454 150 q 571 206 542 181 l 349 429 q 310 406 329 419 q 276 373 292 392 q 251 331 261 354 q 242 276 242 307 m 511 756 q 490 813 511 788 q 421 838 469 838 q 352 810 376 838 q 328 740 328 783 q 349 670 328 704 q 403 606 369 636 q 479 665 447 631 q 511 756 511 700 z "},"\'":{"ha":343,"x_min":69,"x_max":274,"o":"m 274 1056 l 274 953 q 263 807 274 886 q 240 647 253 728 l 103 647 q 78 807 88 728 q 69 954 69 886 l 69 1056 l 274 1056 z "},"(":{"ha":494,"x_min":97,"x_max":488,"o":"m 301 415 q 353 103 301 251 q 488 -164 404 -46 l 343 -257 q 161 51 225 -119 q 97 415 97 222 q 161 779 97 608 q 343 1088 225 950 l 488 994 q 353 728 404 876 q 301 415 301 579 z "},")":{"ha":494,"x_min":7,"x_max":397,"o":"m 193 415 q 142 728 193 579 q 7 994 90 876 l 151 1088 q 333 779 269 950 q 397 415 397 608 q 333 51 397 222 q 151 -257 269 -119 l 7 -164 q 142 103 90 -46 q 193 415 193 251 z "},"*":{"ha":697,"x_min":56,"x_max":642,"o":"m 393 744 q 428 772 407 757 q 470 801 449 786 q 514 827 492 815 q 553 844 536 839 l 586 856 l 642 683 l 608 672 q 567 664 590 667 q 517 660 543 661 q 465 660 490 660 q 421 660 440 660 q 458 634 438 649 q 498 603 478 619 q 536 571 518 588 q 565 539 554 554 l 588 510 l 440 406 l 419 433 q 398 469 408 447 q 378 516 388 492 q 361 564 368 540 q 349 607 354 588 q 336 564 343 588 q 319 516 329 540 q 299 469 310 492 q 278 433 289 447 l 257 406 l 110 510 l 132 539 q 161 571 143 554 q 199 603 179 588 q 240 634 219 619 q 276 660 260 649 q 232 660 257 660 q 181 660 207 660 q 131 664 154 661 q 89 672 107 667 l 56 683 l 111 856 l 144 844 q 183 827 161 839 q 227 801 206 815 q 269 772 249 786 q 304 744 289 757 q 290 787 297 763 q 275 836 282 811 q 263 885 268 861 q 258 928 258 910 l 258 963 l 439 963 l 439 928 q 434 885 439 910 q 422 836 429 861 q 408 787 415 811 q 393 744 400 763 z "},"+":{"ha":789,"x_min":68,"x_max":721,"o":"m 68 501 l 300 501 l 300 758 l 489 758 l 489 501 l 721 501 l 721 328 l 489 328 l 489 71 l 300 71 l 300 328 l 68 328 l 68 501 z "},",":{"ha":342,"x_min":24,"x_max":297,"o":"m 293 211 q 297 164 296 178 q 297 140 297 150 q 290 52 297 99 q 268 -42 282 6 q 233 -136 254 -89 q 186 -226 213 -183 l 24 -186 q 68 -14 56 -94 q 81 119 81 67 q 80 141 81 128 q 78 168 79 154 q 77 194 78 182 q 76 211 76 207 l 293 211 z "},"-":{"ha":472,"x_min":35,"x_max":438,"o":"m 35 508 l 438 508 l 438 321 l 35 321 l 35 508 z "},".":{"ha":342,"x_min":42,"x_max":300,"o":"m 300 110 q 260 15 300 47 q 171 -18 221 -18 q 81 15 121 -18 q 42 110 42 47 q 81 205 42 172 q 171 238 121 238 q 260 205 221 238 q 300 110 300 172 z "},"/":{"ha":607,"x_min":-35,"x_max":642,"o":"m 178 -257 l -35 -257 l 432 1088 l 642 1088 l 178 -257 z "},":":{"ha":342,"x_min":42,"x_max":300,"o":"m 300 603 q 260 508 300 540 q 171 475 221 475 q 81 508 121 475 q 42 603 42 540 q 81 698 42 665 q 171 731 121 731 q 260 698 221 731 q 300 603 300 665 m 300 110 q 260 15 300 47 q 171 -18 221 -18 q 81 15 121 -18 q 42 110 42 47 q 81 205 42 172 q 171 238 121 238 q 260 205 221 238 q 300 110 300 172 z "},";":{"ha":342,"x_min":24,"x_max":300,"o":"m 300 603 q 260 508 300 540 q 171 475 221 475 q 81 508 121 475 q 42 603 42 540 q 81 698 42 665 q 171 731 121 731 q 260 698 221 731 q 300 603 300 665 m 293 211 q 297 164 296 178 q 297 140 297 150 q 290 52 297 99 q 268 -42 282 6 q 233 -136 254 -89 q 186 -226 213 -183 l 24 -186 q 68 -14 56 -94 q 81 119 81 67 q 80 141 81 128 q 78 168 79 154 q 77 194 78 182 q 76 211 76 207 l 293 211 z "},"<":{"ha":789,"x_min":69,"x_max":721,"o":"m 69 501 l 667 753 l 721 585 l 285 415 l 721 246 l 667 78 l 69 329 l 69 501 z "},"=":{"ha":789,"x_min":68,"x_max":721,"o":"m 68 349 l 721 349 l 721 175 l 68 175 l 68 349 m 68 653 l 721 653 l 721 479 l 68 479 l 68 653 z "},">":{"ha":789,"x_min":68,"x_max":719,"o":"m 719 329 l 122 78 l 68 246 l 504 415 l 68 585 l 122 753 l 719 501 l 719 329 z "},"?":{"ha":632,"x_min":28,"x_max":597,"o":"m 279 808 q 185 796 229 808 q 86 756 140 783 l 28 913 q 156 966 82 947 q 300 985 229 985 q 447 961 389 985 q 538 901 504 938 q 584 822 571 865 q 597 740 597 779 q 585 669 597 701 q 556 608 574 636 q 514 556 538 581 q 468 508 490 531 q 433 473 451 492 q 401 433 415 454 q 376 390 386 413 q 367 343 367 367 q 367 326 367 338 q 368 307 367 315 l 185 307 q 181 338 182 321 q 181 368 181 356 q 190 438 181 407 q 216 497 200 469 q 253 547 232 524 q 296 593 274 571 q 354 656 328 625 q 381 728 381 688 q 355 785 381 761 q 279 808 329 808 m 408 110 q 369 15 408 49 q 279 -18 329 -18 q 190 15 229 -18 q 150 110 150 49 q 190 204 150 171 q 279 238 229 238 q 369 204 329 238 q 408 110 408 171 z "},"@":{"ha":1353,"x_min":69,"x_max":1283,"o":"m 974 39 q 893 49 933 39 q 826 83 853 58 q 672 40 765 40 q 545 62 603 40 q 447 126 488 83 q 383 233 406 169 q 360 379 360 296 q 383 511 360 450 q 450 617 406 572 q 559 689 494 663 q 706 715 624 715 q 851 701 788 715 q 956 671 914 686 l 956 235 q 969 192 956 203 q 1007 181 982 181 q 1051 193 1029 181 q 1088 238 1072 206 q 1113 327 1103 271 q 1122 469 1122 383 q 1092 627 1122 556 q 1006 749 1063 699 q 869 828 950 800 q 685 857 788 857 q 503 824 586 857 q 360 728 421 790 q 266 578 300 667 q 232 378 232 489 q 265 176 232 263 q 360 31 299 89 q 510 -58 422 -28 q 710 -87 599 -87 q 841 -78 779 -87 q 944 -61 903 -69 l 965 -192 q 860 -215 931 -203 q 710 -228 789 -228 q 460 -193 576 -228 q 256 -85 343 -158 q 119 103 169 -11 q 69 378 69 218 q 122 648 69 532 q 261 842 175 764 q 458 958 347 919 q 685 997 568 997 q 922 962 813 997 q 1112 858 1032 926 q 1238 690 1192 790 q 1283 458 1283 589 q 1262 278 1283 357 q 1199 147 1240 200 q 1101 67 1158 94 q 974 39 1044 39 m 778 204 q 774 237 775 215 q 772 278 772 258 l 772 561 q 714 567 744 567 q 636 552 668 567 q 585 513 604 538 q 556 453 565 488 q 547 379 547 419 q 554 305 547 339 q 578 246 561 271 q 625 206 596 221 q 697 192 654 192 q 744 195 722 192 q 778 204 767 199 z "},"A":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 z "},"B":{"ha":933,"x_min":111,"x_max":871,"o":"m 432 -12 q 274 -8 353 -12 q 111 15 196 -3 l 111 949 q 257 967 178 961 q 404 974 336 974 q 573 960 496 974 q 706 915 650 947 q 792 831 761 883 q 824 703 824 779 q 713 521 824 588 q 838 426 804 486 q 871 292 871 367 q 760 64 871 140 q 432 -12 650 -12 m 322 419 l 322 171 q 374 167 346 168 q 435 165 401 165 q 592 193 532 165 q 651 296 651 221 q 601 391 651 363 q 458 419 551 419 l 322 419 m 322 585 l 428 585 q 571 610 528 585 q 614 693 614 636 q 569 775 614 751 q 439 799 525 799 q 379 798 411 799 q 322 794 347 797 l 322 585 z "},"C":{"ha":900,"x_min":69,"x_max":872,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 z "},"D":{"ha":1024,"x_min":111,"x_max":954,"o":"m 328 176 q 363 174 343 175 q 411 174 383 174 q 652 256 574 174 q 731 482 731 338 q 656 711 731 633 q 418 789 581 789 q 372 788 396 789 q 328 785 349 788 l 328 176 m 954 482 q 915 264 954 357 q 805 110 876 171 q 631 18 733 49 q 400 -12 528 -12 q 264 -8 342 -12 q 111 13 186 -3 l 111 950 q 267 969 186 964 q 407 974 349 974 q 631 946 531 974 q 804 858 732 918 q 915 706 876 799 q 954 482 954 613 z "},"E":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 z "},"F":{"ha":797,"x_min":111,"x_max":756,"o":"m 111 0 l 111 963 l 756 963 l 756 781 l 328 781 l 328 579 l 708 579 l 708 397 l 328 397 l 328 0 l 111 0 z "},"G":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 z "},"H":{"ha":1019,"x_min":111,"x_max":908,"o":"m 692 963 l 908 963 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"I":{"ha":439,"x_min":111,"x_max":328,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 z "},"J":{"ha":735,"x_min":14,"x_max":638,"o":"m 638 324 q 622 190 638 253 q 566 81 606 128 q 459 8 526 35 q 289 -19 392 -19 q 126 3 194 -19 q 14 57 58 26 l 86 225 q 172 183 126 201 q 272 165 218 165 q 386 204 351 165 q 421 335 421 243 l 421 963 l 638 963 l 638 324 z "},"K":{"ha":950,"x_min":111,"x_max":936,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 730 292 622 424 q 936 0 838 160 l 679 0 z "},"L":{"ha":782,"x_min":111,"x_max":754,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 z "},"M":{"ha":1246,"x_min":83,"x_max":1163,"o":"m 367 963 q 424 849 392 917 q 492 703 457 782 q 563 543 528 625 q 628 389 597 461 q 693 543 658 461 q 763 703 728 625 q 831 849 799 782 q 889 963 864 917 l 1086 963 q 1112 748 1100 867 q 1133 501 1124 629 q 1149 243 1142 372 q 1163 0 1157 114 l 951 0 q 940 306 947 140 q 919 639 933 471 q 864 510 894 581 q 803 368 833 439 q 746 233 774 297 q 699 122 718 168 l 547 122 q 500 233 528 168 q 442 368 472 297 q 382 510 413 439 q 326 639 351 581 q 306 306 313 471 q 294 0 299 140 l 83 0 q 97 243 89 114 q 113 501 104 372 q 134 748 122 629 q 160 963 146 867 l 367 963 z "},"N":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 z "},"O":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 z "},"P":{"ha":894,"x_min":111,"x_max":846,"o":"m 400 974 q 731 898 615 974 q 846 650 846 822 q 729 399 846 476 q 396 322 613 322 l 328 322 l 328 0 l 111 0 l 111 949 q 261 968 182 963 q 400 974 340 974 m 414 789 q 367 788 390 789 q 328 785 344 786 l 328 507 l 396 507 q 565 538 508 507 q 622 651 622 568 q 608 718 622 692 q 566 760 593 744 q 500 783 539 776 q 414 789 461 789 z "},"Q":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 1003 299 1028 381 q 933 157 978 218 q 825 56 888 96 q 688 -3 763 15 q 718 -48 694 -31 q 778 -76 742 -65 q 862 -93 814 -87 q 965 -103 910 -99 l 921 -261 q 735 -240 813 -257 q 605 -192 658 -222 q 520 -117 551 -161 q 472 -14 489 -72 q 313 34 386 -3 q 185 133 239 71 q 100 283 131 196 q 69 482 69 371 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 z "},"R":{"ha":926,"x_min":111,"x_max":899,"o":"m 393 974 q 725 897 610 974 q 840 657 840 819 q 794 492 840 556 q 660 393 747 429 q 721 310 689 357 q 784 213 753 264 q 844 108 815 163 q 899 0 874 53 l 656 0 q 602 96 629 47 q 547 190 575 144 q 490 277 518 236 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 949 q 258 968 182 963 q 393 974 333 974 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 z "},"S":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 658 55 753 129 q 374 -19 564 -19 q 258 -12 310 -19 q 167 7 207 -4 q 99 31 128 18 q 51 54 71 43 l 113 226 q 219 184 156 203 q 374 165 282 165 z "},"T":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 0 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 z "},"U":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 z "},"V":{"ha":1003,"x_min":14,"x_max":989,"o":"m 397 0 q 285 251 340 121 q 179 510 229 382 q 87 754 129 638 q 14 963 44 871 l 253 963 q 313 783 281 879 q 380 590 346 686 q 446 407 414 494 q 506 256 478 319 q 565 407 532 319 q 631 590 597 494 q 698 783 665 686 q 758 963 731 879 l 989 963 q 915 754 957 871 q 824 510 874 638 q 718 251 774 382 q 606 0 663 121 l 397 0 z "},"W":{"ha":1317,"x_min":28,"x_max":1289,"o":"m 757 860 q 794 731 774 803 q 837 583 814 660 q 883 431 860 507 q 929 289 907 354 q 966 443 947 360 q 1001 615 985 526 q 1034 792 1018 704 q 1064 963 1050 881 l 1289 963 q 1177 472 1240 721 q 1040 0 1114 224 l 842 0 q 747 280 793 133 q 657 574 701 426 q 568 280 613 426 q 475 0 524 133 l 276 0 q 140 472 203 224 q 28 963 76 721 l 263 963 q 293 792 276 881 q 328 615 310 704 q 365 443 346 526 q 403 289 383 360 q 451 433 428 357 q 497 586 475 510 q 538 733 519 663 q 572 860 557 804 l 757 860 z "},"X":{"ha":938,"x_min":14,"x_max":924,"o":"m 664 0 q 576 163 624 81 q 465 332 528 246 q 416 263 446 307 q 356 168 386 218 q 300 72 326 118 q 261 0 274 26 l 14 0 q 156 236 75 113 q 338 499 238 360 l 28 963 l 290 963 l 478 663 l 661 963 l 908 963 l 603 496 q 799 216 719 344 q 924 0 878 88 l 664 0 z "},"Y":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 z "},"Z":{"ha":847,"x_min":49,"x_max":806,"o":"m 790 813 q 685 694 746 767 q 558 535 624 621 q 429 357 493 449 q 315 182 365 265 l 806 182 l 806 0 l 49 0 l 49 129 q 144 287 88 200 q 261 462 200 374 q 385 633 322 550 q 503 781 449 715 l 71 781 l 71 963 l 790 963 l 790 813 z "},"[":{"ha":515,"x_min":125,"x_max":501,"o":"m 125 1088 l 501 1088 l 501 922 l 322 922 l 322 -92 l 501 -92 l 501 -257 l 125 -257 l 125 1088 z "},"\\\\":{"ha":607,"x_min":-35,"x_max":642,"o":"m -35 1088 l 175 1088 l 642 -257 l 429 -257 l -35 1088 z "},"]":{"ha":515,"x_min":14,"x_max":390,"o":"m 390 -257 l 14 -257 l 14 -92 l 193 -92 l 193 922 l 14 922 l 14 1088 l 390 1088 l 390 -257 z "},"^":{"ha":789,"x_min":25,"x_max":764,"o":"m 764 486 l 590 401 l 394 742 l 199 401 l 25 486 l 313 968 l 476 968 l 764 486 z "},"_":{"ha":694,"x_min":0,"x_max":694,"o":"m 0 -85 l 694 -85 l 694 -257 l 0 -257 l 0 -85 z "},"`":{"ha":397,"x_min":28,"x_max":351,"o":"m 154 1110 l 351 885 l 257 800 l 28 993 l 154 1110 z "},"a":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 z "},"b":{"ha":839,"x_min":97,"x_max":776,"o":"m 565 371 q 418 571 565 571 q 355 563 386 571 q 304 542 324 554 l 304 165 q 343 160 319 163 q 394 158 367 158 q 522 217 479 158 q 565 371 565 275 m 776 365 q 751 207 776 278 q 676 86 725 136 q 557 9 628 36 q 396 -18 486 -18 q 317 -15 358 -18 q 237 -6 276 -11 q 161 8 197 0 q 97 24 125 15 l 97 1044 l 304 1078 l 304 714 q 376 738 339 729 q 457 746 414 746 q 594 719 535 746 q 694 642 654 692 q 756 522 735 592 q 776 365 776 451 z "},"c":{"ha":694,"x_min":63,"x_max":653,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 z "},"d":{"ha":839,"x_min":63,"x_max":742,"o":"m 274 371 q 317 217 274 275 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 542 q 484 563 515 554 q 421 571 453 571 q 274 371 274 571 m 742 24 q 678 8 714 15 q 602 -6 642 0 q 522 -15 563 -11 q 443 -18 481 -18 q 282 8 353 -18 q 163 84 211 35 q 88 203 114 133 q 63 361 63 274 q 85 522 63 450 q 149 643 107 593 q 251 719 190 693 q 389 746 311 746 q 466 738 432 746 q 535 714 500 729 l 535 1044 l 742 1078 l 742 24 z "},"e":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 z "},"f":{"ha":586,"x_min":97,"x_max":596,"o":"m 414 1078 q 521 1066 472 1078 q 596 1043 569 1054 l 556 878 q 495 897 528 890 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 z "},"g":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 z "},"h":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 0 l 97 1044 l 304 1078 l 304 728 q 358 741 325 735 q 421 747 390 747 q 569 723 510 747 q 663 654 628 699 q 713 549 699 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 495 529 521 488 q 400 571 469 571 q 348 566 372 571 q 304 556 324 561 l 304 0 l 97 0 z "},"i":{"ha":401,"x_min":76,"x_max":324,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 324 942 q 287 852 324 885 q 200 819 250 819 q 113 852 150 819 q 76 942 76 885 q 113 1031 76 999 q 200 1064 150 1064 q 287 1031 250 1064 q 324 942 324 999 z "},"j":{"ha":401,"x_min":-100,"x_max":324,"o":"m 29 -257 q -28 -253 10 -257 q -100 -237 -67 -249 l -72 -69 q -34 -79 -51 -76 q 10 -82 -17 -82 q 78 -53 58 -82 q 97 32 97 -24 l 97 731 l 304 731 l 304 26 q 233 -187 304 -118 q 29 -257 163 -257 m 324 942 q 287 852 324 885 q 200 819 250 819 q 113 852 150 819 q 76 942 76 885 q 113 1031 76 999 q 200 1064 150 1064 q 287 1031 250 1064 q 324 942 324 999 z "},"k":{"ha":804,"x_min":97,"x_max":790,"o":"m 304 467 q 367 536 335 500 q 431 608 400 572 q 488 675 461 643 q 535 731 515 707 l 781 731 q 637 569 707 646 q 483 410 567 492 q 569 320 525 372 q 656 213 614 268 q 732 101 697 157 q 790 0 767 46 l 553 0 q 502 80 531 36 q 442 167 474 124 q 374 251 410 211 q 304 319 339 292 l 304 0 l 97 0 l 97 1044 l 304 1078 l 304 467 z "},"l":{"ha":439,"x_min":97,"x_max":418,"o":"m 389 -14 q 242 6 299 -12 q 153 56 186 24 q 109 135 121 89 q 97 240 97 182 l 97 1044 l 304 1078 l 304 282 q 308 232 304 254 q 324 194 313 210 q 358 169 336 179 q 418 157 381 160 l 389 -14 z "},"m":{"ha":1197,"x_min":97,"x_max":1107,"o":"m 499 388 q 473 529 499 488 q 385 571 447 571 q 344 569 365 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 q 159 720 124 713 q 234 734 194 728 q 315 744 274 740 q 397 747 357 747 q 526 727 476 747 q 607 679 575 707 q 709 729 651 711 q 815 747 767 747 q 959 723 903 747 q 1049 654 1015 699 q 1094 549 1082 610 q 1107 413 1107 488 l 1107 0 l 900 0 l 900 388 q 874 529 900 488 q 786 571 849 571 q 740 563 769 571 q 690 542 710 554 q 703 474 700 510 q 706 399 706 439 l 706 0 l 499 0 l 499 388 z "},"n":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 z "},"o":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 z "},"p":{"ha":839,"x_min":97,"x_max":776,"o":"m 565 360 q 522 513 565 456 q 394 571 479 571 q 343 569 367 571 q 304 564 319 567 l 304 190 q 355 169 324 178 q 418 161 386 161 q 565 360 565 161 m 776 365 q 756 211 776 281 q 694 92 735 142 q 594 14 654 42 q 457 -14 535 -14 q 376 -6 414 -14 q 304 18 339 3 l 304 -257 l 97 -257 l 97 706 q 161 722 125 714 q 237 735 197 729 q 317 744 276 740 q 396 747 358 747 q 557 720 486 747 q 676 644 628 693 q 751 524 725 594 q 776 365 776 453 z "},"q":{"ha":839,"x_min":63,"x_max":742,"o":"m 274 360 q 421 161 274 161 q 484 169 453 161 q 535 190 515 178 l 535 564 q 496 569 519 567 q 444 571 472 571 q 317 513 360 571 q 274 360 274 456 m 63 365 q 88 520 63 450 q 163 641 114 590 q 282 719 211 692 q 443 747 353 747 q 522 744 481 747 q 602 735 563 740 q 678 722 642 729 q 742 706 714 714 l 742 -257 l 535 -257 l 535 18 q 463 -6 500 3 q 382 -14 425 -14 q 144 88 226 -14 q 63 365 63 190 z "},"r":{"ha":586,"x_min":97,"x_max":572,"o":"m 538 547 q 472 562 510 554 q 392 569 435 569 q 345 566 372 569 q 304 558 318 563 l 304 0 l 97 0 l 97 692 q 228 728 153 711 q 397 746 304 746 q 438 744 414 746 q 485 738 461 742 q 532 730 508 735 q 572 718 556 725 l 538 547 z "},"s":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 z "},"t":{"ha":617,"x_min":90,"x_max":575,"o":"m 90 913 l 297 946 l 297 731 l 546 731 l 546 558 l 297 558 l 297 301 q 320 197 297 236 q 413 158 343 158 q 481 165 446 158 q 546 182 517 171 l 575 21 q 492 -6 538 6 q 379 -17 446 -17 q 239 6 294 -17 q 150 70 183 29 q 103 169 117 111 q 90 299 90 228 l 90 913 z "},"u":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 z "},"v":{"ha":764,"x_min":14,"x_max":750,"o":"m 296 0 q 152 325 225 139 q 14 731 79 511 l 233 731 q 266 613 247 676 q 305 485 285 550 q 345 360 325 421 q 385 249 365 299 q 424 360 403 299 q 465 485 444 421 q 503 613 485 550 q 536 731 522 676 l 750 731 q 612 325 685 511 q 468 0 539 139 l 296 0 z "},"w":{"ha":1089,"x_min":14,"x_max":1075,"o":"m 542 419 q 483 210 514 314 q 417 0 451 106 l 256 0 q 201 139 231 58 q 141 315 172 219 q 77 516 110 410 q 14 731 44 622 l 232 731 q 256 622 243 681 q 284 500 269 563 q 315 374 299 438 q 347 253 331 311 q 383 378 365 314 q 416 503 400 442 q 447 623 432 565 q 472 731 461 681 l 622 731 q 647 623 633 681 q 676 503 661 565 q 708 378 692 442 q 743 253 725 314 q 776 374 760 311 q 808 500 793 438 q 835 622 822 563 q 860 731 849 681 l 1075 731 q 1012 516 1044 622 q 948 315 979 410 q 887 139 917 219 q 832 0 857 58 l 671 0 q 603 210 636 106 q 542 419 569 314 z "},"x":{"ha":769,"x_min":14,"x_max":756,"o":"m 388 508 l 532 731 l 746 731 l 496 379 q 647 176 579 275 q 756 0 715 78 l 533 0 q 506 52 522 21 q 468 117 489 83 q 424 185 447 151 q 379 247 401 219 q 337 189 358 221 q 296 124 315 157 q 258 60 276 92 q 225 0 239 28 l 14 0 q 60 82 31 35 q 123 180 89 129 q 194 281 157 231 q 268 376 232 332 q 143 553 206 464 q 19 731 81 643 l 243 731 l 388 508 z "},"y":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 z "},"z":{"ha":694,"x_min":49,"x_max":653,"o":"m 646 592 q 578 517 621 564 q 488 413 536 469 q 390 293 439 356 q 300 172 340 231 l 653 172 l 653 0 l 49 0 l 49 122 q 119 230 78 172 q 205 346 160 288 q 294 459 250 404 q 376 558 339 514 l 65 558 l 65 731 l 646 731 l 646 592 z "},"{":{"ha":515,"x_min":49,"x_max":501,"o":"m 49 497 q 139 533 111 497 q 167 628 167 569 l 167 838 q 182 944 167 897 q 233 1022 197 990 q 327 1071 268 1054 q 474 1088 386 1088 l 501 1088 l 501 922 l 467 922 q 383 894 404 922 q 361 808 361 867 l 361 624 q 342 501 361 551 q 264 415 322 451 q 342 329 322 379 q 361 207 361 279 l 361 22 q 383 -64 361 -36 q 467 -92 404 -92 l 501 -92 l 501 -257 l 474 -257 q 327 -240 386 -257 q 233 -192 268 -224 q 182 -113 197 -160 q 167 -7 167 -67 l 167 203 q 139 297 167 261 q 49 333 111 333 l 49 497 z "},"|":{"ha":447,"x_min":125,"x_max":322,"o":"m 125 1088 l 322 1088 l 322 -257 l 125 -257 l 125 1088 z "},"}":{"ha":515,"x_min":14,"x_max":467,"o":"m 467 333 q 376 297 404 333 q 349 203 349 261 l 349 -7 q 333 -113 349 -67 q 283 -192 318 -160 q 188 -240 247 -224 q 42 -257 129 -257 l 14 -257 l 14 -92 l 49 -92 q 133 -64 111 -92 q 154 22 154 -36 l 154 207 q 174 329 154 279 q 251 415 193 379 q 174 501 193 451 q 154 624 154 551 l 154 808 q 133 894 154 867 q 49 922 111 922 l 14 922 l 14 1088 l 42 1088 q 188 1071 129 1088 q 283 1022 247 1054 q 333 944 318 990 q 349 838 349 897 l 349 628 q 376 533 349 569 q 467 497 404 497 l 467 333 z "},"~":{"ha":789,"x_min":32,"x_max":757,"o":"m 536 272 q 458 289 494 272 q 387 325 421 306 q 322 361 353 344 q 260 378 290 378 q 237 375 249 378 q 214 362 225 372 q 192 331 203 351 q 174 276 182 311 l 32 315 q 54 397 39 354 q 95 476 69 440 q 160 536 121 513 q 253 560 199 560 q 331 543 294 560 q 402 507 368 526 q 467 471 436 488 q 529 454 499 454 q 552 457 540 454 q 575 470 564 460 q 597 501 586 481 q 615 556 607 521 l 757 517 q 735 435 750 478 q 693 356 719 392 q 628 296 667 319 q 536 272 590 272 z "},"€":{"ha":789,"x_min":64,"x_max":785,"o":"m 169 668 q 307 903 206 824 q 567 982 408 982 q 674 972 629 982 q 763 946 718 963 l 719 785 q 651 803 686 796 q 565 811 617 811 q 435 775 482 811 q 368 668 389 739 l 676 668 l 650 531 l 350 531 q 349 505 349 515 q 349 483 349 494 q 349 464 349 472 q 350 440 349 456 l 633 440 l 607 303 l 368 303 q 439 187 392 219 q 557 154 486 154 q 650 163 603 154 q 744 190 697 171 l 785 31 q 688 -3 747 11 q 550 -18 629 -18 q 285 66 376 -18 q 164 303 193 150 l 64 303 l 64 440 l 151 440 q 150 464 150 456 q 150 483 150 472 q 150 507 150 494 q 151 531 150 519 l 64 531 l 64 668 l 169 668 z "},"‚":{"ha":338,"x_min":21,"x_max":282,"o":"m 276 214 q 281 174 279 194 q 282 143 282 153 q 249 -34 282 50 q 167 -176 215 -118 l 21 -143 q 63 -8 47 -83 q 79 135 79 67 q 79 147 79 138 q 78 167 79 156 q 77 192 78 179 q 75 214 76 204 l 276 214 z "},"ƒ":{"ha":586,"x_min":-100,"x_max":596,"o":"m 29 -257 q -28 -253 10 -257 q -100 -237 -67 -249 l -72 -69 q -34 -79 -51 -76 q 10 -82 -17 -82 q 78 -53 58 -82 q 97 32 97 -24 l 97 769 q 177 994 97 911 q 414 1078 257 1078 q 521 1066 472 1078 q 596 1043 569 1054 l 556 878 q 495 897 528 890 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 26 q 234 -188 304 -119 q 29 -257 164 -257 z "},"„":{"ha":631,"x_min":21,"x_max":575,"o":"m 569 214 q 574 174 572 194 q 575 143 575 153 q 542 -34 575 50 q 460 -176 508 -118 l 319 -144 q 362 -9 346 -85 q 378 135 378 67 q 378 147 378 138 q 377 167 378 156 q 376 192 376 179 q 374 214 375 204 l 569 214 m 271 214 q 275 174 274 194 q 276 143 276 153 q 243 -34 276 50 q 161 -176 210 -118 l 21 -144 q 63 -9 47 -85 q 79 135 79 67 q 79 147 79 138 q 78 167 79 156 q 77 192 78 179 q 75 214 76 204 l 271 214 z "},"…":{"ha":1389,"x_min":83,"x_max":1306,"o":"m 342 110 q 302 15 342 47 q 213 -18 263 -18 q 123 15 163 -18 q 83 110 83 47 q 123 205 83 172 q 213 238 163 238 q 302 205 263 238 q 342 110 342 172 m 824 110 q 784 15 824 47 q 694 -18 744 -18 q 605 15 644 -18 q 565 110 565 47 q 605 205 565 172 q 694 238 644 238 q 784 205 744 238 q 824 110 824 172 m 1306 110 q 1266 15 1306 47 q 1176 -18 1226 -18 q 1087 15 1126 -18 q 1047 110 1047 47 q 1087 205 1047 172 q 1176 238 1126 238 q 1266 205 1226 238 q 1306 110 1306 172 z "},"†":{"ha":686,"x_min":49,"x_max":638,"o":"m 428 522 l 428 206 q 421 -3 428 93 q 400 -201 414 -100 l 285 -201 q 264 -3 271 -100 q 257 206 257 93 l 257 522 l 49 522 l 49 682 l 257 682 l 257 963 l 428 963 l 428 682 l 638 682 l 638 522 l 428 522 z "},"‡":{"ha":686,"x_min":49,"x_max":638,"o":"m 428 153 q 419 -26 425 57 q 400 -201 413 -110 l 285 -201 q 265 -28 272 -112 q 257 153 258 57 l 49 153 l 49 313 l 257 313 l 257 522 l 49 522 l 49 682 l 257 682 l 257 963 l 428 963 l 428 682 l 638 682 l 638 522 l 428 522 l 428 313 l 638 313 l 638 153 l 428 153 z "},"ˆ":{"ha":553,"x_min":58,"x_max":492,"o":"m 492 896 l 415 804 l 276 911 l 138 804 l 58 896 l 276 1086 l 492 896 z "},"‰":{"ha":1833,"x_min":49,"x_max":1785,"o":"m 540 715 q 474 515 540 585 q 294 446 407 446 q 115 515 182 446 q 49 715 49 585 q 115 915 49 846 q 294 985 182 985 q 474 915 407 985 q 540 715 540 846 m 383 715 q 358 818 383 786 q 294 850 333 850 q 230 818 254 850 q 206 715 206 786 q 230 612 206 644 q 294 579 254 579 q 358 612 333 579 q 383 715 383 644 m 811 963 l 1004 963 l 461 0 l 268 0 l 811 963 m 1226 247 q 1160 47 1226 117 q 981 -22 1093 -22 q 801 47 868 -22 q 735 247 735 117 q 801 447 735 378 q 981 517 868 517 q 1160 447 1093 517 q 1226 247 1226 378 m 1069 247 q 1044 350 1069 318 q 981 382 1019 382 q 916 350 940 382 q 892 247 892 318 q 916 144 892 176 q 981 111 940 111 q 1044 144 1019 111 q 1069 247 1069 176 m 1785 247 q 1718 47 1785 117 q 1539 -22 1651 -22 q 1360 47 1426 -22 q 1293 247 1293 117 q 1360 447 1293 378 q 1539 517 1426 517 q 1718 447 1651 517 q 1785 247 1785 378 m 1628 247 q 1603 350 1628 318 q 1539 382 1578 382 q 1474 350 1499 382 q 1450 247 1450 318 q 1474 144 1450 176 q 1539 111 1499 111 q 1603 144 1578 111 q 1628 247 1628 176 z "},"Š":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 658 55 753 129 q 374 -19 564 -19 q 258 -12 310 -19 q 167 7 207 -4 q 99 31 128 18 q 51 54 71 43 l 113 226 q 219 184 156 203 q 374 165 282 165 m 208 1228 l 285 1319 l 424 1213 l 563 1319 l 642 1228 l 424 1038 l 208 1228 z "},"‹":{"ha":454,"x_min":28,"x_max":413,"o":"m 272 394 l 413 135 l 256 61 l 28 394 l 256 728 l 413 654 l 272 394 z "},"Œ":{"ha":1385,"x_min":69,"x_max":1336,"o":"m 758 0 q 687 -6 726 -4 q 615 -8 647 -8 q 392 21 493 -8 q 220 110 292 50 q 109 263 149 171 q 69 482 69 356 q 109 700 69 608 q 220 852 149 792 q 392 942 292 913 q 615 971 493 971 q 687 969 647 971 q 758 963 726 967 l 1304 963 l 1304 781 l 894 781 l 894 592 l 1256 592 l 1256 414 l 894 414 l 894 182 l 1336 182 l 1336 0 l 758 0 m 613 175 q 644 175 629 175 q 685 176 658 175 l 685 786 q 644 788 657 788 q 613 788 632 788 q 371 709 450 788 q 292 482 292 631 q 371 254 292 333 q 613 175 450 175 z "},"‘":{"ha":338,"x_min":56,"x_max":317,"o":"m 61 688 q 57 728 58 707 q 56 758 56 749 q 89 935 56 851 q 171 1078 122 1019 l 317 1044 q 274 910 290 985 q 258 767 258 835 q 258 755 258 764 q 259 734 258 746 q 260 710 260 722 q 263 688 261 697 l 61 688 z "},"’":{"ha":338,"x_min":21,"x_max":282,"o":"m 276 1065 q 281 1025 279 1046 q 282 994 282 1004 q 249 817 282 901 q 167 675 215 733 l 21 708 q 63 843 47 768 q 79 986 79 918 q 79 998 79 989 q 78 1019 79 1007 q 77 1043 78 1031 q 75 1065 76 1056 l 276 1065 z "},"“":{"ha":631,"x_min":56,"x_max":610,"o":"m 61 688 q 57 728 58 707 q 56 758 56 749 q 89 935 56 851 q 171 1078 122 1019 l 311 1046 q 269 910 285 986 q 253 767 253 835 q 253 755 253 764 q 253 734 253 746 q 255 710 254 722 q 257 688 256 697 l 61 688 m 360 688 q 356 728 357 707 q 354 758 354 749 q 388 935 354 851 q 469 1078 421 1019 l 610 1046 q 567 910 583 986 q 551 767 551 835 q 551 755 551 764 q 552 734 551 746 q 553 710 553 722 q 556 688 554 697 l 360 688 z "},"”":{"ha":631,"x_min":21,"x_max":575,"o":"m 569 1065 q 574 1025 572 1046 q 575 994 575 1004 q 542 817 575 901 q 460 675 508 733 l 319 707 q 362 842 346 767 q 378 986 378 918 q 378 998 378 989 q 377 1019 378 1007 q 376 1043 376 1031 q 374 1065 375 1056 l 569 1065 m 271 1065 q 275 1025 274 1046 q 276 994 276 1004 q 243 817 276 901 q 161 675 210 733 l 21 707 q 63 842 47 767 q 79 986 79 918 q 79 998 79 989 q 78 1019 79 1007 q 77 1043 78 1031 q 75 1065 76 1056 l 271 1065 z "},"•":{"ha":506,"x_min":53,"x_max":453,"o":"m 453 490 q 439 415 453 450 q 399 352 425 379 q 335 309 372 325 q 253 293 299 293 q 170 309 207 293 q 107 352 133 325 q 67 415 81 379 q 53 490 53 450 q 67 565 53 529 q 107 628 81 601 q 170 672 133 656 q 253 688 207 688 q 335 672 299 688 q 399 628 372 656 q 439 565 425 601 q 453 490 453 529 z "},"–":{"ha":694,"x_min":0,"x_max":694,"o":"m 0 501 l 694 501 l 694 329 l 0 329 l 0 501 z "},"—":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 0 501 l 1389 501 l 1389 329 l 0 329 l 0 501 z "},"˜":{"ha":518,"x_min":6,"x_max":519,"o":"m 519 985 q 497 939 511 964 q 461 892 482 914 q 414 857 440 871 q 356 843 388 843 q 309 851 331 843 q 267 867 288 858 q 225 884 246 876 q 182 892 204 892 q 136 874 154 892 q 107 832 118 856 l 6 899 q 28 944 14 919 q 64 991 43 969 q 111 1026 85 1013 q 169 1040 138 1040 q 216 1033 194 1040 q 258 1016 238 1025 q 299 999 279 1007 q 343 992 319 992 q 389 1010 371 992 q 418 1051 407 1028 l 519 985 z "},"™":{"ha":1186,"x_min":42,"x_max":1144,"o":"m 489 963 l 489 819 l 347 819 l 347 474 l 183 474 l 183 819 l 42 819 l 42 963 l 489 963 m 1099 963 q 1123 763 1113 881 q 1144 474 1133 646 l 985 474 l 979 733 l 897 525 l 788 525 l 706 732 q 705 644 706 688 q 703 564 704 600 q 702 503 703 528 q 701 474 701 478 l 543 474 q 564 763 553 646 q 586 963 575 881 l 733 963 q 789 835 763 900 q 843 708 815 771 q 899 840 871 771 q 950 963 928 910 l 1099 963 z "},"š":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 m 144 1004 l 221 1096 l 360 989 l 499 1096 l 578 1004 l 360 814 l 144 1004 z "},"›":{"ha":454,"x_min":42,"x_max":426,"o":"m 42 654 l 199 728 l 426 394 l 199 61 l 42 135 l 182 394 l 42 654 z "},"œ":{"ha":1301,"x_min":63,"x_max":1239,"o":"m 939 -19 q 778 9 850 -19 q 658 96 707 38 q 550 10 613 40 q 417 -19 488 -19 q 271 8 336 -19 q 159 87 206 36 q 88 209 113 138 q 63 367 63 281 q 88 524 63 453 q 161 644 114 594 q 274 722 208 694 q 417 750 339 750 q 668 631 578 750 q 779 724 718 697 q 903 750 840 750 q 1149 656 1058 750 q 1239 375 1239 561 q 1238 335 1239 357 q 1235 297 1236 314 l 765 297 q 825 196 772 233 q 967 158 878 158 q 1079 169 1025 158 q 1168 194 1133 179 l 1196 26 q 1151 10 1179 18 q 1090 -5 1124 1 q 1017 -15 1056 -11 q 939 -19 978 -19 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 1039 439 q 1030 490 1038 465 q 1006 535 1022 515 q 965 567 990 554 q 906 579 940 579 q 845 567 869 579 q 804 536 821 556 q 778 491 788 517 q 765 439 769 465 l 1039 439 z "},"Ÿ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 304 1058 q 229 1087 261 1058 q 197 1164 197 1115 q 229 1241 197 1213 q 304 1269 261 1269 q 379 1241 347 1269 q 411 1164 411 1213 q 379 1087 411 1115 q 304 1058 347 1058 m 614 1058 q 539 1087 571 1058 q 507 1164 507 1115 q 539 1241 507 1213 q 614 1269 571 1269 q 689 1241 657 1269 q 721 1164 721 1213 q 689 1087 721 1115 q 614 1058 657 1058 z "}," ":{"ha":333,"x_min":0,"x_max":0,"o":""},"¡":{"ha":397,"x_min":69,"x_max":328,"o":"m 310 -250 l 89 -250 l 89 6 q 98 215 89 118 q 121 413 107 313 l 279 413 q 301 215 293 313 q 310 6 310 118 l 310 -250 m 328 603 q 288 508 328 542 q 199 475 249 475 q 109 508 149 475 q 69 603 69 542 q 109 697 69 664 q 199 731 149 731 q 288 697 249 731 q 328 603 328 664 z "},"¢":{"ha":789,"x_min":63,"x_max":653,"o":"m 311 51 q 123 182 183 86 q 63 407 63 278 q 79 524 63 468 q 128 626 96 581 q 207 706 161 672 q 311 758 253 740 l 311 961 l 508 961 l 508 774 q 577 760 544 768 q 642 738 610 751 l 596 572 q 533 592 567 583 q 456 600 499 600 q 321 548 368 600 q 274 407 274 496 q 318 263 274 313 q 464 214 363 214 q 544 221 501 214 q 624 243 588 228 l 653 74 q 589 53 625 63 q 508 39 553 44 l 508 -151 l 311 -151 l 311 51 z "},"£":{"ha":789,"x_min":32,"x_max":699,"o":"m 354 547 l 585 547 l 585 379 l 354 379 q 348 275 353 331 q 336 174 343 219 l 699 174 l 699 0 l 108 0 q 142 206 133 111 q 153 379 150 300 l 32 379 l 32 547 l 153 547 l 153 621 q 178 794 153 725 q 247 904 203 863 q 351 963 290 946 q 485 981 413 981 q 589 969 540 981 q 683 939 638 958 l 632 776 q 572 799 600 792 q 503 807 543 806 q 442 800 469 807 q 396 774 415 793 q 365 721 376 754 q 354 638 354 688 l 354 547 z "},"¤":{"ha":789,"x_min":35,"x_max":754,"o":"m 394 756 q 460 750 429 756 q 522 731 492 744 l 625 829 l 754 703 l 654 607 q 683 482 683 553 q 654 357 683 411 l 754 261 l 624 133 l 521 233 q 461 214 492 219 q 394 208 431 208 q 328 214 360 208 q 267 233 297 219 l 164 135 l 35 261 l 135 357 q 106 482 106 411 q 135 607 106 553 l 35 703 l 165 831 l 268 731 q 328 750 297 744 q 394 756 358 756 m 508 482 q 475 572 508 542 q 394 603 442 603 q 314 572 347 603 q 281 482 281 542 q 314 392 281 422 q 394 361 347 361 q 475 392 442 361 q 508 482 508 422 z "},"¥":{"ha":789,"x_min":-7,"x_max":796,"o":"m 290 0 l 290 154 l 85 154 l 85 292 l 290 292 l 290 382 l 85 382 l 85 519 l 224 519 q 163 631 194 572 q 100 747 131 689 q 42 861 69 806 q -7 963 14 917 l 229 963 q 312 770 272 867 q 399 582 351 674 q 482 772 444 674 q 561 963 519 869 l 796 963 q 687 744 743 856 q 567 519 631 632 l 706 519 l 706 382 l 500 382 l 500 292 l 706 292 l 706 154 l 500 154 l 500 0 l 290 0 z "},"¦":{"ha":419,"x_min":111,"x_max":308,"o":"m 111 294 l 308 294 l 308 -257 l 111 -257 l 111 294 m 111 1088 l 308 1088 l 308 536 l 111 536 l 111 1088 z "},"§":{"ha":715,"x_min":39,"x_max":669,"o":"m 90 75 q 151 53 122 63 q 208 37 179 43 q 267 27 236 31 q 335 24 297 24 q 413 35 386 24 q 439 76 439 47 q 433 101 439 90 q 413 121 428 111 q 374 140 399 131 q 313 163 350 150 q 210 201 258 181 q 127 251 163 221 q 72 323 92 281 q 51 428 51 365 q 83 538 51 493 q 158 625 114 582 q 92 758 92 681 q 170 925 92 865 q 396 985 249 985 q 527 971 460 985 q 649 935 594 957 l 597 768 q 505 799 553 788 q 394 810 457 810 q 320 798 342 810 q 299 763 299 786 q 322 716 299 733 q 408 678 346 699 q 518 635 469 657 q 600 583 567 613 q 651 514 633 554 q 669 417 669 474 q 663 362 669 386 q 642 317 656 338 q 610 276 629 296 q 567 235 590 256 q 628 165 610 203 q 646 75 646 126 q 346 -151 646 -151 q 163 -133 239 -151 q 39 -90 88 -115 l 90 75 m 289 533 q 252 490 267 514 q 238 443 238 467 q 284 363 238 390 q 426 303 331 335 q 463 346 449 322 q 478 393 478 369 q 466 438 478 419 q 431 473 454 457 q 372 503 408 489 q 289 533 336 517 z "},"¨":{"ha":744,"x_min":110,"x_max":633,"o":"m 217 836 q 142 865 174 836 q 110 942 110 893 q 142 1019 110 990 q 217 1047 174 1047 q 292 1019 260 1047 q 324 942 324 990 q 292 865 324 893 q 217 836 260 836 m 526 836 q 451 865 483 836 q 419 942 419 893 q 451 1019 419 990 q 526 1047 483 1047 q 601 1019 569 1047 q 633 942 633 990 q 601 865 633 893 q 526 836 569 836 z "},"©":{"ha":1106,"x_min":69,"x_max":1036,"o":"m 1036 482 q 997 270 1036 364 q 890 112 957 176 q 736 13 824 47 q 553 -21 649 -21 q 369 13 457 -21 q 215 112 282 47 q 109 270 149 176 q 69 482 69 364 q 109 694 69 600 q 215 852 149 788 q 369 951 282 917 q 553 985 457 985 q 736 951 649 985 q 890 852 824 917 q 997 694 957 788 q 1036 482 1036 600 m 894 482 q 869 633 894 565 q 799 750 844 701 q 691 825 754 799 q 553 851 628 851 q 415 825 478 851 q 306 750 351 799 q 236 633 261 701 q 211 482 211 565 q 236 331 211 399 q 306 214 261 263 q 415 139 351 165 q 553 113 478 113 q 691 139 628 113 q 799 214 754 165 q 869 331 844 263 q 894 482 894 399 m 575 222 q 386 290 451 222 q 321 485 321 358 q 390 678 321 610 q 571 746 458 746 q 678 728 638 746 q 735 701 719 710 l 690 579 q 647 598 671 590 q 583 606 622 606 q 510 576 538 606 q 482 492 482 547 q 486 444 482 467 q 501 403 490 421 q 532 375 513 386 q 583 364 551 364 q 653 374 625 364 q 703 392 681 383 l 742 265 q 681 239 724 256 q 575 222 638 222 z "},"ª":{"ha":554,"x_min":33,"x_max":501,"o":"m 278 546 q 320 547 300 546 q 353 550 340 549 l 353 658 q 325 663 343 661 q 292 665 307 665 q 219 654 250 665 q 189 607 189 643 q 213 558 189 571 q 278 546 238 546 m 265 983 q 377 969 332 983 q 450 926 422 954 q 490 860 478 899 q 501 771 501 821 l 501 456 q 409 438 469 449 q 268 428 349 428 q 96 467 158 428 q 33 603 33 506 q 52 681 33 650 q 102 732 71 713 q 176 760 133 751 q 264 768 218 768 q 315 765 292 768 q 353 760 338 763 l 353 774 q 329 834 353 813 q 249 856 306 856 q 171 850 210 856 q 104 835 132 844 l 83 958 q 162 975 110 967 q 265 983 214 983 z "},"«":{"ha":829,"x_min":28,"x_max":788,"o":"m 272 394 l 413 135 l 256 61 l 28 394 l 256 728 l 413 654 l 272 394 m 647 394 l 788 135 l 631 61 l 403 394 l 631 728 l 788 654 l 647 394 z "},"¬":{"ha":789,"x_min":69,"x_max":722,"o":"m 722 65 l 533 65 l 533 390 l 69 390 l 69 564 l 722 564 l 722 65 z "},"­":{"ha":472,"x_min":35,"x_max":438,"o":"m 35 508 l 438 508 l 438 321 l 35 321 l 35 508 z "},"®":{"ha":1106,"x_min":69,"x_max":1036,"o":"m 1036 482 q 997 269 1036 363 q 890 112 957 176 q 736 13 824 47 q 553 -21 649 -21 q 369 13 457 -21 q 215 112 282 47 q 109 269 149 176 q 69 482 69 363 q 109 694 69 600 q 215 852 149 788 q 369 951 282 917 q 553 985 457 985 q 736 951 649 985 q 890 852 824 917 q 997 694 957 788 q 1036 482 1036 600 m 894 482 q 869 633 894 565 q 799 750 844 701 q 691 825 754 799 q 553 851 628 851 q 415 825 478 851 q 306 750 351 799 q 236 633 261 701 q 211 482 211 565 q 236 331 211 399 q 306 214 261 263 q 415 139 351 165 q 553 113 478 113 q 691 139 628 113 q 799 214 754 165 q 869 331 844 263 q 894 482 894 399 m 638 246 q 597 338 614 299 q 560 410 581 378 l 504 410 l 504 246 l 369 246 l 369 721 q 458 737 417 732 q 529 742 499 742 q 753 574 753 742 q 678 447 753 488 q 705 402 693 424 q 728 358 717 381 q 752 308 740 335 q 779 246 764 281 l 638 246 m 504 518 l 529 518 q 596 530 574 518 q 618 575 618 542 q 599 614 618 603 q 542 625 579 625 q 522 624 532 625 q 504 622 511 624 l 504 518 z "},"¯":{"ha":522,"x_min":38,"x_max":485,"o":"m 38 1007 l 485 1007 l 485 865 l 38 865 l 38 1007 z "},"°":{"ha":504,"x_min":28,"x_max":475,"o":"m 251 1085 q 337 1070 296 1085 q 408 1027 378 1056 q 457 959 439 999 q 475 869 475 919 q 457 780 475 819 q 408 712 439 740 q 337 669 378 683 q 251 654 296 654 q 166 669 207 654 q 94 712 125 683 q 46 780 64 740 q 28 869 28 819 q 46 959 28 919 q 94 1027 64 999 q 166 1070 125 1056 q 251 1085 207 1085 m 251 790 q 304 812 281 790 q 328 869 328 833 q 304 927 328 906 q 251 949 281 949 q 199 927 222 949 q 175 869 175 906 q 199 812 175 833 q 251 790 222 790 z "},"±":{"ha":789,"x_min":68,"x_max":721,"o":"m 68 632 l 300 632 l 300 868 l 489 868 l 489 632 l 721 632 l 721 458 l 489 458 l 489 222 l 300 222 l 300 458 l 68 458 l 68 632 m 68 174 l 721 174 l 721 0 l 68 0 l 68 174 z "},"²":{"ha":504,"x_min":22,"x_max":447,"o":"m 433 814 q 424 758 433 783 q 398 712 414 733 q 361 672 382 690 q 319 635 340 653 q 271 591 296 615 q 231 546 246 567 l 447 546 l 447 419 l 49 419 q 47 440 47 431 q 47 458 47 449 q 84 581 47 526 q 192 696 121 636 q 252 751 229 728 q 275 800 275 775 q 263 833 275 821 q 226 846 250 846 q 152 830 186 846 q 94 794 118 814 l 22 903 q 115 959 58 933 q 233 985 171 985 q 326 972 288 985 q 388 937 364 960 q 422 883 411 914 q 433 814 433 851 z "},"³":{"ha":504,"x_min":24,"x_max":444,"o":"m 207 539 q 275 553 256 539 q 294 590 294 568 q 197 647 294 647 l 140 647 l 140 761 l 197 761 q 250 774 229 761 q 271 811 271 786 q 210 856 271 856 q 146 845 178 856 q 85 821 114 835 l 32 931 q 119 969 67 953 q 221 985 171 985 q 315 972 276 985 q 376 938 353 960 q 408 888 399 917 q 418 829 418 860 q 405 774 418 800 q 360 722 392 747 q 424 667 404 701 q 444 589 444 632 q 432 518 444 551 q 392 460 419 485 q 319 422 364 436 q 208 408 274 408 q 159 411 185 408 q 108 419 133 414 q 62 431 83 425 q 24 446 40 438 l 56 569 q 135 544 103 550 q 207 539 168 539 z "},"´":{"ha":397,"x_min":36,"x_max":360,"o":"m 360 993 l 131 800 l 36 885 l 233 1110 l 360 993 z "},"µ":{"ha":825,"x_min":97,"x_max":728,"o":"m 304 731 l 304 339 q 312 251 304 286 q 335 197 319 217 q 375 168 351 176 q 431 160 399 160 q 477 162 453 160 q 521 167 501 164 l 521 731 l 728 731 l 728 25 q 598 -2 674 10 q 435 -14 522 -14 q 361 -7 399 -14 q 297 13 324 0 q 302 -44 300 -15 q 304 -124 304 -72 l 304 -231 l 97 -231 l 97 731 l 304 731 z "},"¶":{"ha":986,"x_min":56,"x_max":875,"o":"m 360 358 q 130 451 204 379 q 56 661 56 522 q 174 893 56 813 q 517 974 293 974 q 608 971 560 974 q 703 964 656 968 q 794 953 750 960 q 875 938 839 946 l 875 -258 l 679 -258 l 679 797 q 624 801 660 800 q 557 803 588 803 l 557 -258 l 360 -258 l 360 358 z "},"·":{"ha":342,"x_min":42,"x_max":300,"o":"m 300 410 q 260 315 300 347 q 171 282 221 282 q 81 315 121 282 q 42 410 42 347 q 81 505 42 472 q 171 538 121 538 q 260 505 221 538 q 300 410 300 472 z "},"¸":{"ha":453,"x_min":63,"x_max":376,"o":"m 299 -56 q 360 -108 343 -78 q 376 -171 376 -139 q 324 -272 376 -237 q 185 -307 272 -307 q 124 -302 154 -307 q 63 -289 93 -297 l 88 -168 q 123 -177 97 -171 q 174 -183 149 -183 q 208 -176 193 -183 q 224 -149 222 -168 q 210 -118 225 -132 q 164 -97 196 -104 l 147 -93 q 159 -61 151 -79 q 175 -26 167 -43 q 190 6 183 -8 q 201 28 197 21 l 339 28 q 318 -13 331 13 q 299 -56 306 -39 z "},"¹":{"ha":504,"x_min":53,"x_max":382,"o":"m 53 858 q 166 912 111 882 q 261 974 221 942 l 382 974 l 382 419 l 224 419 l 224 794 q 167 766 196 779 q 96 738 138 753 l 53 858 z "},"º":{"ha":635,"x_min":46,"x_max":589,"o":"m 589 703 q 569 586 589 638 q 513 499 549 535 q 428 444 478 464 q 318 425 378 425 q 208 444 258 425 q 122 499 158 464 q 66 586 86 535 q 46 703 46 638 q 66 822 46 769 q 122 910 86 874 q 208 965 158 946 q 318 985 258 985 q 428 965 378 985 q 513 910 478 946 q 569 822 549 874 q 589 703 589 769 m 431 703 q 401 808 431 769 q 318 846 372 846 q 235 808 265 846 q 204 703 204 769 q 234 602 204 640 q 318 564 264 564 q 401 602 372 564 q 431 703 431 640 z "},"»":{"ha":829,"x_min":42,"x_max":801,"o":"m 42 654 l 199 728 l 426 394 l 199 61 l 42 135 l 182 394 l 42 654 m 417 654 l 574 728 l 801 394 l 574 61 l 417 135 l 557 394 l 417 654 z "},"¼":{"ha":1219,"x_min":28,"x_max":1197,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 942 963 l 449 0 l 257 0 l 753 963 l 942 963 m 1133 557 l 1133 236 l 1197 236 l 1197 121 l 1133 121 l 1133 1 l 1003 1 l 1003 121 l 743 121 l 743 221 q 862 399 801 319 q 996 557 922 479 l 1133 557 m 1003 403 q 942 326 971 367 q 889 236 914 285 l 1003 236 l 1003 403 z "},"½":{"ha":1219,"x_min":28,"x_max":1163,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 903 963 l 410 0 l 218 0 l 714 963 l 903 963 m 1149 397 q 1139 342 1149 367 q 1113 295 1129 317 q 1076 255 1097 274 q 1035 218 1056 236 q 986 174 1011 199 q 946 129 961 150 l 1163 129 l 1163 3 l 764 3 q 763 23 763 14 q 763 42 763 32 q 799 165 763 110 q 907 279 836 219 q 967 335 944 311 q 990 383 990 358 q 978 417 990 404 q 942 429 965 429 q 867 413 901 429 q 810 378 833 397 l 738 486 q 830 542 774 517 q 949 568 886 568 q 1041 556 1003 568 q 1103 520 1079 543 q 1138 466 1126 497 q 1149 397 1149 435 z "},"¾":{"ha":1219,"x_min":32,"x_max":1197,"o":"m 215 539 q 283 553 264 539 q 303 590 303 568 q 206 647 303 647 l 149 647 l 149 761 l 206 761 q 258 774 238 761 q 279 811 279 786 q 218 856 279 856 q 154 845 186 856 q 93 821 122 835 l 40 931 q 127 969 75 953 q 229 985 179 985 q 323 972 285 985 q 384 938 361 960 q 417 888 407 917 q 426 829 426 860 q 413 774 426 800 q 368 722 400 747 q 433 667 413 701 q 453 589 453 632 q 440 518 453 551 q 400 460 428 485 q 327 422 372 436 q 217 408 282 408 q 167 411 193 408 q 117 419 142 414 q 70 431 92 425 q 32 446 49 438 l 64 569 q 144 544 111 550 q 215 539 176 539 m 971 963 l 478 0 l 286 0 l 782 963 l 971 963 m 1133 557 l 1133 236 l 1197 236 l 1197 121 l 1133 121 l 1133 1 l 1003 1 l 1003 121 l 743 121 l 743 221 q 862 399 801 319 q 996 557 922 479 l 1133 557 m 1003 403 q 942 326 971 367 q 889 236 914 285 l 1003 236 l 1003 403 z "},"¿":{"ha":632,"x_min":35,"x_max":604,"o":"m 353 -97 q 447 -85 403 -97 q 546 -44 492 -72 l 604 -201 q 476 -255 550 -236 q 332 -274 403 -274 q 185 -250 243 -274 q 94 -190 128 -226 q 48 -111 61 -154 q 35 -29 35 -68 q 47 42 35 10 q 76 103 58 75 q 117 156 94 131 q 164 203 140 181 q 199 238 181 219 q 231 278 217 257 q 256 322 246 299 q 265 368 265 344 q 265 385 265 374 q 264 404 265 396 l 447 404 q 451 373 450 390 q 451 343 451 356 q 442 272 451 304 q 416 213 432 240 q 379 163 400 186 q 336 118 358 140 q 278 55 304 86 q 251 -17 251 24 q 277 -74 251 -50 q 353 -97 303 -97 m 224 601 q 263 696 224 663 q 353 729 303 729 q 442 696 403 729 q 482 601 482 663 q 442 507 482 540 q 353 474 403 474 q 263 507 303 474 q 224 601 224 540 z "},"À":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 456 1332 l 653 1107 l 558 1022 l 329 1215 l 456 1332 z "},"Á":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 661 1215 l 432 1022 l 338 1107 l 535 1332 l 661 1215 z "},"Â":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 715 1126 l 639 1035 l 500 1142 l 361 1035 l 282 1126 l 500 1317 l 715 1126 z "},"Ã":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 761 1211 q 738 1165 753 1190 q 703 1119 724 1140 q 656 1083 682 1097 q 597 1069 629 1069 q 551 1077 572 1069 q 508 1094 529 1085 q 467 1110 488 1103 q 424 1118 446 1118 q 378 1100 396 1118 q 349 1058 360 1082 l 247 1125 q 270 1171 256 1146 q 306 1217 285 1196 q 353 1253 326 1239 q 411 1267 379 1267 q 458 1259 436 1267 q 500 1242 479 1251 q 541 1226 521 1233 q 585 1218 561 1218 q 631 1236 613 1218 q 660 1278 649 1254 l 761 1211 z "},"Ä":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 336 1058 q 261 1087 293 1058 q 229 1164 229 1115 q 261 1241 229 1213 q 336 1269 293 1269 q 411 1241 379 1269 q 443 1164 443 1213 q 411 1087 443 1115 q 336 1058 379 1058 m 646 1058 q 571 1087 603 1058 q 539 1164 539 1115 q 571 1241 539 1213 q 646 1269 603 1269 q 721 1241 689 1269 q 753 1164 753 1213 q 721 1087 753 1115 q 646 1058 689 1058 z "},"Å":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 114 281 67 151 q 207 526 161 411 q 297 743 253 640 q 389 944 342 846 q 351 995 365 965 q 338 1065 338 1025 q 351 1134 338 1104 q 387 1184 364 1164 q 439 1215 410 1204 q 500 1225 468 1225 q 563 1215 533 1225 q 616 1184 593 1204 q 652 1134 639 1164 q 665 1065 665 1104 q 651 994 665 1025 q 613 944 636 964 q 703 743 658 846 q 794 526 749 640 q 887 281 839 411 q 988 0 935 151 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 564 1065 q 544 1114 564 1097 q 500 1131 525 1131 q 457 1114 476 1131 q 438 1065 438 1097 q 457 1017 438 1033 q 500 1000 476 1000 q 544 1017 525 1000 q 564 1065 564 1033 z "},"Æ":{"ha":1381,"x_min":14,"x_max":1332,"o":"m 681 228 l 375 228 q 311 114 346 175 q 251 0 276 53 l 14 0 q 329 542 183 304 q 606 963 475 781 l 1300 963 l 1300 781 l 890 781 l 890 592 l 1251 592 l 1251 414 l 890 414 l 890 182 l 1332 182 l 1332 0 l 681 0 l 681 228 m 681 753 q 631 676 658 721 q 573 584 603 632 q 515 488 543 536 q 463 400 486 439 l 681 400 l 681 753 z "},"Ç":{"ha":900,"x_min":69,"x_max":872,"o":"m 600 -18 q 590 -39 594 -29 q 583 -56 586 -49 q 644 -108 628 -78 q 661 -171 661 -139 q 608 -272 661 -237 q 469 -307 556 -307 q 408 -302 439 -307 q 347 -289 378 -297 l 372 -168 q 408 -177 382 -171 q 458 -183 433 -183 q 492 -176 478 -183 q 508 -149 507 -168 q 495 -118 510 -132 q 449 -97 481 -104 l 432 -93 q 447 -55 438 -76 q 464 -14 456 -33 q 169 137 269 10 q 69 482 69 264 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 762 8 832 28 q 600 -18 692 -12 z "},"È":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 392 1332 l 589 1107 l 494 1022 l 265 1215 l 392 1332 z "},"É":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 611 1215 l 382 1022 l 288 1107 l 485 1332 l 611 1215 z "},"Ê":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 654 1126 l 578 1035 l 439 1142 l 300 1035 l 221 1126 l 439 1317 l 654 1126 z "},"Ë":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 278 1058 q 203 1087 235 1058 q 171 1164 171 1115 q 203 1241 171 1213 q 278 1269 235 1269 q 353 1241 321 1269 q 385 1164 385 1213 q 353 1087 385 1115 q 278 1058 321 1058 m 588 1058 q 513 1087 544 1058 q 481 1164 481 1115 q 513 1241 481 1213 q 588 1269 544 1269 q 663 1241 631 1269 q 694 1164 694 1213 q 663 1087 694 1115 q 588 1058 631 1058 z "},"Ì":{"ha":439,"x_min":49,"x_max":372,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 175 1332 l 372 1107 l 278 1022 l 49 1215 l 175 1332 z "},"Í":{"ha":439,"x_min":69,"x_max":393,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 393 1215 l 164 1022 l 69 1107 l 267 1332 l 393 1215 z "},"Î":{"ha":439,"x_min":6,"x_max":439,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 439 1126 l 363 1035 l 224 1142 l 85 1035 l 6 1126 l 224 1317 l 439 1126 z "},"Ï":{"ha":439,"x_min":-39,"x_max":485,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 68 1058 q -7 1087 25 1058 q -39 1164 -39 1115 q -7 1241 -39 1213 q 68 1269 25 1269 q 143 1241 111 1269 q 175 1164 175 1213 q 143 1087 175 1115 q 68 1058 111 1058 m 378 1058 q 303 1087 335 1058 q 271 1164 271 1115 q 303 1241 271 1213 q 378 1269 335 1269 q 453 1241 421 1269 q 485 1164 485 1213 q 453 1087 485 1115 q 378 1058 421 1058 z "},"Ð":{"ha":1039,"x_min":14,"x_max":969,"o":"m 343 176 q 378 174 358 175 q 426 174 399 174 q 667 256 589 174 q 746 482 746 338 q 671 711 746 633 q 433 789 596 789 q 388 788 411 789 q 343 785 364 788 l 343 579 l 518 579 l 518 419 l 343 419 l 343 176 m 969 482 q 931 264 969 357 q 820 110 892 171 q 646 18 749 49 q 415 -12 543 -12 q 279 -8 357 -12 q 126 13 201 -3 l 126 419 l 14 419 l 14 579 l 126 579 l 126 950 q 283 969 201 964 q 422 974 364 974 q 647 946 546 974 q 819 858 747 918 q 931 706 892 799 q 969 482 969 613 z "},"Ñ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 785 1211 q 762 1165 776 1190 q 726 1119 747 1140 q 679 1083 706 1097 q 621 1069 653 1069 q 574 1077 596 1069 q 532 1094 553 1085 q 490 1110 511 1103 q 447 1118 469 1118 q 401 1100 419 1118 q 372 1058 383 1082 l 271 1125 q 294 1171 279 1146 q 329 1217 308 1196 q 376 1253 350 1239 q 435 1267 403 1267 q 481 1259 460 1267 q 524 1242 503 1251 q 565 1226 544 1233 q 608 1218 585 1218 q 654 1236 636 1218 q 683 1278 672 1254 l 785 1211 z "},"Ò":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 504 1332 l 701 1107 l 607 1022 l 378 1215 l 504 1332 z "},"Ó":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 713 1215 l 483 1022 l 389 1107 l 586 1332 l 713 1215 z "},"Ô":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 765 1126 l 689 1035 l 550 1142 l 411 1035 l 332 1126 l 550 1317 l 765 1126 z "},"Õ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 808 1211 q 785 1165 800 1190 q 750 1119 771 1140 q 703 1083 729 1097 q 644 1069 676 1069 q 598 1077 619 1069 q 556 1094 576 1085 q 514 1110 535 1103 q 471 1118 493 1118 q 425 1100 443 1118 q 396 1058 407 1082 l 294 1125 q 317 1171 303 1146 q 353 1217 332 1196 q 400 1253 374 1239 q 458 1267 426 1267 q 505 1259 483 1267 q 547 1242 526 1251 q 588 1226 568 1233 q 632 1218 608 1218 q 678 1236 660 1218 q 707 1278 696 1254 l 808 1211 z "},"Ö":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 385 1058 q 310 1087 342 1058 q 278 1164 278 1115 q 310 1241 278 1213 q 385 1269 342 1269 q 460 1241 428 1269 q 492 1164 492 1213 q 460 1087 492 1115 q 385 1058 428 1058 m 694 1058 q 619 1087 651 1058 q 588 1164 588 1115 q 619 1241 588 1213 q 694 1269 651 1269 q 769 1241 738 1269 q 801 1164 801 1213 q 769 1087 801 1115 q 694 1058 738 1058 z "},"×":{"ha":789,"x_min":86,"x_max":704,"o":"m 583 725 l 704 604 l 515 415 l 704 228 l 583 107 l 394 296 l 207 107 l 86 228 l 275 415 l 86 604 l 207 725 l 394 536 l 583 725 z "},"Ø":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 416 -5 479 -19 q 299 42 353 10 l 218 -62 l 100 25 l 185 133 q 100 283 131 196 q 69 482 69 369 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 796 924 686 985 l 874 1025 l 992 938 l 910 832 q 997 682 965 769 q 1028 482 1028 594 m 804 482 q 771 653 804 582 l 422 201 q 549 171 479 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 m 293 482 q 325 315 293 386 l 672 764 q 549 794 618 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 z "},"Ù":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 418 1332 l 615 1107 l 521 1022 l 292 1215 l 418 1332 z "},"Ú":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 679 1215 l 450 1022 l 356 1107 l 553 1332 l 679 1215 z "},"Û":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 706 1126 l 629 1035 l 490 1142 l 351 1035 l 272 1126 l 490 1317 l 706 1126 z "},"Ü":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 336 1058 q 261 1087 293 1058 q 229 1164 229 1115 q 261 1241 229 1213 q 336 1269 293 1269 q 411 1241 379 1269 q 443 1164 443 1213 q 411 1087 443 1115 q 336 1058 379 1058 m 646 1058 q 571 1087 603 1058 q 539 1164 539 1115 q 571 1241 539 1213 q 646 1269 603 1269 q 721 1241 689 1269 q 753 1164 753 1213 q 721 1087 753 1115 q 646 1058 689 1058 z "},"Ý":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 654 1215 l 425 1022 l 331 1107 l 528 1332 l 654 1215 z "},"Þ":{"ha":894,"x_min":111,"x_max":846,"o":"m 428 828 q 597 810 519 828 q 729 754 674 793 q 815 654 785 715 q 846 506 846 593 q 729 255 846 332 q 396 178 613 178 l 328 178 l 328 0 l 111 0 l 111 963 l 328 963 l 328 824 q 351 826 338 825 q 379 827 365 826 q 406 828 393 828 q 428 828 419 828 m 414 644 q 367 643 390 644 q 328 640 344 642 l 328 363 l 396 363 q 565 393 508 363 q 622 507 622 424 q 608 574 622 547 q 566 616 593 600 q 500 638 539 632 q 414 644 461 644 z "},"ß":{"ha":915,"x_min":97,"x_max":863,"o":"m 733 847 q 722 754 733 789 q 682 688 710 719 q 627 621 651 651 q 603 551 603 590 q 614 515 603 531 q 643 486 625 500 q 685 458 661 472 q 738 429 710 444 q 825 353 788 400 q 863 231 863 306 q 794 47 863 111 q 569 -17 726 -17 q 447 -3 493 -17 q 374 22 401 11 l 408 189 q 442 177 422 183 q 482 165 461 171 q 524 156 503 160 q 565 153 546 153 q 658 228 658 153 q 621 292 658 264 q 525 347 583 321 q 460 386 485 365 q 424 430 436 407 q 407 476 411 453 q 403 525 403 500 q 429 623 403 583 q 492 704 456 663 q 528 756 515 732 q 540 815 540 779 q 511 883 540 861 q 432 906 482 906 q 333 864 365 906 q 300 744 300 822 l 300 0 l 97 0 l 97 740 q 117 876 97 814 q 177 983 136 938 q 280 1053 218 1028 q 426 1078 342 1078 q 565 1059 507 1078 q 661 1009 624 1040 q 716 935 699 978 q 733 847 733 893 z "},"à":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 325 1110 l 522 885 l 428 800 l 199 993 l 325 1110 z "},"á":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 551 993 l 322 800 l 228 885 l 425 1110 l 551 993 z "},"â":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 578 896 l 501 804 l 363 911 l 224 804 l 144 896 l 363 1086 l 578 896 z "},"ã":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 632 985 q 609 939 624 964 q 574 892 594 914 q 526 857 553 871 q 468 843 500 843 q 422 851 443 843 q 379 867 400 858 q 338 884 358 876 q 294 892 317 892 q 249 874 267 892 q 219 832 231 856 l 118 899 q 141 944 126 919 q 176 991 156 969 q 224 1026 197 1013 q 282 1040 250 1040 q 328 1033 307 1040 q 371 1016 350 1025 q 412 999 392 1007 q 456 992 432 992 q 501 1010 483 992 q 531 1051 519 1028 l 632 985 z "},"ä":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 214 836 q 139 865 171 836 q 107 942 107 893 q 139 1019 107 990 q 214 1047 171 1047 q 289 1019 257 1047 q 321 942 321 990 q 289 865 321 893 q 214 836 257 836 m 524 836 q 449 865 481 836 q 417 942 417 893 q 449 1019 417 990 q 524 1047 481 1047 q 599 1019 567 1047 q 631 942 631 990 q 599 865 631 893 q 524 836 567 836 z "},"å":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 549 971 q 535 902 549 932 q 499 852 522 872 q 447 822 476 832 q 383 811 417 811 q 322 822 351 811 q 270 852 293 832 q 234 902 247 872 q 221 971 221 932 q 234 1040 221 1010 q 270 1090 247 1069 q 322 1120 293 1110 q 383 1131 351 1131 q 447 1120 417 1131 q 499 1090 476 1110 q 535 1040 522 1069 q 549 971 549 1010 m 447 971 q 428 1019 447 1003 q 383 1036 408 1036 q 340 1019 360 1036 q 321 971 321 1003 q 340 922 321 939 q 383 906 360 906 q 428 922 408 906 q 447 971 447 939 z "},"æ":{"ha":1214,"x_min":49,"x_max":1151,"o":"m 360 750 q 438 744 403 750 q 499 727 472 739 q 549 697 526 715 q 590 651 571 678 q 697 727 638 704 q 825 750 757 750 q 960 726 900 750 q 1063 654 1019 701 q 1128 537 1106 607 q 1151 375 1151 467 q 1150 335 1151 357 q 1147 297 1149 314 l 678 297 q 738 196 685 233 q 879 158 790 158 q 991 169 936 158 q 1081 194 1046 179 l 1108 26 q 1064 10 1092 18 q 1002 -5 1036 1 q 929 -15 968 -11 q 851 -19 890 -19 q 708 -1 769 -19 q 604 46 647 17 q 363 -15 500 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 465 q 447 548 479 518 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 376 144 q 455 149 419 144 q 517 165 490 154 q 490 247 497 215 q 482 310 483 278 q 436 314 463 313 q 396 315 410 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 950 439 q 941 490 949 465 q 917 535 933 515 q 877 567 901 554 q 817 579 853 579 q 757 567 782 579 q 715 536 732 556 q 690 491 699 517 q 676 439 681 465 l 950 439 z "},"ç":{"ha":694,"x_min":63,"x_max":653,"o":"m 456 -56 q 517 -108 500 -78 q 533 -171 533 -139 q 481 -272 533 -237 q 342 -307 428 -307 q 281 -302 311 -307 q 219 -289 250 -297 l 244 -168 q 280 -177 254 -171 q 331 -183 306 -183 q 365 -176 350 -183 q 381 -149 379 -168 q 367 -118 382 -132 q 321 -97 353 -104 l 304 -93 q 319 -52 310 -75 q 339 -10 329 -29 q 215 38 267 4 q 128 122 163 72 q 78 233 94 171 q 63 365 63 296 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 574 -6 621 4 q 472 -18 528 -15 q 463 -39 467 -29 q 456 -56 458 -49 z "},"è":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 361 1110 l 558 885 l 464 800 l 235 993 l 361 1110 z "},"é":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 581 993 l 351 800 l 257 885 l 454 1110 l 581 993 z "},"ê":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 621 896 l 544 804 l 406 911 l 267 804 l 188 896 l 406 1086 l 621 896 z "},"ë":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 258 836 q 183 865 215 836 q 151 942 151 893 q 183 1019 151 990 q 258 1047 215 1047 q 333 1019 301 1047 q 365 942 365 990 q 333 865 365 893 q 258 836 301 836 m 568 836 q 493 865 525 836 q 461 942 461 893 q 493 1019 461 990 q 568 1047 525 1047 q 643 1019 611 1047 q 675 942 675 990 q 643 865 675 893 q 568 836 611 836 z "},"ì":{"ha":401,"x_min":31,"x_max":354,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 157 1110 l 354 885 l 260 800 l 31 993 l 157 1110 z "},"í":{"ha":401,"x_min":57,"x_max":381,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 381 993 l 151 800 l 57 885 l 254 1110 l 381 993 z "},"î":{"ha":401,"x_min":-14,"x_max":419,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 419 896 l 343 804 l 204 911 l 65 804 l -14 896 l 204 1086 l 419 896 z "},"ï":{"ha":401,"x_min":-67,"x_max":457,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 40 836 q -35 865 -3 836 q -67 942 -67 893 q -35 1019 -67 990 q 40 1047 -3 1047 q 115 1019 83 1047 q 147 942 147 990 q 115 865 147 893 q 40 836 83 836 m 350 836 q 275 865 307 836 q 243 942 243 893 q 275 1019 243 990 q 350 1047 307 1047 q 425 1019 393 1047 q 457 942 457 990 q 425 865 457 893 q 350 836 393 836 z "},"ð":{"ha":835,"x_min":63,"x_max":794,"o":"m 671 838 q 747 657 719 754 q 775 450 775 560 q 753 260 775 346 q 688 112 732 174 q 574 15 643 50 q 411 -19 506 -19 q 258 8 324 -19 q 149 83 193 36 q 84 192 106 129 q 63 325 63 254 q 84 465 63 401 q 149 574 106 529 q 257 643 192 618 q 410 668 322 668 q 485 658 446 668 q 553 633 525 647 q 493 776 536 707 l 339 725 l 299 842 l 410 879 q 360 924 386 903 q 306 964 333 944 l 421 1083 q 513 1020 469 1056 q 594 942 557 985 l 754 996 l 794 879 l 671 838 m 564 435 q 564 444 564 438 q 563 457 564 450 q 492 494 528 485 q 424 503 457 503 q 350 489 379 503 q 303 451 321 475 q 278 396 285 428 q 271 328 271 364 q 305 206 271 253 q 411 160 339 160 q 487 183 457 160 q 534 244 517 206 q 558 332 551 282 q 564 435 564 382 z "},"ñ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 669 985 q 647 939 661 964 q 611 892 632 914 q 564 857 590 871 q 506 843 538 843 q 459 851 481 843 q 417 867 438 858 q 375 884 396 876 q 332 892 354 892 q 286 874 304 892 q 257 832 268 856 l 156 899 q 178 944 164 919 q 214 991 193 969 q 261 1026 235 1013 q 319 1040 288 1040 q 366 1033 344 1040 q 408 1016 388 1025 q 449 999 429 1007 q 493 992 469 992 q 539 1010 521 992 q 568 1051 557 1028 l 669 985 z "},"ò":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 376 1110 l 574 885 l 479 800 l 250 993 l 376 1110 z "},"ó":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 593 993 l 364 800 l 269 885 l 467 1110 l 593 993 z "},"ô":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 636 896 l 560 804 l 421 911 l 282 804 l 203 896 l 421 1086 l 636 896 z "},"õ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 678 985 q 655 939 669 964 q 619 892 640 914 q 572 857 599 871 q 514 843 546 843 q 467 851 489 843 q 425 867 446 858 q 383 884 404 876 q 340 892 363 892 q 294 874 313 892 q 265 832 276 856 l 164 899 q 187 944 172 919 q 222 991 201 969 q 269 1026 243 1013 q 328 1040 296 1040 q 374 1033 353 1040 q 417 1016 396 1025 q 458 999 438 1007 q 501 992 478 992 q 547 1010 529 992 q 576 1051 565 1028 l 678 985 z "},"ö":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 267 836 q 192 865 224 836 q 160 942 160 893 q 192 1019 160 990 q 267 1047 224 1047 q 342 1019 310 1047 q 374 942 374 990 q 342 865 374 893 q 267 836 310 836 m 576 836 q 501 865 533 836 q 469 942 469 893 q 501 1019 469 990 q 576 1047 533 1047 q 651 1019 619 1047 q 683 942 683 990 q 651 865 683 893 q 576 836 619 836 z "},"÷":{"ha":789,"x_min":68,"x_max":721,"o":"m 514 696 q 478 608 514 638 q 396 579 442 579 q 314 608 350 579 q 278 696 278 638 q 314 783 278 754 q 396 813 350 813 q 478 783 442 813 q 514 696 514 754 m 514 133 q 478 46 514 75 q 396 17 442 17 q 314 46 350 17 q 278 133 278 75 q 314 221 278 192 q 396 250 350 250 q 478 221 442 250 q 514 133 514 192 m 68 501 l 721 501 l 721 328 l 68 328 l 68 501 z "},"ø":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 236 28 318 -19 l 174 -54 l 76 19 l 144 107 q 83 222 104 157 q 63 367 63 288 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 519 738 474 750 q 604 704 565 726 l 668 786 l 765 713 l 697 625 q 759 511 738 576 q 781 367 781 446 m 581 367 q 569 458 581 414 l 346 168 q 422 147 379 147 q 539 206 497 147 q 581 367 581 265 m 263 367 q 265 317 263 340 q 274 275 267 294 l 496 564 q 422 583 464 583 q 305 526 347 583 q 263 367 263 468 z "},"ù":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 332 1110 l 529 885 l 435 800 l 206 993 l 332 1110 z "},"ú":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 583 993 l 354 800 l 260 885 l 457 1110 l 583 993 z "},"û":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 624 896 l 547 804 l 408 911 l 269 804 l 190 896 l 408 1086 l 624 896 z "},"ü":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 251 836 q 176 865 208 836 q 144 942 144 893 q 176 1019 144 990 q 251 1047 208 1047 q 326 1019 294 1047 q 358 942 358 990 q 326 865 358 893 q 251 836 294 836 m 561 836 q 486 865 518 836 q 454 942 454 893 q 486 1019 454 990 q 561 1047 518 1047 q 636 1019 604 1047 q 668 942 668 990 q 636 865 668 893 q 561 836 604 836 z "},"ý":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 597 993 l 368 800 l 274 885 l 471 1110 l 597 993 z "},"þ":{"ha":839,"x_min":97,"x_max":776,"o":"m 776 365 q 756 211 776 281 q 694 92 735 142 q 594 14 654 42 q 457 -14 535 -14 q 376 -6 414 -14 q 304 18 339 3 l 304 -257 l 97 -257 l 97 1044 l 304 1078 l 304 733 q 357 744 328 740 q 408 747 386 747 q 561 720 493 747 q 677 644 629 693 q 751 524 725 594 q 776 365 776 453 m 565 360 q 523 513 565 456 q 401 571 481 571 q 347 567 374 571 q 304 558 319 564 l 304 190 q 355 169 324 178 q 418 161 386 161 q 565 360 565 161 z "},"ÿ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 229 836 q 154 865 186 836 q 122 942 122 893 q 154 1019 122 990 q 229 1047 186 1047 q 304 1019 272 1047 q 336 942 336 990 q 304 865 336 893 q 229 836 272 836 m 539 836 q 464 865 496 836 q 432 942 432 893 q 464 1019 432 990 q 539 1047 496 1047 q 614 1019 582 1047 q 646 942 646 990 q 614 865 646 893 q 539 836 582 836 z "},"Ā":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 276 1219 l 724 1219 l 724 1078 l 276 1078 l 276 1219 z "},"ā":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 154 1007 l 601 1007 l 601 865 l 154 865 l 154 1007 z "},"Ă":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 514 1043 q 424 1058 465 1043 q 353 1101 383 1074 q 306 1170 324 1129 q 289 1263 289 1211 l 289 1274 l 429 1274 q 457 1195 433 1215 q 514 1175 481 1175 q 571 1195 547 1175 q 599 1274 594 1215 l 739 1274 l 739 1263 q 722 1170 739 1211 q 674 1101 704 1129 q 603 1058 644 1074 q 514 1043 561 1043 z "},"ă":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 385 831 q 295 846 336 831 q 224 889 254 861 q 177 958 194 917 q 160 1050 160 999 l 160 1061 l 300 1061 q 328 983 304 1003 q 385 963 351 963 q 442 983 418 963 q 469 1061 465 1003 l 610 1061 l 610 1050 q 592 958 610 999 q 545 889 575 917 q 474 846 515 861 q 385 831 432 831 z "},"Ą":{"ha":1001,"x_min":14,"x_max":1015,"o":"m 878 -307 q 744 -272 785 -307 q 704 -181 704 -237 q 717 -124 704 -151 q 750 -69 729 -96 q 785 -31 767 -49 q 822 0 804 -14 l 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 760 651 864 q 788 541 742 657 q 883 292 835 425 q 988 0 932 158 q 956 -26 972 -11 q 925 -57 940 -42 q 897 -91 907 -75 q 886 -122 886 -107 q 895 -147 886 -137 q 928 -157 904 -157 q 958 -155 940 -157 q 999 -146 975 -153 l 1015 -285 q 949 -301 988 -296 q 878 -307 910 -307 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 z "},"ą":{"ha":768,"x_min":49,"x_max":681,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 639 -12 664 10 q 590 -57 614 -33 q 562 -91 572 -75 q 551 -122 551 -107 q 560 -147 551 -137 q 593 -157 569 -157 q 623 -155 606 -157 q 664 -146 640 -153 l 681 -285 q 614 -301 653 -296 q 543 -307 575 -307 q 410 -272 450 -307 q 369 -181 369 -237 q 382 -124 369 -151 q 415 -69 394 -96 q 472 -11 440 -37 q 419 -15 449 -14 q 363 -15 390 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 z "},"Ć":{"ha":900,"x_min":69,"x_max":872,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 m 721 1215 l 492 1022 l 397 1107 l 594 1332 l 721 1215 z "},"ć":{"ha":694,"x_min":63,"x_max":653,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 m 601 993 l 372 800 l 278 885 l 475 1110 l 601 993 z "},"Ĉ":{"ha":900,"x_min":69,"x_max":872,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 m 763 1126 l 686 1035 l 547 1142 l 408 1035 l 329 1126 l 547 1317 l 763 1126 z "},"ĉ":{"ha":694,"x_min":63,"x_max":653,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 m 631 896 l 554 804 l 415 911 l 276 804 l 197 896 l 415 1086 l 631 896 z "},"Ċ":{"ha":900,"x_min":69,"x_max":872,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 m 544 1056 q 467 1085 500 1056 q 435 1164 435 1114 q 467 1243 435 1214 q 544 1272 500 1272 q 622 1243 589 1272 q 654 1164 654 1214 q 622 1085 654 1114 q 544 1056 589 1056 z "},"ċ":{"ha":694,"x_min":63,"x_max":653,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 m 417 833 q 340 863 372 833 q 307 942 307 892 q 340 1021 307 992 q 417 1050 372 1050 q 494 1021 461 1050 q 526 942 526 992 q 494 863 526 892 q 417 833 461 833 z "},"Č":{"ha":900,"x_min":69,"x_max":872,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 m 328 1228 l 404 1319 l 543 1213 l 682 1319 l 761 1228 l 543 1038 l 328 1228 z "},"č":{"ha":694,"x_min":63,"x_max":653,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 m 201 1004 l 278 1096 l 417 989 l 556 1096 l 635 1004 l 417 814 l 201 1004 z "},"Ď":{"ha":1024,"x_min":111,"x_max":954,"o":"m 328 176 q 363 174 343 175 q 411 174 383 174 q 652 256 574 174 q 731 482 731 338 q 656 711 731 633 q 418 789 581 789 q 372 788 396 789 q 328 785 349 788 l 328 176 m 954 482 q 915 264 954 357 q 805 110 876 171 q 631 18 733 49 q 400 -12 528 -12 q 264 -8 342 -12 q 111 13 186 -3 l 111 950 q 267 969 186 964 q 407 974 349 974 q 631 946 531 974 q 804 858 732 918 q 915 706 876 799 q 954 482 954 613 m 275 1228 l 351 1319 l 490 1213 l 629 1319 l 708 1228 l 490 1038 l 275 1228 z "},"ď":{"ha":951,"x_min":63,"x_max":1007,"o":"m 274 371 q 317 217 274 275 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 542 q 484 563 515 554 q 421 571 453 571 q 274 371 274 571 m 742 24 q 678 8 714 15 q 602 -6 642 0 q 522 -15 563 -11 q 443 -18 481 -18 q 282 8 353 -18 q 163 84 211 35 q 88 203 114 133 q 63 361 63 274 q 85 522 63 450 q 149 643 107 593 q 251 719 190 693 q 389 746 311 746 q 466 738 432 746 q 535 714 500 729 l 535 1044 l 742 1078 l 742 24 m 1007 1078 l 961 739 l 838 739 l 838 1078 l 1007 1078 z "},"Đ":{"ha":1039,"x_min":14,"x_max":969,"o":"m 343 176 q 378 174 358 175 q 426 174 399 174 q 667 256 589 174 q 746 482 746 338 q 671 711 746 633 q 433 789 596 789 q 388 788 411 789 q 343 785 364 788 l 343 579 l 518 579 l 518 419 l 343 419 l 343 176 m 969 482 q 931 264 969 357 q 820 110 892 171 q 646 18 749 49 q 415 -12 543 -12 q 279 -8 357 -12 q 126 13 201 -3 l 126 419 l 14 419 l 14 579 l 126 579 l 126 950 q 283 969 201 964 q 422 974 364 974 q 647 946 546 974 q 819 858 747 918 q 931 706 892 799 q 969 482 969 613 z "},"đ":{"ha":842,"x_min":63,"x_max":828,"o":"m 742 957 l 828 957 l 828 828 l 742 828 l 742 24 q 678 8 714 15 q 602 -6 642 0 q 522 -15 563 -11 q 443 -18 481 -18 q 282 8 353 -18 q 163 83 211 35 q 88 200 114 132 q 63 351 63 268 q 85 505 63 436 q 149 623 107 574 q 251 699 190 672 q 389 726 311 726 q 466 718 432 726 q 535 694 500 710 l 535 828 l 336 828 l 336 957 l 535 957 l 535 1044 l 742 1078 l 742 957 m 274 361 q 317 216 274 274 q 444 158 361 158 q 535 165 500 158 l 535 522 q 484 543 515 535 q 421 551 453 551 q 310 502 346 551 q 274 361 274 453 z "},"Ē":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 215 1219 l 663 1219 l 663 1078 l 215 1078 l 215 1219 z "},"ē":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 182 1007 l 629 1007 l 629 865 l 182 865 l 182 1007 z "},"Ĕ":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 444 1043 q 355 1058 396 1043 q 284 1101 314 1074 q 237 1170 254 1129 q 219 1263 219 1211 l 219 1274 l 360 1274 q 388 1195 364 1215 q 444 1175 411 1175 q 501 1195 478 1175 q 529 1274 525 1215 l 669 1274 l 669 1263 q 652 1170 669 1211 q 605 1101 635 1129 q 533 1058 575 1074 q 444 1043 492 1043 z "},"ĕ":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 406 831 q 316 846 357 831 q 245 889 275 861 q 198 958 215 917 q 181 1050 181 999 l 181 1061 l 321 1061 q 349 983 325 1003 q 406 963 372 963 q 463 983 439 963 q 490 1061 486 1003 l 631 1061 l 631 1050 q 613 958 631 999 q 566 889 596 917 q 494 846 536 861 q 406 831 453 831 z "},"Ė":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 449 1056 q 372 1085 404 1056 q 339 1164 339 1114 q 372 1243 339 1214 q 449 1272 404 1272 q 526 1243 493 1272 q 558 1164 558 1214 q 526 1085 558 1114 q 449 1056 493 1056 z "},"ė":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 404 833 q 327 863 360 833 q 294 942 294 892 q 327 1021 294 992 q 404 1050 360 1050 q 481 1021 449 1050 q 514 942 514 992 q 481 863 514 892 q 404 833 449 833 z "},"Ę":{"ha":842,"x_min":111,"x_max":821,"o":"m 683 -307 q 550 -272 590 -307 q 510 -181 510 -237 q 522 -124 510 -151 q 556 -69 535 -96 q 591 -31 572 -49 q 628 0 610 -14 l 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 q 763 -26 779 -11 q 731 -57 746 -42 q 702 -91 713 -75 q 692 -122 692 -107 q 701 -147 692 -137 q 733 -157 710 -157 q 763 -155 746 -157 q 804 -146 781 -153 l 821 -285 q 754 -301 793 -296 q 683 -307 715 -307 z "},"ę":{"ha":811,"x_min":63,"x_max":749,"o":"m 558 -307 q 425 -272 465 -307 q 385 -181 385 -237 q 397 -124 385 -151 q 431 -69 410 -96 q 454 -42 442 -54 q 479 -19 467 -31 l 449 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 656 -10 685 13 q 606 -57 628 -33 q 577 -91 588 -75 q 567 -122 567 -107 q 576 -147 567 -137 q 608 -157 585 -157 q 638 -155 621 -157 q 679 -146 656 -153 l 696 -285 q 629 -301 668 -296 q 558 -307 590 -307 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 z "},"Ě":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 225 1228 l 301 1319 l 440 1213 l 579 1319 l 658 1228 l 440 1038 l 225 1228 z "},"ě":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 199 1004 l 275 1096 l 414 989 l 553 1096 l 632 1004 l 414 814 l 199 1004 z "},"Ĝ":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 m 761 1126 l 685 1035 l 546 1142 l 407 1035 l 328 1126 l 546 1317 l 761 1126 z "},"ĝ":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 m 656 896 l 579 804 l 440 911 l 301 804 l 222 896 l 440 1086 l 656 896 z "},"Ğ":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 m 540 1043 q 451 1058 492 1043 q 380 1101 410 1074 q 333 1170 350 1129 q 315 1263 315 1211 l 315 1274 l 456 1274 q 483 1195 460 1215 q 540 1175 507 1175 q 597 1195 574 1175 q 625 1274 621 1215 l 765 1274 l 765 1263 q 748 1170 765 1211 q 701 1101 731 1129 q 629 1058 671 1074 q 540 1043 588 1043 z "},"ğ":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 m 440 831 q 351 846 392 831 q 280 889 310 861 q 233 958 250 917 q 215 1050 215 999 l 215 1061 l 356 1061 q 383 983 360 1003 q 440 963 407 963 q 497 983 474 963 q 525 1061 521 1003 l 665 1061 l 665 1050 q 648 958 665 999 q 601 889 631 917 q 529 846 571 861 q 440 831 488 831 z "},"Ġ":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 m 544 1056 q 467 1085 500 1056 q 435 1164 435 1114 q 467 1243 435 1214 q 544 1272 500 1272 q 622 1243 589 1272 q 654 1164 654 1214 q 622 1085 654 1114 q 544 1056 589 1056 z "},"ġ":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 m 425 833 q 348 863 381 833 q 315 942 315 892 q 348 1021 315 992 q 425 1050 381 1050 q 502 1021 469 1050 q 535 942 535 992 q 502 863 535 892 q 425 833 469 833 z "},"Ģ":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 m 482 -72 l 646 -72 q 649 -103 649 -87 q 650 -124 650 -118 q 633 -211 650 -176 q 589 -267 617 -246 q 526 -297 561 -287 q 453 -306 490 -306 q 411 -303 432 -306 q 382 -297 390 -300 l 382 -181 q 422 -178 403 -181 q 453 -166 440 -175 q 474 -140 467 -157 q 482 -92 482 -122 l 482 -72 z "},"ģ":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 m 510 832 l 340 832 q 381 1012 329 947 q 528 1101 432 1076 l 596 1007 q 531 947 553 981 q 510 851 510 913 l 510 832 z "},"Ĥ":{"ha":1019,"x_min":111,"x_max":908,"o":"m 692 963 l 908 963 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 m 725 1126 l 649 1035 l 510 1142 l 371 1035 l 292 1126 l 510 1317 l 725 1126 z "},"ĥ":{"ha":818,"x_min":94,"x_max":728,"o":"m 97 0 l 97 1044 l 304 1078 l 304 728 q 358 741 325 735 q 421 747 390 747 q 569 723 510 747 q 663 654 628 699 q 713 549 699 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 495 529 521 488 q 400 571 469 571 q 348 566 372 571 q 304 556 324 561 l 304 0 l 97 0 m 503 1188 l 443 1100 l 300 1183 l 154 1100 l 94 1188 l 300 1336 l 503 1188 z "},"Ħ":{"ha":1050,"x_min":14,"x_max":1036,"o":"m 14 850 l 126 850 l 126 963 l 343 963 l 343 850 l 707 850 l 707 963 l 924 963 l 924 850 l 1036 850 l 1036 697 l 924 697 l 924 0 l 707 0 l 707 394 l 343 394 l 343 0 l 126 0 l 126 697 l 14 697 l 14 850 m 707 697 l 343 697 l 343 581 l 707 581 l 707 697 z "},"ħ":{"ha":832,"x_min":25,"x_max":742,"o":"m 25 957 l 111 957 l 111 1044 l 318 1078 l 318 957 l 517 957 l 517 828 l 318 828 l 318 707 q 372 720 339 714 q 435 726 404 726 q 583 702 524 726 q 677 633 642 678 q 727 528 713 589 q 742 392 742 467 l 742 0 l 535 0 l 535 367 q 509 508 535 467 q 414 550 483 550 q 362 545 386 550 q 318 535 338 540 l 318 0 l 111 0 l 111 828 l 25 828 l 25 957 z "},"Ĩ":{"ha":439,"x_min":-35,"x_max":479,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 479 1211 q 456 1165 471 1190 q 421 1119 442 1140 q 374 1083 400 1097 q 315 1069 347 1069 q 269 1077 290 1069 q 226 1094 247 1085 q 185 1110 206 1103 q 142 1118 164 1118 q 96 1100 114 1118 q 67 1058 78 1082 l -35 1125 q -12 1171 -26 1146 q 24 1217 3 1196 q 71 1253 44 1239 q 129 1267 97 1267 q 176 1259 154 1267 q 218 1242 197 1251 q 259 1226 239 1233 q 303 1218 279 1218 q 349 1236 331 1218 q 378 1278 367 1254 l 479 1211 z "},"ĩ":{"ha":401,"x_min":-54,"x_max":460,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 460 985 q 437 939 451 964 q 401 892 422 914 q 354 857 381 871 q 296 843 328 843 q 249 851 271 843 q 207 867 228 858 q 165 884 186 876 q 122 892 144 892 q 76 874 94 892 q 47 832 58 856 l -54 899 q -31 944 -46 919 q 4 991 -17 969 q 51 1026 25 1013 q 110 1040 78 1040 q 156 1033 135 1040 q 199 1016 178 1025 q 240 999 219 1007 q 283 992 260 992 q 329 1010 311 992 q 358 1051 347 1028 l 460 985 z "},"Ī":{"ha":439,"x_min":-1,"x_max":446,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m -1 1219 l 446 1219 l 446 1078 l -1 1078 l -1 1219 z "},"ī":{"ha":401,"x_min":-21,"x_max":426,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m -21 1007 l 426 1007 l 426 865 l -21 865 l -21 1007 z "},"Ĭ":{"ha":439,"x_min":11,"x_max":461,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 236 1043 q 147 1058 188 1043 q 76 1101 106 1074 q 28 1170 46 1129 q 11 1263 11 1211 l 11 1274 l 151 1274 q 179 1195 156 1215 q 236 1175 203 1175 q 293 1195 269 1175 q 321 1274 317 1215 l 461 1274 l 461 1263 q 444 1170 461 1211 q 397 1101 426 1129 q 325 1058 367 1074 q 236 1043 283 1043 z "},"ĭ":{"ha":401,"x_min":-22,"x_max":428,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 203 831 q 113 846 154 831 q 42 889 72 861 q -5 958 13 917 q -22 1050 -22 999 l -22 1061 l 118 1061 q 146 983 122 1003 q 203 963 169 963 q 260 983 236 963 q 288 1061 283 1003 l 428 1061 l 428 1050 q 410 958 428 999 q 363 889 393 917 q 292 846 333 861 q 203 831 250 831 z "},"Į":{"ha":439,"x_min":44,"x_max":356,"o":"m 111 963 l 328 963 l 328 0 q 297 -26 314 -11 q 265 -57 281 -42 q 237 -91 247 -75 q 226 -122 226 -107 q 235 -147 226 -137 q 268 -157 244 -157 q 298 -155 281 -157 q 339 -146 315 -153 l 356 -285 q 289 -301 328 -296 q 218 -307 250 -307 q 85 -272 125 -307 q 44 -181 44 -237 q 57 -124 44 -151 q 90 -69 69 -96 q 126 -31 107 -49 q 163 0 144 -14 l 111 0 l 111 963 z "},"į":{"ha":401,"x_min":21,"x_max":332,"o":"m 194 -307 q 61 -272 101 -307 q 21 -181 21 -237 q 33 -124 21 -151 q 67 -69 46 -96 q 102 -31 83 -49 q 139 0 121 -14 l 97 0 l 97 731 l 304 731 l 304 0 q 274 -26 290 -11 q 242 -57 257 -42 q 213 -91 224 -75 q 203 -122 203 -107 q 212 -147 203 -137 q 244 -157 221 -157 q 274 -155 257 -157 q 315 -146 292 -153 l 332 -285 q 265 -301 304 -296 q 194 -307 226 -307 m 324 942 q 287 852 324 885 q 200 819 250 819 q 113 852 150 819 q 76 942 76 885 q 113 1031 76 999 q 200 1064 150 1064 q 287 1031 250 1064 q 324 942 324 999 z "},"İ":{"ha":439,"x_min":108,"x_max":328,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 218 1056 q 141 1085 174 1056 q 108 1164 108 1114 q 141 1243 108 1214 q 218 1272 174 1272 q 295 1243 263 1272 q 328 1164 328 1214 q 295 1085 328 1114 q 218 1056 263 1056 z "},"ı":{"ha":401,"x_min":97,"x_max":304,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 z "},"Ĳ":{"ha":1168,"x_min":111,"x_max":1071,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 1071 324 q 1055 190 1071 253 q 999 81 1039 128 q 892 8 960 35 q 722 -19 825 -19 q 560 3 628 -19 q 447 57 492 26 l 519 225 q 606 183 560 201 q 706 165 651 165 q 819 204 785 165 q 854 335 854 243 l 854 963 l 1071 963 l 1071 324 z "},"ĳ":{"ha":800,"x_min":76,"x_max":722,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 324 942 q 287 852 324 885 q 200 819 250 819 q 113 852 150 819 q 76 942 76 885 q 113 1031 76 999 q 200 1064 150 1064 q 287 1031 250 1064 q 324 942 324 999 m 428 -257 q 370 -253 408 -257 q 299 -237 332 -249 l 326 -69 q 365 -79 347 -76 q 408 -82 382 -82 q 476 -53 457 -82 q 496 32 496 -24 l 496 731 l 703 731 l 703 26 q 632 -187 703 -118 q 428 -257 561 -257 m 722 942 q 685 852 722 885 q 599 819 649 819 q 512 852 549 819 q 475 942 475 885 q 512 1031 475 999 q 599 1064 549 1064 q 685 1031 649 1064 q 722 942 722 999 z "},"Ĵ":{"ha":735,"x_min":14,"x_max":742,"o":"m 638 324 q 622 190 638 253 q 566 81 606 128 q 459 8 526 35 q 289 -19 392 -19 q 126 3 194 -19 q 14 57 58 26 l 86 225 q 172 183 126 201 q 272 165 218 165 q 386 204 351 165 q 421 335 421 243 l 421 963 l 638 963 l 638 324 m 742 1126 l 665 1035 l 526 1142 l 388 1035 l 308 1126 l 526 1317 l 742 1126 z "},"ĵ":{"ha":401,"x_min":-100,"x_max":417,"o":"m 29 -257 q -28 -253 10 -257 q -100 -237 -67 -249 l -72 -69 q -34 -79 -51 -76 q 10 -82 -17 -82 q 78 -53 58 -82 q 97 32 97 -24 l 97 731 l 304 731 l 304 26 q 233 -187 304 -118 q 29 -257 163 -257 m 417 896 l 340 804 l 201 911 l 63 804 l -17 896 l 201 1086 l 417 896 z "},"Ķ":{"ha":950,"x_min":111,"x_max":936,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 730 292 622 424 q 936 0 838 160 l 679 0 m 428 -72 l 592 -72 q 595 -103 594 -87 q 596 -124 596 -118 q 579 -211 596 -176 q 535 -267 563 -246 q 472 -297 507 -287 q 399 -306 436 -306 q 357 -303 378 -306 q 328 -297 336 -300 l 328 -181 q 367 -178 349 -181 q 399 -166 386 -175 q 420 -140 413 -157 q 428 -92 428 -122 l 428 -72 z "},"ķ":{"ha":804,"x_min":97,"x_max":790,"o":"m 304 467 q 367 536 335 500 q 431 608 400 572 q 488 675 461 643 q 535 731 515 707 l 781 731 q 637 569 707 646 q 483 410 567 492 q 569 320 525 372 q 656 213 614 268 q 732 101 697 157 q 790 0 767 46 l 553 0 q 502 80 531 36 q 442 167 474 124 q 374 251 410 211 q 304 319 339 292 l 304 0 l 97 0 l 97 1044 l 304 1078 l 304 467 m 346 -72 l 510 -72 q 513 -103 513 -87 q 514 -124 514 -118 q 497 -211 514 -176 q 453 -267 481 -246 q 390 -297 425 -287 q 317 -306 354 -306 q 275 -303 296 -306 q 246 -297 254 -300 l 246 -181 q 285 -178 267 -181 q 317 -166 304 -175 q 338 -140 331 -157 q 346 -92 346 -122 l 346 -72 z "},"ĸ":{"ha":808,"x_min":97,"x_max":794,"o":"m 304 457 q 367 527 335 490 q 431 601 400 564 q 489 671 461 638 q 538 731 517 704 l 783 731 q 714 649 753 693 q 633 560 675 604 q 553 473 592 515 q 483 400 514 431 q 570 310 525 360 q 657 206 615 260 q 734 99 699 153 q 794 0 769 46 l 557 0 q 506 78 535 36 q 443 163 476 121 q 374 243 410 204 q 304 311 339 282 l 304 0 l 97 0 l 97 731 l 304 731 l 304 457 z "},"Ĺ":{"ha":782,"x_min":103,"x_max":754,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 m 426 1215 l 197 1022 l 103 1107 l 300 1332 l 426 1215 z "},"ĺ":{"ha":439,"x_min":69,"x_max":418,"o":"m 389 -14 q 242 6 299 -12 q 153 56 186 24 q 109 135 121 89 q 97 240 97 182 l 97 1044 l 304 1078 l 304 282 q 308 232 304 254 q 324 194 313 210 q 358 169 336 179 q 418 157 381 160 l 389 -14 m 414 1196 l 111 1100 l 69 1196 l 364 1336 l 414 1196 z "},"Ļ":{"ha":782,"x_min":111,"x_max":754,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 m 383 -72 l 547 -72 q 551 -103 550 -87 q 551 -124 551 -118 q 535 -211 551 -176 q 490 -267 518 -246 q 427 -297 463 -287 q 354 -306 392 -306 q 313 -303 333 -306 q 283 -297 292 -300 l 283 -181 q 323 -178 304 -181 q 355 -166 342 -175 q 376 -140 368 -157 q 383 -92 383 -122 l 383 -72 z "},"ļ":{"ha":439,"x_min":67,"x_max":418,"o":"m 389 -14 q 242 6 299 -12 q 153 56 186 24 q 109 135 121 89 q 97 240 97 182 l 97 1044 l 304 1078 l 304 282 q 308 232 304 254 q 324 194 313 210 q 358 169 336 179 q 418 157 381 160 l 389 -14 m 167 -72 l 331 -72 q 334 -103 333 -87 q 335 -124 335 -118 q 318 -211 335 -176 q 274 -267 301 -246 q 210 -297 246 -287 q 138 -306 175 -306 q 96 -303 117 -306 q 67 -297 75 -300 l 67 -181 q 106 -178 88 -181 q 138 -166 125 -175 q 159 -140 151 -157 q 167 -92 167 -122 l 167 -72 z "},"Ľ":{"ha":782,"x_min":111,"x_max":754,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 m 638 965 l 592 626 l 468 626 l 468 965 l 638 965 z "},"ľ":{"ha":514,"x_min":97,"x_max":569,"o":"m 389 -14 q 242 6 299 -12 q 153 56 186 24 q 109 135 121 89 q 97 240 97 182 l 97 1044 l 304 1078 l 304 282 q 308 232 304 254 q 324 194 313 210 q 358 169 336 179 q 418 157 381 160 l 389 -14 m 569 1078 l 524 739 l 400 739 l 400 1078 l 569 1078 z "},"Ŀ":{"ha":782,"x_min":111,"x_max":754,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 m 738 560 q 698 465 738 497 q 608 432 658 432 q 519 465 558 432 q 479 560 479 497 q 519 655 479 622 q 608 688 558 688 q 698 655 658 688 q 738 560 738 622 z "},"ŀ":{"ha":719,"x_min":97,"x_max":685,"o":"m 389 -14 q 242 6 299 -12 q 153 56 186 24 q 109 135 121 89 q 97 240 97 182 l 97 1044 l 304 1078 l 304 282 q 308 232 304 254 q 324 194 313 210 q 358 169 336 179 q 418 157 381 160 l 389 -14 m 685 572 q 645 477 685 510 q 556 444 606 444 q 466 477 506 444 q 426 572 426 510 q 466 667 426 635 q 556 700 506 700 q 645 667 606 700 q 685 572 685 635 z "},"Ł":{"ha":825,"x_min":0,"x_max":797,"o":"m 0 450 l 154 528 l 154 963 l 371 963 l 371 636 l 540 722 l 608 582 l 371 461 l 371 186 l 797 186 l 797 0 l 154 0 l 154 353 l 68 310 l 0 450 z "},"ł":{"ha":506,"x_min":-14,"x_max":503,"o":"m -14 546 l 135 619 l 135 1044 l 342 1078 l 342 722 l 440 772 l 503 644 l 342 564 l 342 282 q 346 232 342 254 q 362 194 350 210 q 396 169 374 179 q 456 157 418 160 l 426 -14 q 280 6 336 -12 q 191 56 224 24 q 147 135 158 89 q 135 240 135 182 l 135 461 l 49 418 l -14 546 z "},"Ń":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 700 1215 l 471 1022 l 376 1107 l 574 1332 l 700 1215 z "},"ń":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 571 993 l 342 800 l 247 885 l 444 1110 l 571 993 z "},"Ņ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 464 -72 l 628 -72 q 631 -103 631 -87 q 632 -124 632 -118 q 615 -211 632 -176 q 571 -267 599 -246 q 508 -297 543 -287 q 435 -306 472 -306 q 393 -303 414 -306 q 364 -297 372 -300 l 364 -181 q 403 -178 385 -181 q 435 -166 422 -175 q 456 -140 449 -157 q 464 -92 464 -122 l 464 -72 z "},"ņ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 332 -72 l 496 -72 q 499 -103 499 -87 q 500 -124 500 -118 q 483 -211 500 -176 q 439 -267 467 -246 q 376 -297 411 -287 q 303 -306 340 -306 q 261 -303 282 -306 q 232 -297 240 -300 l 232 -181 q 272 -178 253 -181 q 303 -166 290 -175 q 324 -140 317 -157 q 332 -92 332 -122 l 332 -72 z "},"Ň":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 292 1228 l 368 1319 l 507 1213 l 646 1319 l 725 1228 l 507 1038 l 292 1228 z "},"ň":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 189 1004 l 265 1096 l 404 989 l 543 1096 l 622 1004 l 404 814 l 189 1004 z "},"ŉ":{"ha":860,"x_min":-26,"x_max":769,"o":"m 139 706 q 275 734 192 721 q 450 747 358 747 q 605 723 543 747 q 703 654 667 699 q 754 549 739 610 q 769 413 769 488 l 769 0 l 563 0 l 563 388 q 536 529 563 488 q 438 571 510 571 q 390 569 415 571 q 346 564 365 567 l 346 0 l 139 0 l 139 706 m 203 1078 q 203 1047 203 1060 q 201 1018 203 1035 q 172 872 196 932 q 108 750 149 811 l -26 788 q 15 903 3 850 q 26 1015 26 956 q 26 1049 26 1032 q 22 1078 25 1067 l 203 1078 z "},"Ŋ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 724 58 q 535 355 636 210 q 325 631 435 500 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 24 q 874 -190 939 -121 q 665 -260 808 -260 q 612 -256 646 -260 q 544 -242 578 -253 l 572 -74 q 606 -83 593 -81 q 646 -85 619 -85 q 707 -56 690 -85 q 724 29 724 -26 l 724 58 z "},"ŋ":{"ha":818,"x_min":97,"x_max":728,"o":"m 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 4 q 669 -193 728 -129 q 468 -257 611 -257 q 419 -254 450 -257 q 357 -240 388 -251 l 382 -92 q 412 -99 397 -96 q 444 -101 426 -101 q 521 -3 521 -101 l 521 388 z "},"Ō":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 325 1219 l 772 1219 l 772 1078 l 325 1078 l 325 1219 z "},"ō":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 197 1007 l 644 1007 l 644 865 l 197 865 l 197 1007 z "},"Ŏ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 549 1043 q 459 1058 500 1043 q 388 1101 418 1074 q 341 1170 358 1129 q 324 1263 324 1211 l 324 1274 l 464 1274 q 492 1195 468 1215 q 549 1175 515 1175 q 606 1195 582 1175 q 633 1274 629 1215 l 774 1274 l 774 1263 q 756 1170 774 1211 q 709 1101 739 1129 q 638 1058 679 1074 q 549 1043 596 1043 z "},"ŏ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 421 831 q 331 846 372 831 q 260 889 290 861 q 213 958 231 917 q 196 1050 196 999 l 196 1061 l 336 1061 q 364 983 340 1003 q 421 963 388 963 q 478 983 454 963 q 506 1061 501 1003 l 646 1061 l 646 1050 q 628 958 646 999 q 581 889 611 917 q 510 846 551 861 q 421 831 468 831 z "},"Ő":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 610 1238 l 415 1026 l 322 1097 l 489 1335 l 610 1238 m 890 1238 l 696 1026 l 603 1097 l 769 1335 l 890 1238 z "},"ő":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 472 1013 l 278 801 l 185 872 l 351 1110 l 472 1013 m 753 1013 l 558 801 l 465 872 l 632 1110 l 753 1013 z "},"Ŕ":{"ha":926,"x_min":111,"x_max":899,"o":"m 393 974 q 725 897 610 974 q 840 657 840 819 q 794 492 840 556 q 660 393 747 429 q 721 310 689 357 q 784 213 753 264 q 844 108 815 163 q 899 0 874 53 l 656 0 q 602 96 629 47 q 547 190 575 144 q 490 277 518 236 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 949 q 258 968 182 963 q 393 974 333 974 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 m 624 1215 l 394 1022 l 300 1107 l 497 1332 l 624 1215 z "},"ŕ":{"ha":586,"x_min":97,"x_max":572,"o":"m 538 547 q 472 562 510 554 q 392 569 435 569 q 345 566 372 569 q 304 558 318 563 l 304 0 l 97 0 l 97 692 q 228 728 153 711 q 397 746 304 746 q 438 744 414 746 q 485 738 461 742 q 532 730 508 735 q 572 718 556 725 l 538 547 m 508 993 l 279 800 l 185 885 l 382 1110 l 508 993 z "},"Ŗ":{"ha":926,"x_min":111,"x_max":899,"o":"m 393 974 q 725 897 610 974 q 840 657 840 819 q 794 492 840 556 q 660 393 747 429 q 721 310 689 357 q 784 213 753 264 q 844 108 815 163 q 899 0 874 53 l 656 0 q 602 96 629 47 q 547 190 575 144 q 490 277 518 236 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 949 q 258 968 182 963 q 393 974 333 974 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 m 414 -72 l 578 -72 q 581 -103 581 -87 q 582 -124 582 -118 q 565 -211 582 -176 q 521 -267 549 -246 q 458 -297 493 -287 q 385 -306 422 -306 q 343 -303 364 -306 q 314 -297 322 -300 l 314 -181 q 353 -178 335 -181 q 385 -166 372 -175 q 406 -140 399 -157 q 414 -92 414 -122 l 414 -72 z "},"ŗ":{"ha":586,"x_min":19,"x_max":572,"o":"m 538 547 q 472 562 510 554 q 392 569 435 569 q 345 566 372 569 q 304 558 318 563 l 304 0 l 97 0 l 97 692 q 228 728 153 711 q 397 746 304 746 q 438 744 414 746 q 485 738 461 742 q 532 730 508 735 q 572 718 556 725 l 538 547 m 119 -72 l 283 -72 q 287 -103 286 -87 q 288 -124 288 -118 q 271 -211 288 -176 q 226 -267 254 -246 q 163 -297 199 -287 q 90 -306 128 -306 q 49 -303 69 -306 q 19 -297 28 -300 l 19 -181 q 59 -178 40 -181 q 91 -166 78 -175 q 112 -140 104 -157 q 119 -92 119 -122 l 119 -72 z "},"Ř":{"ha":926,"x_min":111,"x_max":899,"o":"m 393 974 q 725 897 610 974 q 840 657 840 819 q 794 492 840 556 q 660 393 747 429 q 721 310 689 357 q 784 213 753 264 q 844 108 815 163 q 899 0 874 53 l 656 0 q 602 96 629 47 q 547 190 575 144 q 490 277 518 236 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 949 q 258 968 182 963 q 393 974 333 974 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 m 228 1228 l 304 1319 l 443 1213 l 582 1319 l 661 1228 l 443 1038 l 228 1228 z "},"ř":{"ha":586,"x_min":97,"x_max":572,"o":"m 538 547 q 472 562 510 554 q 392 569 435 569 q 345 566 372 569 q 304 558 318 563 l 304 0 l 97 0 l 97 692 q 228 728 153 711 q 397 746 304 746 q 438 744 414 746 q 485 738 461 742 q 532 730 508 735 q 572 718 556 725 l 538 547 m 126 1004 l 203 1096 l 342 989 l 481 1096 l 560 1004 l 342 814 l 126 1004 z "},"Ś":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 658 55 753 129 q 374 -19 564 -19 q 258 -12 310 -19 q 167 7 207 -4 q 99 31 128 18 q 51 54 71 43 l 113 226 q 219 184 156 203 q 374 165 282 165 m 603 1215 l 374 1022 l 279 1107 l 476 1332 l 603 1215 z "},"ś":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 m 533 993 l 304 800 l 210 885 l 407 1110 l 533 993 z "},"Ŝ":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 658 55 753 129 q 374 -19 564 -19 q 258 -12 310 -19 q 167 7 207 -4 q 99 31 128 18 q 51 54 71 43 l 113 226 q 219 184 156 203 q 374 165 282 165 m 638 1126 l 561 1035 l 422 1142 l 283 1035 l 204 1126 l 422 1317 l 638 1126 z "},"ŝ":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 m 574 896 l 497 804 l 358 911 l 219 804 l 140 896 l 358 1086 l 574 896 z "},"Ş":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 682 76 753 147 q 469 -14 611 4 q 450 -56 457 -36 q 511 -108 494 -78 q 528 -171 528 -139 q 475 -272 528 -237 q 336 -307 422 -307 q 275 -302 306 -307 q 214 -289 244 -297 l 239 -168 q 274 -177 249 -171 q 325 -183 300 -183 q 359 -176 344 -183 q 375 -149 374 -168 q 362 -118 376 -132 q 315 -97 347 -104 l 299 -93 q 313 -58 304 -78 q 329 -18 321 -37 q 153 11 221 -12 q 51 54 86 35 l 113 226 q 219 184 156 203 q 374 165 282 165 z "},"ş":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 560 56 617 110 q 397 -12 503 3 q 385 -35 390 -24 q 378 -56 381 -47 q 439 -108 422 -78 q 456 -171 456 -139 q 403 -272 456 -237 q 264 -307 350 -307 q 203 -302 233 -307 q 142 -289 172 -297 l 167 -168 q 202 -177 176 -171 q 253 -183 228 -183 q 287 -176 272 -183 q 303 -149 301 -168 q 290 -118 304 -132 q 243 -97 275 -104 l 226 -93 q 240 -58 232 -78 q 257 -18 249 -37 q 128 1 179 -12 q 54 25 76 15 l 89 193 q 197 160 142 172 q 307 149 253 149 z "},"Ţ":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 0 l 490 0 q 476 -30 483 -15 q 465 -56 469 -44 q 526 -108 510 -78 q 543 -171 543 -139 q 490 -272 543 -237 q 351 -307 438 -307 q 290 -302 321 -307 q 229 -289 260 -297 l 254 -168 q 290 -177 264 -171 q 340 -183 315 -183 q 374 -176 360 -183 q 390 -149 389 -168 q 377 -118 392 -132 q 331 -97 363 -104 l 314 -93 q 332 -47 321 -74 q 353 0 343 -21 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 z "},"ţ":{"ha":617,"x_min":90,"x_max":575,"o":"m 90 913 l 297 946 l 297 731 l 546 731 l 546 558 l 297 558 l 297 301 q 320 197 297 236 q 413 158 343 158 q 481 165 446 158 q 546 182 517 171 l 575 21 q 515 1 547 10 q 442 -12 482 -8 l 424 -56 q 485 -108 468 -78 q 501 -171 501 -139 q 449 -272 501 -237 q 310 -307 396 -307 q 249 -302 279 -307 q 188 -289 218 -297 l 213 -168 q 248 -177 222 -171 q 299 -183 274 -183 q 333 -176 318 -183 q 349 -149 347 -168 q 335 -118 350 -132 q 289 -97 321 -104 l 272 -93 q 287 -53 278 -76 q 306 -11 296 -31 q 201 24 243 -1 q 135 90 160 50 q 101 183 111 131 q 90 299 90 236 l 90 913 z "},"Ť":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 0 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 m 210 1228 l 286 1319 l 425 1213 l 564 1319 l 643 1228 l 425 1038 l 210 1228 z "},"ť":{"ha":617,"x_min":90,"x_max":575,"o":"m 90 913 l 297 946 l 297 731 l 546 731 l 546 558 l 297 558 l 297 301 q 320 197 297 236 q 413 158 343 158 q 481 165 446 158 q 546 182 517 171 l 575 21 q 492 -6 538 6 q 379 -17 446 -17 q 239 6 294 -17 q 150 70 183 29 q 103 169 117 111 q 90 299 90 228 l 90 913 m 546 1078 l 500 813 l 381 813 l 381 1078 l 546 1078 z "},"Ŧ":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 524 l 731 524 l 731 371 l 535 371 l 535 0 l 318 0 l 318 371 l 122 371 l 122 524 l 318 524 l 318 778 l 28 778 l 28 963 l 825 963 z "},"ŧ":{"ha":617,"x_min":90,"x_max":575,"o":"m 90 913 l 297 946 l 297 731 l 546 731 l 546 558 l 297 558 l 297 446 l 544 446 l 544 317 l 297 317 l 297 301 q 320 197 297 236 q 413 158 343 158 q 481 165 446 158 q 546 182 517 171 l 575 21 q 492 -6 538 6 q 379 -17 446 -17 q 239 6 294 -17 q 150 70 183 29 q 103 169 117 111 q 90 299 90 228 l 90 913 z "},"Ũ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 751 1211 q 728 1165 743 1190 q 693 1119 714 1140 q 646 1083 672 1097 q 588 1069 619 1069 q 541 1077 563 1069 q 499 1094 519 1085 q 457 1110 478 1103 q 414 1118 436 1118 q 368 1100 386 1118 q 339 1058 350 1082 l 238 1125 q 260 1171 246 1146 q 296 1217 275 1196 q 343 1253 317 1239 q 401 1267 369 1267 q 448 1259 426 1267 q 490 1242 469 1251 q 531 1226 511 1233 q 575 1218 551 1218 q 621 1236 603 1218 q 650 1278 639 1254 l 751 1211 z "},"ũ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 664 985 q 641 939 656 964 q 606 892 626 914 q 558 857 585 871 q 500 843 532 843 q 453 851 475 843 q 411 867 432 858 q 369 884 390 876 q 326 892 349 892 q 281 874 299 892 q 251 832 263 856 l 150 899 q 173 944 158 919 q 208 991 188 969 q 256 1026 229 1013 q 314 1040 282 1040 q 360 1033 339 1040 q 403 1016 382 1025 q 444 999 424 1007 q 488 992 464 992 q 533 1010 515 992 q 563 1051 551 1028 l 664 985 z "},"Ū":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 267 1219 l 714 1219 l 714 1078 l 267 1078 l 267 1219 z "},"ū":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 185 1007 l 632 1007 l 632 865 l 185 865 l 185 1007 z "},"Ŭ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 490 1043 q 401 1058 442 1043 q 330 1101 360 1074 q 283 1170 300 1129 q 265 1263 265 1211 l 265 1274 l 406 1274 q 433 1195 410 1215 q 490 1175 457 1175 q 547 1195 524 1175 q 575 1274 571 1215 l 715 1274 l 715 1263 q 698 1170 715 1211 q 651 1101 681 1129 q 579 1058 621 1074 q 490 1043 538 1043 z "},"ŭ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 410 831 q 320 846 361 831 q 249 889 279 861 q 202 958 219 917 q 185 1050 185 999 l 185 1061 l 325 1061 q 353 983 329 1003 q 410 963 376 963 q 467 983 443 963 q 494 1061 490 1003 l 635 1061 l 635 1050 q 617 958 635 999 q 570 889 600 917 q 499 846 540 861 q 410 831 457 831 z "},"Ů":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 654 1158 q 641 1090 654 1119 q 605 1040 628 1060 q 552 1009 582 1019 q 489 999 522 999 q 428 1009 457 999 q 376 1040 399 1019 q 340 1090 353 1060 q 326 1158 326 1119 q 340 1227 326 1197 q 376 1277 353 1257 q 428 1308 399 1297 q 489 1318 457 1318 q 552 1308 522 1318 q 605 1277 582 1297 q 641 1227 628 1257 q 654 1158 654 1197 m 553 1158 q 533 1207 553 1190 q 489 1224 514 1224 q 446 1207 465 1224 q 426 1158 426 1190 q 446 1110 426 1126 q 489 1093 465 1093 q 533 1110 514 1093 q 553 1158 553 1126 z "},"ů":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 574 971 q 560 902 574 932 q 524 852 547 872 q 472 822 501 832 q 408 811 442 811 q 347 822 376 811 q 295 852 318 832 q 259 902 272 872 q 246 971 246 932 q 259 1040 246 1010 q 295 1090 272 1069 q 347 1120 318 1110 q 408 1131 376 1131 q 472 1120 442 1131 q 524 1090 501 1110 q 560 1040 547 1069 q 574 971 574 1010 m 472 971 q 453 1019 472 1003 q 408 1036 433 1036 q 365 1019 385 1036 q 346 971 346 1003 q 365 922 346 939 q 408 906 385 906 q 453 922 433 906 q 472 971 472 939 z "},"Ű":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 551 1238 l 357 1026 l 264 1097 l 431 1335 l 551 1238 m 832 1238 l 638 1026 l 544 1097 l 711 1335 l 832 1238 z "},"ű":{"ha":818,"x_min":90,"x_max":738,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 457 1013 l 263 801 l 169 872 l 336 1110 l 457 1013 m 738 1013 l 543 801 l 450 872 l 617 1110 l 738 1013 z "},"Ų":{"ha":982,"x_min":97,"x_max":885,"o":"m 479 -19 q 307 11 379 -18 q 188 91 235 40 q 119 211 142 142 q 97 364 97 281 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 847 171 885 254 q 722 35 810 88 q 688 13 703 24 q 660 -8 674 3 q 635 -30 647 -18 q 607 -57 622 -42 q 578 -91 589 -75 q 568 -122 568 -107 q 577 -147 568 -137 q 610 -157 586 -157 q 640 -155 622 -157 q 681 -146 657 -153 l 697 -285 q 631 -301 669 -296 q 560 -307 592 -307 q 426 -272 467 -307 q 386 -181 386 -237 q 399 -124 386 -151 q 432 -69 411 -96 q 479 -19 456 -39 z "},"ų":{"ha":818,"x_min":90,"x_max":724,"o":"m 586 -303 q 453 -268 493 -303 q 413 -176 413 -233 q 425 -119 413 -147 q 458 -65 438 -92 q 483 -37 469 -50 q 508 -12 496 -24 q 460 -16 486 -15 q 410 -17 433 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 q 682 -8 707 14 q 633 -53 657 -29 q 605 -87 615 -71 q 594 -118 594 -103 q 603 -143 594 -133 q 636 -153 613 -153 q 666 -151 649 -153 q 707 -142 683 -149 l 724 -281 q 657 -297 696 -292 q 586 -303 618 -303 z "},"Ŵ":{"ha":1317,"x_min":28,"x_max":1289,"o":"m 757 860 q 794 731 774 803 q 837 583 814 660 q 883 431 860 507 q 929 289 907 354 q 966 443 947 360 q 1001 615 985 526 q 1034 792 1018 704 q 1064 963 1050 881 l 1289 963 q 1177 472 1240 721 q 1040 0 1114 224 l 842 0 q 747 280 793 133 q 657 574 701 426 q 568 280 613 426 q 475 0 524 133 l 276 0 q 140 472 203 224 q 28 963 76 721 l 263 963 q 293 792 276 881 q 328 615 310 704 q 365 443 346 526 q 403 289 383 360 q 451 433 428 357 q 497 586 475 510 q 538 733 519 663 q 572 860 557 804 l 757 860 m 875 1113 l 799 1021 l 660 1128 l 521 1021 l 442 1113 l 660 1303 l 875 1113 z "},"ŵ":{"ha":1089,"x_min":14,"x_max":1075,"o":"m 542 419 q 483 210 514 314 q 417 0 451 106 l 256 0 q 201 139 231 58 q 141 315 172 219 q 77 516 110 410 q 14 731 44 622 l 232 731 q 256 622 243 681 q 284 500 269 563 q 315 374 299 438 q 347 253 331 311 q 383 378 365 314 q 416 503 400 442 q 447 623 432 565 q 472 731 461 681 l 622 731 q 647 623 633 681 q 676 503 661 565 q 708 378 692 442 q 743 253 725 314 q 776 374 760 311 q 808 500 793 438 q 835 622 822 563 q 860 731 849 681 l 1075 731 q 1012 516 1044 622 q 948 315 979 410 q 887 139 917 219 q 832 0 857 58 l 671 0 q 603 210 636 106 q 542 419 569 314 m 760 896 l 683 804 l 544 911 l 406 804 l 326 896 l 544 1086 l 760 896 z "},"Ŷ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 676 1126 l 600 1035 l 461 1142 l 322 1035 l 243 1126 l 461 1317 l 676 1126 z "},"ŷ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 596 896 l 519 804 l 381 911 l 242 804 l 163 896 l 381 1086 l 596 896 z "},"Ź":{"ha":847,"x_min":49,"x_max":806,"o":"m 790 813 q 685 694 746 767 q 558 535 624 621 q 429 357 493 449 q 315 182 365 265 l 806 182 l 806 0 l 49 0 l 49 129 q 144 287 88 200 q 261 462 200 374 q 385 633 322 550 q 503 781 449 715 l 71 781 l 71 963 l 790 963 l 790 813 m 613 1215 l 383 1022 l 289 1107 l 486 1332 l 613 1215 z "},"ź":{"ha":694,"x_min":49,"x_max":653,"o":"m 646 592 q 578 517 621 564 q 488 413 536 469 q 390 293 439 356 q 300 172 340 231 l 653 172 l 653 0 l 49 0 l 49 122 q 119 230 78 172 q 205 346 160 288 q 294 459 250 404 q 376 558 339 514 l 65 558 l 65 731 l 646 731 l 646 592 m 538 993 l 308 800 l 214 885 l 411 1110 l 538 993 z "},"Ż":{"ha":847,"x_min":49,"x_max":806,"o":"m 790 813 q 685 694 746 767 q 558 535 624 621 q 429 357 493 449 q 315 182 365 265 l 806 182 l 806 0 l 49 0 l 49 129 q 144 287 88 200 q 261 462 200 374 q 385 633 322 550 q 503 781 449 715 l 71 781 l 71 963 l 790 963 l 790 813 m 424 1056 q 347 1085 379 1056 q 314 1164 314 1114 q 347 1243 314 1214 q 424 1272 379 1272 q 501 1243 468 1272 q 533 1164 533 1214 q 501 1085 533 1114 q 424 1056 468 1056 z "},"ż":{"ha":694,"x_min":49,"x_max":653,"o":"m 646 592 q 578 517 621 564 q 488 413 536 469 q 390 293 439 356 q 300 172 340 231 l 653 172 l 653 0 l 49 0 l 49 122 q 119 230 78 172 q 205 346 160 288 q 294 459 250 404 q 376 558 339 514 l 65 558 l 65 731 l 646 731 l 646 592 m 347 833 q 270 863 303 833 q 238 942 238 892 q 270 1021 238 992 q 347 1050 303 1050 q 424 1021 392 1050 q 457 942 457 992 q 424 863 457 892 q 347 833 392 833 z "},"Ž":{"ha":847,"x_min":49,"x_max":806,"o":"m 790 813 q 685 694 746 767 q 558 535 624 621 q 429 357 493 449 q 315 182 365 265 l 806 182 l 806 0 l 49 0 l 49 129 q 144 287 88 200 q 261 462 200 374 q 385 633 322 550 q 503 781 449 715 l 71 781 l 71 963 l 790 963 l 790 813 m 217 1228 l 293 1319 l 432 1213 l 571 1319 l 650 1228 l 432 1038 l 217 1228 z "},"ž":{"ha":694,"x_min":49,"x_max":653,"o":"m 646 592 q 578 517 621 564 q 488 413 536 469 q 390 293 439 356 q 300 172 340 231 l 653 172 l 653 0 l 49 0 l 49 122 q 119 230 78 172 q 205 346 160 288 q 294 459 250 404 q 376 558 339 514 l 65 558 l 65 731 l 646 731 l 646 592 m 142 1004 l 218 1096 l 357 989 l 496 1096 l 575 1004 l 357 814 l 142 1004 z "},"ſ":{"ha":457,"x_min":97,"x_max":596,"o":"m 414 1078 q 521 1066 472 1078 q 596 1043 569 1054 l 556 878 q 495 897 528 890 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 z "},"Ș":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 658 55 753 129 q 374 -19 564 -19 q 258 -12 310 -19 q 167 7 207 -4 q 99 31 128 18 q 51 54 71 43 l 113 226 q 219 184 156 203 q 374 165 282 165 m 329 -72 l 493 -72 q 497 -103 496 -87 q 497 -124 497 -118 q 481 -211 497 -176 q 436 -267 464 -246 q 373 -297 408 -287 q 300 -306 338 -306 q 258 -303 279 -306 q 229 -297 238 -300 l 229 -181 q 269 -178 250 -181 q 301 -166 288 -175 q 322 -140 314 -157 q 329 -92 329 -122 l 329 -72 z "},"ș":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 m 260 -72 l 424 -72 q 427 -103 426 -87 q 428 -124 428 -118 q 411 -211 428 -176 q 367 -267 394 -246 q 303 -297 339 -287 q 231 -306 268 -306 q 189 -303 210 -306 q 160 -297 168 -300 l 160 -181 q 199 -178 181 -181 q 231 -166 218 -175 q 252 -140 244 -157 q 260 -92 260 -122 l 260 -72 z "},"Ț":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 0 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 m 342 -72 l 506 -72 q 509 -103 508 -87 q 510 -124 510 -118 q 493 -211 510 -176 q 449 -267 476 -246 q 385 -297 421 -287 q 313 -306 350 -306 q 271 -303 292 -306 q 242 -297 250 -300 l 242 -181 q 281 -178 263 -181 q 313 -166 300 -175 q 334 -140 326 -157 q 342 -92 342 -122 l 342 -72 z "},"ț":{"ha":617,"x_min":90,"x_max":575,"o":"m 90 913 l 297 946 l 297 731 l 546 731 l 546 558 l 297 558 l 297 301 q 320 197 297 236 q 413 158 343 158 q 481 165 446 158 q 546 182 517 171 l 575 21 q 492 -6 538 6 q 379 -17 446 -17 q 239 6 294 -17 q 150 70 183 29 q 103 169 117 111 q 90 299 90 228 l 90 913 m 272 -72 l 436 -72 q 440 -103 439 -87 q 440 -124 440 -118 q 424 -211 440 -176 q 379 -267 407 -246 q 316 -297 351 -287 q 243 -306 281 -306 q 201 -303 222 -306 q 172 -297 181 -300 l 172 -181 q 212 -178 193 -181 q 244 -166 231 -175 q 265 -140 257 -157 q 272 -92 272 -122 l 272 -72 z "},"ȷ":{"ha":401,"x_min":-100,"x_max":304,"o":"m 29 -257 q -28 -253 10 -257 q -100 -237 -67 -249 l -72 -69 q -34 -79 -51 -76 q 10 -82 -17 -82 q 78 -53 58 -82 q 97 32 97 -24 l 97 731 l 304 731 l 304 26 q 233 -187 304 -118 q 29 -257 163 -257 z "},"ʼ":{"ha":378,"x_min":89,"x_max":318,"o":"m 318 1078 q 318 1047 318 1060 q 317 1018 318 1035 q 288 872 311 932 q 224 750 264 811 l 89 788 q 130 903 118 850 q 142 1015 142 956 q 141 1049 142 1032 q 138 1078 140 1067 l 318 1078 z "},"ˇ":{"ha":539,"x_min":63,"x_max":496,"o":"m 63 1004 l 139 1096 l 278 989 l 417 1096 l 496 1004 l 278 814 l 63 1004 z "},"ˉ":{"ha":522,"x_min":38,"x_max":485,"o":"m 38 1007 l 485 1007 l 485 865 l 38 865 l 38 1007 z "},"˘":{"ha":569,"x_min":60,"x_max":510,"o":"m 285 831 q 195 846 236 831 q 124 889 154 861 q 77 958 94 917 q 60 1050 60 999 l 60 1061 l 200 1061 q 228 983 204 1003 q 285 963 251 963 q 342 983 318 963 q 369 1061 365 1003 l 510 1061 l 510 1050 q 492 958 510 999 q 445 889 475 917 q 374 846 415 861 q 285 831 332 831 z "},"˙":{"ha":342,"x_min":61,"x_max":281,"o":"m 171 833 q 94 863 126 833 q 61 942 61 892 q 94 1021 61 992 q 171 1050 126 1050 q 248 1021 215 1050 q 281 942 281 992 q 248 863 281 892 q 171 833 215 833 z "},"˚":{"ha":450,"x_min":61,"x_max":389,"o":"m 389 971 q 376 902 389 932 q 340 852 363 872 q 287 822 317 832 q 224 811 257 811 q 163 822 192 811 q 110 852 133 832 q 74 902 88 872 q 61 971 61 932 q 74 1040 61 1010 q 110 1090 88 1069 q 163 1120 133 1110 q 224 1131 192 1131 q 287 1120 257 1131 q 340 1090 317 1110 q 376 1040 363 1069 q 389 971 389 1010 m 288 971 q 268 1019 288 1003 q 224 1036 249 1036 q 181 1019 200 1036 q 161 971 161 1003 q 181 922 161 939 q 224 906 200 906 q 268 922 249 906 q 288 971 288 939 z "},"˛":{"ha":433,"x_min":71,"x_max":382,"o":"m 244 -307 q 111 -273 151 -307 q 71 -181 71 -239 q 83 -124 71 -151 q 117 -69 96 -96 q 167 -18 140 -40 q 217 21 193 4 l 379 21 q 340 -12 365 10 q 292 -57 315 -33 q 263 -91 274 -75 q 253 -122 253 -107 q 262 -147 253 -137 q 294 -157 271 -157 q 324 -155 307 -157 q 365 -146 342 -153 l 382 -285 q 315 -301 354 -296 q 244 -307 276 -307 z "},"˝":{"ha":603,"x_min":54,"x_max":622,"o":"m 342 1013 l 147 801 l 54 872 l 221 1110 l 342 1013 m 622 1013 l 428 801 l 335 872 l 501 1110 l 622 1013 z "},"Ẁ":{"ha":1317,"x_min":28,"x_max":1289,"o":"m 757 860 q 794 731 774 803 q 837 583 814 660 q 883 431 860 507 q 929 289 907 354 q 966 443 947 360 q 1001 615 985 526 q 1034 792 1018 704 q 1064 963 1050 881 l 1289 963 q 1177 472 1240 721 q 1040 0 1114 224 l 842 0 q 747 280 793 133 q 657 574 701 426 q 568 280 613 426 q 475 0 524 133 l 276 0 q 140 472 203 224 q 28 963 76 721 l 263 963 q 293 792 276 881 q 328 615 310 704 q 365 443 346 526 q 403 289 383 360 q 451 433 428 357 q 497 586 475 510 q 538 733 519 663 q 572 860 557 804 l 757 860 m 614 1329 l 811 1104 l 717 1019 l 488 1213 l 614 1329 z "},"ẁ":{"ha":1089,"x_min":14,"x_max":1075,"o":"m 542 419 q 483 210 514 314 q 417 0 451 106 l 256 0 q 201 139 231 58 q 141 315 172 219 q 77 516 110 410 q 14 731 44 622 l 232 731 q 256 622 243 681 q 284 500 269 563 q 315 374 299 438 q 347 253 331 311 q 383 378 365 314 q 416 503 400 442 q 447 623 432 565 q 472 731 461 681 l 622 731 q 647 623 633 681 q 676 503 661 565 q 708 378 692 442 q 743 253 725 314 q 776 374 760 311 q 808 500 793 438 q 835 622 822 563 q 860 731 849 681 l 1075 731 q 1012 516 1044 622 q 948 315 979 410 q 887 139 917 219 q 832 0 857 58 l 671 0 q 603 210 636 106 q 542 419 569 314 m 486 1110 l 683 885 l 589 800 l 360 993 l 486 1110 z "},"Ẃ":{"ha":1317,"x_min":28,"x_max":1289,"o":"m 757 860 q 794 731 774 803 q 837 583 814 660 q 883 431 860 507 q 929 289 907 354 q 966 443 947 360 q 1001 615 985 526 q 1034 792 1018 704 q 1064 963 1050 881 l 1289 963 q 1177 472 1240 721 q 1040 0 1114 224 l 842 0 q 747 280 793 133 q 657 574 701 426 q 568 280 613 426 q 475 0 524 133 l 276 0 q 140 472 203 224 q 28 963 76 721 l 263 963 q 293 792 276 881 q 328 615 310 704 q 365 443 346 526 q 403 289 383 360 q 451 433 428 357 q 497 586 475 510 q 538 733 519 663 q 572 860 557 804 l 757 860 m 819 1213 l 590 1019 l 496 1104 l 693 1329 l 819 1213 z "},"ẃ":{"ha":1089,"x_min":14,"x_max":1075,"o":"m 542 419 q 483 210 514 314 q 417 0 451 106 l 256 0 q 201 139 231 58 q 141 315 172 219 q 77 516 110 410 q 14 731 44 622 l 232 731 q 256 622 243 681 q 284 500 269 563 q 315 374 299 438 q 347 253 331 311 q 383 378 365 314 q 416 503 400 442 q 447 623 432 565 q 472 731 461 681 l 622 731 q 647 623 633 681 q 676 503 661 565 q 708 378 692 442 q 743 253 725 314 q 776 374 760 311 q 808 500 793 438 q 835 622 822 563 q 860 731 849 681 l 1075 731 q 1012 516 1044 622 q 948 315 979 410 q 887 139 917 219 q 832 0 857 58 l 671 0 q 603 210 636 106 q 542 419 569 314 m 733 993 l 504 800 l 410 885 l 607 1110 l 733 993 z "},"Ẅ":{"ha":1317,"x_min":28,"x_max":1289,"o":"m 757 860 q 794 731 774 803 q 837 583 814 660 q 883 431 860 507 q 929 289 907 354 q 966 443 947 360 q 1001 615 985 526 q 1034 792 1018 704 q 1064 963 1050 881 l 1289 963 q 1177 472 1240 721 q 1040 0 1114 224 l 842 0 q 747 280 793 133 q 657 574 701 426 q 568 280 613 426 q 475 0 524 133 l 276 0 q 140 472 203 224 q 28 963 76 721 l 263 963 q 293 792 276 881 q 328 615 310 704 q 365 443 346 526 q 403 289 383 360 q 451 433 428 357 q 497 586 475 510 q 538 733 519 663 q 572 860 557 804 l 757 860 m 504 1044 q 429 1073 461 1044 q 397 1150 397 1101 q 429 1227 397 1199 q 504 1256 461 1256 q 579 1227 547 1256 q 611 1150 611 1199 q 579 1073 611 1101 q 504 1044 547 1044 m 814 1044 q 739 1073 771 1044 q 707 1150 707 1101 q 739 1227 707 1199 q 814 1256 771 1256 q 889 1227 857 1256 q 921 1150 921 1199 q 889 1073 921 1101 q 814 1044 857 1044 z "},"ẅ":{"ha":1089,"x_min":14,"x_max":1075,"o":"m 542 419 q 483 210 514 314 q 417 0 451 106 l 256 0 q 201 139 231 58 q 141 315 172 219 q 77 516 110 410 q 14 731 44 622 l 232 731 q 256 622 243 681 q 284 500 269 563 q 315 374 299 438 q 347 253 331 311 q 383 378 365 314 q 416 503 400 442 q 447 623 432 565 q 472 731 461 681 l 622 731 q 647 623 633 681 q 676 503 661 565 q 708 378 692 442 q 743 253 725 314 q 776 374 760 311 q 808 500 793 438 q 835 622 822 563 q 860 731 849 681 l 1075 731 q 1012 516 1044 622 q 948 315 979 410 q 887 139 917 219 q 832 0 857 58 l 671 0 q 603 210 636 106 q 542 419 569 314 m 381 836 q 306 865 338 836 q 274 942 274 893 q 306 1019 274 990 q 381 1047 338 1047 q 456 1019 424 1047 q 488 942 488 990 q 456 865 488 893 q 381 836 424 836 m 690 836 q 615 865 647 836 q 583 942 583 893 q 615 1019 583 990 q 690 1047 647 1047 q 765 1019 733 1047 q 797 942 797 990 q 765 865 797 893 q 690 836 733 836 z "},"Ỳ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 386 1332 l 583 1107 l 489 1022 l 260 1215 l 386 1332 z "},"ỳ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 283 1110 l 481 885 l 386 800 l 157 993 l 283 1110 z "},"⁄":{"ha":211,"x_min":-236,"x_max":449,"o":"m 449 963 l -44 0 l -236 0 l 260 963 l 449 963 z "},"⁰":{"ha":504,"x_min":21,"x_max":483,"o":"m 21 697 q 81 910 21 835 q 253 985 142 985 q 423 910 363 985 q 483 697 483 835 q 423 483 483 558 q 253 408 363 408 q 81 483 142 408 q 21 697 21 558 m 335 697 q 318 815 335 769 q 254 860 301 860 q 188 815 207 860 q 169 697 169 769 q 188 578 169 624 q 254 533 207 533 q 318 578 301 533 q 335 697 335 624 z "},"⁴":{"ha":504,"x_min":28,"x_max":482,"o":"m 418 974 l 418 653 l 482 653 l 482 538 l 418 538 l 418 418 l 288 418 l 288 538 l 28 538 l 28 638 q 147 816 86 736 q 281 974 207 896 l 418 974 m 288 819 q 227 742 256 783 q 174 653 199 701 l 288 653 l 288 819 z "},"⁵":{"ha":504,"x_min":36,"x_max":453,"o":"m 453 596 q 441 521 453 556 q 401 461 429 486 q 329 422 374 436 q 221 408 285 408 q 121 417 172 408 q 36 443 69 426 l 68 567 q 96 556 82 561 q 126 547 110 551 q 161 541 142 543 q 207 539 181 539 q 296 594 296 539 q 281 631 296 618 q 239 651 267 644 q 169 658 211 657 q 72 660 128 660 q 81 741 76 696 q 90 830 86 786 q 97 912 94 874 q 103 974 100 950 l 432 974 l 432 847 l 219 847 q 217 809 218 833 q 213 769 215 785 q 326 756 281 768 q 400 721 372 743 q 440 667 428 699 q 453 596 453 635 z "},"⁶":{"ha":504,"x_min":43,"x_max":467,"o":"m 249 665 q 213 661 232 665 q 185 651 194 657 q 264 528 176 528 q 314 549 299 528 q 329 596 329 569 q 311 648 329 631 q 249 665 293 665 m 276 767 q 364 754 328 767 q 423 719 400 742 q 456 667 446 697 q 467 600 467 636 q 454 528 467 563 q 417 467 442 493 q 353 424 392 440 q 261 408 314 408 q 98 470 153 408 q 43 646 43 532 q 69 783 43 722 q 144 886 94 843 q 263 952 193 929 q 422 975 333 975 l 429 851 q 276 823 331 847 q 194 751 222 799 q 231 762 208 757 q 276 767 253 767 z "},"⁷":{"ha":504,"x_min":42,"x_max":468,"o":"m 129 419 q 188 656 149 556 q 289 840 226 756 l 42 840 l 42 974 l 468 974 l 468 857 q 412 778 440 825 q 358 674 383 731 q 315 551 333 617 q 288 419 296 486 l 129 419 z "},"⁸":{"ha":504,"x_min":29,"x_max":476,"o":"m 476 574 q 464 507 476 538 q 424 455 451 476 q 355 421 397 433 q 251 408 313 408 q 139 424 182 408 q 72 463 96 439 q 38 513 47 486 q 29 564 29 540 q 54 644 29 613 q 115 699 79 675 q 60 754 76 726 q 43 824 43 782 q 56 885 43 856 q 94 936 68 914 q 160 972 121 958 q 253 985 200 985 q 354 971 314 985 q 419 935 394 957 q 453 886 443 913 q 463 833 463 860 q 441 763 463 796 q 385 711 419 731 q 456 649 436 681 q 476 574 476 617 m 175 574 q 192 535 175 554 q 253 517 208 517 q 313 535 296 517 q 331 574 331 553 q 302 628 331 608 q 226 657 274 647 q 189 622 203 642 q 175 574 175 601 m 321 825 q 306 860 321 842 q 254 878 290 878 q 203 860 218 878 q 188 825 188 842 q 205 781 188 801 q 267 746 222 760 q 308 779 294 761 q 321 825 321 797 z "},"⁹":{"ha":504,"x_min":42,"x_max":465,"o":"m 261 731 q 297 735 278 731 q 325 744 315 739 q 249 868 333 868 q 197 849 214 868 q 181 803 181 829 q 199 749 181 768 q 261 731 217 731 m 232 626 q 144 640 181 626 q 85 676 108 653 q 52 730 63 699 q 42 797 42 761 q 54 867 42 833 q 92 927 67 901 q 156 969 117 953 q 247 985 194 985 q 410 922 356 985 q 465 747 465 858 q 374 506 465 594 q 86 418 282 418 l 79 542 q 239 569 186 544 q 315 642 292 593 q 278 631 301 636 q 232 626 256 626 z "},"₀":{"ha":504,"x_min":21,"x_max":483,"o":"m 21 281 q 81 493 21 418 q 253 568 142 568 q 423 493 363 568 q 483 281 483 418 q 423 67 483 142 q 253 -8 363 -8 q 81 67 142 -8 q 21 281 21 142 m 335 281 q 318 398 335 353 q 254 443 301 443 q 188 398 207 443 q 169 281 169 353 q 188 162 169 207 q 254 117 207 117 q 318 162 301 117 q 335 281 335 207 z "},"₁":{"ha":504,"x_min":53,"x_max":382,"o":"m 53 442 q 166 495 111 465 q 261 557 221 525 l 382 557 l 382 3 l 224 3 l 224 378 q 167 349 196 363 q 96 321 138 336 l 53 442 z "},"₂":{"ha":504,"x_min":22,"x_max":447,"o":"m 433 397 q 424 342 433 367 q 398 295 414 317 q 361 255 382 274 q 319 218 340 236 q 271 174 296 199 q 231 129 246 150 l 447 129 l 447 3 l 49 3 q 47 23 47 14 q 47 42 47 32 q 84 165 47 110 q 192 279 121 219 q 252 335 229 311 q 275 383 275 358 q 263 417 275 404 q 226 429 250 429 q 152 413 186 429 q 94 378 118 397 l 22 486 q 115 542 58 517 q 233 568 171 568 q 326 556 288 568 q 388 520 364 543 q 422 466 411 497 q 433 397 433 435 z "},"₃":{"ha":504,"x_min":24,"x_max":444,"o":"m 207 122 q 275 137 256 122 q 294 174 294 151 q 197 231 294 231 l 140 231 l 140 344 l 197 344 q 250 357 229 344 q 271 394 271 369 q 210 439 271 439 q 146 428 178 439 q 85 404 114 418 l 32 514 q 119 552 67 536 q 221 568 171 568 q 315 556 276 568 q 376 522 353 543 q 408 472 399 500 q 418 413 418 443 q 405 357 418 383 q 360 306 392 331 q 424 250 404 285 q 444 172 444 215 q 432 101 444 135 q 392 44 419 68 q 319 6 364 19 q 208 -8 274 -8 q 159 -6 185 -8 q 108 3 133 -3 q 62 15 83 8 q 24 29 40 21 l 56 153 q 135 128 103 133 q 207 122 168 122 z "},"₄":{"ha":504,"x_min":28,"x_max":482,"o":"m 418 557 l 418 236 l 482 236 l 482 121 l 418 121 l 418 1 l 288 1 l 288 121 l 28 121 l 28 221 q 147 399 86 319 q 281 557 207 479 l 418 557 m 288 403 q 227 326 256 367 q 174 236 199 285 l 288 236 l 288 403 z "},"₅":{"ha":504,"x_min":36,"x_max":453,"o":"m 453 179 q 441 104 453 139 q 401 44 429 69 q 329 6 374 19 q 221 -8 285 -8 q 121 1 172 -8 q 36 26 69 10 l 68 150 q 96 140 82 144 q 126 131 110 135 q 161 124 142 126 q 207 122 181 122 q 296 178 296 122 q 281 215 296 201 q 239 234 267 228 q 169 242 211 240 q 72 243 128 243 q 81 324 76 279 q 90 413 86 369 q 97 495 94 457 q 103 557 100 533 l 432 557 l 432 431 l 219 431 q 217 392 218 417 q 213 353 215 368 q 326 339 281 351 q 400 304 372 326 q 440 250 428 282 q 453 179 453 218 z "},"₆":{"ha":504,"x_min":43,"x_max":467,"o":"m 249 249 q 213 244 232 249 q 185 235 194 240 q 264 111 176 111 q 314 132 299 111 q 329 179 329 153 q 311 231 329 214 q 249 249 293 249 m 276 350 q 364 338 328 350 q 423 303 400 325 q 456 250 446 281 q 467 183 467 219 q 454 111 467 146 q 417 50 442 76 q 353 8 392 24 q 261 -8 314 -8 q 98 53 153 -8 q 43 229 43 115 q 69 366 43 306 q 144 469 94 426 q 263 535 193 513 q 422 558 333 558 l 429 435 q 276 406 331 431 q 194 335 222 382 q 231 345 208 340 q 276 350 253 350 z "},"₇":{"ha":504,"x_min":42,"x_max":468,"o":"m 129 3 q 188 239 149 139 q 289 424 226 339 l 42 424 l 42 557 l 468 557 l 468 440 q 412 361 440 408 q 358 257 383 314 q 315 135 333 200 q 288 3 296 69 l 129 3 z "},"₈":{"ha":504,"x_min":29,"x_max":476,"o":"m 476 157 q 464 90 476 121 q 424 38 451 60 q 355 4 397 17 q 251 -8 313 -8 q 139 7 182 -8 q 72 46 96 22 q 38 97 47 69 q 29 147 29 124 q 54 227 29 196 q 115 282 79 258 q 60 338 76 310 q 43 407 43 365 q 56 468 43 439 q 94 519 68 497 q 160 555 121 542 q 253 568 200 568 q 354 554 314 568 q 419 518 394 540 q 453 469 443 496 q 463 417 463 443 q 441 347 463 379 q 385 294 419 314 q 456 232 436 264 q 476 157 476 200 m 175 157 q 192 119 175 138 q 253 100 208 100 q 313 118 296 100 q 331 157 331 136 q 302 211 331 192 q 226 240 274 231 q 189 205 203 225 q 175 157 175 185 m 321 408 q 306 443 321 425 q 254 461 290 461 q 203 443 218 461 q 188 408 188 425 q 205 364 188 385 q 267 329 222 343 q 308 363 294 344 q 321 408 321 381 z "},"₉":{"ha":504,"x_min":42,"x_max":465,"o":"m 261 314 q 297 318 278 314 q 325 328 315 322 q 249 451 333 451 q 197 432 214 451 q 181 386 181 413 q 199 333 181 351 q 261 314 217 314 m 232 210 q 144 223 181 210 q 85 259 108 236 q 52 313 63 282 q 42 381 42 344 q 54 451 42 417 q 92 510 67 485 q 156 552 117 536 q 247 568 194 568 q 410 505 356 568 q 465 331 465 442 q 374 90 465 178 q 86 1 282 1 l 79 125 q 239 152 186 128 q 315 225 292 176 q 278 215 301 219 q 232 210 256 210 z "},"ℓ":{"ha":751,"x_min":36,"x_max":703,"o":"m 703 85 q 582 8 650 35 q 431 -19 514 -19 q 246 36 313 -19 q 165 214 179 92 l 103 169 l 36 269 q 101 319 69 296 q 163 367 132 342 l 163 700 q 235 987 163 896 q 431 1078 308 1078 q 531 1057 489 1078 q 602 1001 574 1036 q 644 918 631 965 q 657 818 657 871 q 577 575 657 692 q 354 332 497 458 l 354 286 q 472 156 354 156 q 550 174 511 156 q 618 218 589 193 l 703 85 m 354 517 q 472 675 426 594 q 517 824 517 756 q 500 906 517 878 q 442 933 483 933 q 409 924 425 933 q 381 890 393 914 q 362 824 369 865 q 354 722 354 783 l 354 517 z "},"℮":{"ha":1300,"x_min":93,"x_max":1207,"o":"m 304 468 q 297 463 297 468 l 297 189 q 310 158 297 171 q 463 49 376 88 q 650 10 549 10 q 851 55 760 10 q 1010 175 943 100 l 1089 175 q 1005 95 1053 131 q 900 35 957 60 q 779 -4 843 10 q 649 -18 715 -18 q 432 22 533 -18 q 256 128 331 61 q 137 287 181 196 q 93 482 93 378 q 137 677 93 586 q 256 836 181 768 q 432 944 331 904 q 649 983 533 983 q 866 944 764 983 q 1044 836 968 904 q 1163 677 1119 768 q 1207 482 1207 586 l 1207 468 l 304 468 m 1001 778 q 989 811 1001 796 q 836 915 922 878 q 650 953 750 953 q 464 913 551 953 q 311 806 376 872 q 301 791 304 800 q 297 772 297 782 l 297 504 q 304 494 297 494 l 996 494 q 1001 504 1001 494 l 1001 778 z "},"⅓":{"ha":1219,"x_min":28,"x_max":1160,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 903 963 l 410 0 l 218 0 l 714 963 l 903 963 m 922 122 q 990 137 971 122 q 1010 174 1010 151 q 913 231 1010 231 l 856 231 l 856 344 l 913 344 q 965 357 944 344 q 986 394 986 369 q 925 439 986 439 q 861 428 893 439 q 800 404 829 418 l 747 514 q 834 552 782 536 q 936 568 886 568 q 1030 556 992 568 q 1091 522 1068 543 q 1124 472 1114 500 q 1133 413 1133 443 q 1120 357 1133 383 q 1075 306 1107 331 q 1140 250 1119 285 q 1160 172 1160 215 q 1147 101 1160 135 q 1107 44 1135 68 q 1034 6 1079 19 q 924 -8 989 -8 q 874 -6 900 -8 q 824 3 849 -3 q 777 15 799 8 q 739 29 756 21 l 771 153 q 851 128 818 133 q 922 122 883 122 z "},"⅔":{"ha":1219,"x_min":22,"x_max":1160,"o":"m 433 814 q 424 758 433 783 q 398 712 414 733 q 361 672 382 690 q 319 635 340 653 q 271 591 296 615 q 231 546 246 567 l 447 546 l 447 419 l 49 419 q 47 440 47 431 q 47 458 47 449 q 84 581 47 526 q 192 696 121 636 q 252 751 229 728 q 275 800 275 775 q 263 833 275 821 q 226 846 250 846 q 152 830 186 846 q 94 794 118 814 l 22 903 q 115 959 58 933 q 233 985 171 985 q 326 972 288 985 q 388 937 364 960 q 422 883 411 914 q 433 814 433 851 m 950 963 l 457 0 l 265 0 l 761 963 l 950 963 m 922 122 q 990 137 971 122 q 1010 174 1010 151 q 913 231 1010 231 l 856 231 l 856 344 l 913 344 q 965 357 944 344 q 986 394 986 369 q 925 439 986 439 q 861 428 893 439 q 800 404 829 418 l 747 514 q 834 552 782 536 q 936 568 886 568 q 1030 556 992 568 q 1091 522 1068 543 q 1124 472 1114 500 q 1133 413 1133 443 q 1120 357 1133 383 q 1075 306 1107 331 q 1140 250 1119 285 q 1160 172 1160 215 q 1147 101 1160 135 q 1107 44 1135 68 q 1034 6 1079 19 q 924 -8 989 -8 q 874 -6 900 -8 q 824 3 849 -3 q 777 15 799 8 q 739 29 756 21 l 771 153 q 851 128 818 133 q 922 122 883 122 z "},"⅛":{"ha":1219,"x_min":28,"x_max":1192,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 911 963 l 418 0 l 226 0 l 722 963 l 911 963 m 1192 157 q 1179 90 1192 121 q 1140 38 1167 60 q 1070 4 1113 17 q 967 -8 1028 -8 q 854 7 897 -8 q 787 46 811 22 q 753 97 763 69 q 744 147 744 124 q 769 227 744 196 q 831 282 794 258 q 775 338 792 310 q 758 407 758 365 q 771 468 758 439 q 810 519 783 497 q 876 555 836 542 q 968 568 915 568 q 1069 554 1029 568 q 1134 518 1110 540 q 1168 469 1158 496 q 1178 417 1178 443 q 1156 347 1178 379 q 1100 294 1135 314 q 1172 232 1151 264 q 1192 157 1192 200 m 890 157 q 907 119 890 138 q 968 100 924 100 q 1028 118 1011 100 q 1046 157 1046 136 q 1017 211 1046 192 q 942 240 989 231 q 904 205 918 225 q 890 157 890 185 m 1036 408 q 1021 443 1036 425 q 969 461 1006 461 q 918 443 933 461 q 903 408 903 425 q 920 364 903 385 q 982 329 938 343 q 1023 363 1010 344 q 1036 408 1036 381 z "},"⅜":{"ha":1219,"x_min":32,"x_max":1192,"o":"m 215 539 q 283 553 264 539 q 303 590 303 568 q 206 647 303 647 l 149 647 l 149 761 l 206 761 q 258 774 238 761 q 279 811 279 786 q 218 856 279 856 q 154 845 186 856 q 93 821 122 835 l 40 931 q 127 969 75 953 q 229 985 179 985 q 323 972 285 985 q 384 938 361 960 q 417 888 407 917 q 426 829 426 860 q 413 774 426 800 q 368 722 400 747 q 433 667 413 701 q 453 589 453 632 q 440 518 453 551 q 400 460 428 485 q 327 422 372 436 q 217 408 282 408 q 167 411 193 408 q 117 419 142 414 q 70 431 92 425 q 32 446 49 438 l 64 569 q 144 544 111 550 q 215 539 176 539 m 939 963 l 446 0 l 254 0 l 750 963 l 939 963 m 1192 157 q 1179 90 1192 121 q 1140 38 1167 60 q 1070 4 1113 17 q 967 -8 1028 -8 q 854 7 897 -8 q 787 46 811 22 q 753 97 763 69 q 744 147 744 124 q 769 227 744 196 q 831 282 794 258 q 775 338 792 310 q 758 407 758 365 q 771 468 758 439 q 810 519 783 497 q 876 555 836 542 q 968 568 915 568 q 1069 554 1029 568 q 1134 518 1110 540 q 1168 469 1158 496 q 1178 417 1178 443 q 1156 347 1178 379 q 1100 294 1135 314 q 1172 232 1151 264 q 1192 157 1192 200 m 890 157 q 907 119 890 138 q 968 100 924 100 q 1028 118 1011 100 q 1046 157 1046 136 q 1017 211 1046 192 q 942 240 989 231 q 904 205 918 225 q 890 157 890 185 m 1036 408 q 1021 443 1036 425 q 969 461 1006 461 q 918 443 933 461 q 903 408 903 425 q 920 364 903 385 q 982 329 938 343 q 1023 363 1010 344 q 1036 408 1036 381 z "},"⅝":{"ha":1219,"x_min":36,"x_max":1192,"o":"m 453 596 q 441 521 453 556 q 401 461 429 486 q 329 422 374 436 q 221 408 285 408 q 121 417 172 408 q 36 443 69 426 l 68 567 q 96 556 82 561 q 126 547 110 551 q 161 541 142 543 q 207 539 181 539 q 296 594 296 539 q 281 631 296 618 q 239 651 267 644 q 169 658 211 657 q 72 660 128 660 q 81 741 76 696 q 90 830 86 786 q 97 912 94 874 q 103 974 100 950 l 432 974 l 432 847 l 219 847 q 217 809 218 833 q 213 769 215 785 q 326 756 281 768 q 400 721 372 743 q 440 667 428 699 q 453 596 453 635 m 939 963 l 446 0 l 254 0 l 750 963 l 939 963 m 1192 157 q 1179 90 1192 121 q 1140 38 1167 60 q 1070 4 1113 17 q 967 -8 1028 -8 q 854 7 897 -8 q 787 46 811 22 q 753 97 763 69 q 744 147 744 124 q 769 227 744 196 q 831 282 794 258 q 775 338 792 310 q 758 407 758 365 q 771 468 758 439 q 810 519 783 497 q 876 555 836 542 q 968 568 915 568 q 1069 554 1029 568 q 1134 518 1110 540 q 1168 469 1158 496 q 1178 417 1178 443 q 1156 347 1178 379 q 1100 294 1135 314 q 1172 232 1151 264 q 1192 157 1192 200 m 890 157 q 907 119 890 138 q 968 100 924 100 q 1028 118 1011 100 q 1046 157 1046 136 q 1017 211 1046 192 q 942 240 989 231 q 904 205 918 225 q 890 157 890 185 m 1036 408 q 1021 443 1036 425 q 969 461 1006 461 q 918 443 933 461 q 903 408 903 425 q 920 364 903 385 q 982 329 938 343 q 1023 363 1010 344 q 1036 408 1036 381 z "},"⅞":{"ha":1219,"x_min":25,"x_max":1192,"o":"m 113 419 q 171 656 132 556 q 272 840 210 756 l 25 840 l 25 974 l 451 974 l 451 857 q 395 778 424 825 q 342 674 367 731 q 298 551 317 617 q 271 419 279 486 l 113 419 m 888 963 l 394 0 l 203 0 l 699 963 l 888 963 m 1192 157 q 1179 90 1192 121 q 1140 38 1167 60 q 1070 4 1113 17 q 967 -8 1028 -8 q 854 7 897 -8 q 787 46 811 22 q 753 97 763 69 q 744 147 744 124 q 769 227 744 196 q 831 282 794 258 q 775 338 792 310 q 758 407 758 365 q 771 468 758 439 q 810 519 783 497 q 876 555 836 542 q 968 568 915 568 q 1069 554 1029 568 q 1134 518 1110 540 q 1168 469 1158 496 q 1178 417 1178 443 q 1156 347 1178 379 q 1100 294 1135 314 q 1172 232 1151 264 q 1192 157 1192 200 m 890 157 q 907 119 890 138 q 968 100 924 100 q 1028 118 1011 100 q 1046 157 1046 136 q 1017 211 1046 192 q 942 240 989 231 q 904 205 918 225 q 890 157 890 185 m 1036 408 q 1021 443 1036 425 q 969 461 1006 461 q 918 443 933 461 q 903 408 903 425 q 920 364 903 385 q 982 329 938 343 q 1023 363 1010 344 q 1036 408 1036 381 z "},"⅕":{"ha":1219,"x_min":28,"x_max":1168,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 925 963 l 432 0 l 240 0 l 736 963 l 925 963 m 1168 179 q 1156 104 1168 139 q 1117 44 1144 69 q 1044 6 1089 19 q 936 -8 1000 -8 q 836 1 888 -8 q 751 26 785 10 l 783 150 q 811 140 797 144 q 841 131 825 135 q 876 124 857 126 q 922 122 896 122 q 1011 178 1011 122 q 997 215 1011 201 q 954 234 982 228 q 885 242 926 240 q 788 243 843 243 q 797 324 792 279 q 806 413 801 369 q 813 495 810 457 q 818 557 815 533 l 1147 557 l 1147 431 l 935 431 q 932 392 933 417 q 928 353 931 368 q 1042 339 996 351 q 1115 304 1088 326 q 1156 250 1143 282 q 1168 179 1168 218 z "},"⅖":{"ha":1219,"x_min":22,"x_max":1168,"o":"m 433 814 q 424 758 433 783 q 398 712 414 733 q 361 672 382 690 q 319 635 340 653 q 271 591 296 615 q 231 546 246 567 l 447 546 l 447 419 l 49 419 q 47 440 47 431 q 47 458 47 449 q 84 581 47 526 q 192 696 121 636 q 252 751 229 728 q 275 800 275 775 q 263 833 275 821 q 226 846 250 846 q 152 830 186 846 q 94 794 118 814 l 22 903 q 115 959 58 933 q 233 985 171 985 q 326 972 288 985 q 388 937 364 960 q 422 883 411 914 q 433 814 433 851 m 967 963 l 474 0 l 282 0 l 778 963 l 967 963 m 1168 179 q 1156 104 1168 139 q 1117 44 1144 69 q 1044 6 1089 19 q 936 -8 1000 -8 q 836 1 888 -8 q 751 26 785 10 l 783 150 q 811 140 797 144 q 841 131 825 135 q 876 124 857 126 q 922 122 896 122 q 1011 178 1011 122 q 997 215 1011 201 q 954 234 982 228 q 885 242 926 240 q 788 243 843 243 q 797 324 792 279 q 806 413 801 369 q 813 495 810 457 q 818 557 815 533 l 1147 557 l 1147 431 l 935 431 q 932 392 933 417 q 928 353 931 368 q 1042 339 996 351 q 1115 304 1088 326 q 1156 250 1143 282 q 1168 179 1168 218 z "},"⅗":{"ha":1219,"x_min":32,"x_max":1168,"o":"m 215 539 q 283 553 264 539 q 303 590 303 568 q 206 647 303 647 l 149 647 l 149 761 l 206 761 q 258 774 238 761 q 279 811 279 786 q 218 856 279 856 q 154 845 186 856 q 93 821 122 835 l 40 931 q 127 969 75 953 q 229 985 179 985 q 323 972 285 985 q 384 938 361 960 q 417 888 407 917 q 426 829 426 860 q 413 774 426 800 q 368 722 400 747 q 433 667 413 701 q 453 589 453 632 q 440 518 453 551 q 400 460 428 485 q 327 422 372 436 q 217 408 282 408 q 167 411 193 408 q 117 419 142 414 q 70 431 92 425 q 32 446 49 438 l 64 569 q 144 544 111 550 q 215 539 176 539 m 942 963 l 449 0 l 257 0 l 753 963 l 942 963 m 1168 179 q 1156 104 1168 139 q 1117 44 1144 69 q 1044 6 1089 19 q 936 -8 1000 -8 q 836 1 888 -8 q 751 26 785 10 l 783 150 q 811 140 797 144 q 841 131 825 135 q 876 124 857 126 q 922 122 896 122 q 1011 178 1011 122 q 997 215 1011 201 q 954 234 982 228 q 885 242 926 240 q 788 243 843 243 q 797 324 792 279 q 806 413 801 369 q 813 495 810 457 q 818 557 815 533 l 1147 557 l 1147 431 l 935 431 q 932 392 933 417 q 928 353 931 368 q 1042 339 996 351 q 1115 304 1088 326 q 1156 250 1143 282 q 1168 179 1168 218 z "},"⅘":{"ha":1219,"x_min":28,"x_max":1168,"o":"m 418 974 l 418 653 l 482 653 l 482 538 l 418 538 l 418 418 l 288 418 l 288 538 l 28 538 l 28 638 q 147 816 86 736 q 281 974 207 896 l 418 974 m 288 819 q 227 742 256 783 q 174 653 199 701 l 288 653 l 288 819 m 961 963 l 468 0 l 276 0 l 772 963 l 961 963 m 1168 179 q 1156 104 1168 139 q 1117 44 1144 69 q 1044 6 1089 19 q 936 -8 1000 -8 q 836 1 888 -8 q 751 26 785 10 l 783 150 q 811 140 797 144 q 841 131 825 135 q 876 124 857 126 q 922 122 896 122 q 1011 178 1011 122 q 997 215 1011 201 q 954 234 982 228 q 885 242 926 240 q 788 243 843 243 q 797 324 792 279 q 806 413 801 369 q 813 495 810 457 q 818 557 815 533 l 1147 557 l 1147 431 l 935 431 q 932 392 933 417 q 928 353 931 368 q 1042 339 996 351 q 1115 304 1088 326 q 1156 250 1143 282 q 1168 179 1168 218 z "},"⅙":{"ha":1219,"x_min":28,"x_max":1182,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 931 963 l 438 0 l 246 0 l 742 963 l 931 963 m 964 249 q 928 244 947 249 q 900 235 910 240 q 979 111 892 111 q 1029 132 1014 111 q 1044 179 1044 153 q 1026 231 1044 214 q 964 249 1008 249 m 992 350 q 1079 338 1043 350 q 1138 303 1115 325 q 1172 250 1161 281 q 1182 183 1182 219 q 1169 111 1182 146 q 1132 50 1157 76 q 1068 8 1107 24 q 976 -8 1029 -8 q 813 53 868 -8 q 758 229 758 115 q 784 366 758 306 q 859 469 810 426 q 978 535 908 513 q 1138 558 1049 558 l 1144 435 q 992 406 1046 431 q 910 335 938 382 q 946 345 924 340 q 992 350 968 350 z "},"⅚":{"ha":1219,"x_min":36,"x_max":1182,"o":"m 453 596 q 441 521 453 556 q 401 461 429 486 q 329 422 374 436 q 221 408 285 408 q 121 417 172 408 q 36 443 69 426 l 68 567 q 96 556 82 561 q 126 547 110 551 q 161 541 142 543 q 207 539 181 539 q 296 594 296 539 q 281 631 296 618 q 239 651 267 644 q 169 658 211 657 q 72 660 128 660 q 81 741 76 696 q 90 830 86 786 q 97 912 94 874 q 103 974 100 950 l 432 974 l 432 847 l 219 847 q 217 809 218 833 q 213 769 215 785 q 326 756 281 768 q 400 721 372 743 q 440 667 428 699 q 453 596 453 635 m 967 963 l 474 0 l 282 0 l 778 963 l 967 963 m 964 249 q 928 244 947 249 q 900 235 910 240 q 979 111 892 111 q 1029 132 1014 111 q 1044 179 1044 153 q 1026 231 1044 214 q 964 249 1008 249 m 992 350 q 1079 338 1043 350 q 1138 303 1115 325 q 1172 250 1161 281 q 1182 183 1182 219 q 1169 111 1182 146 q 1132 50 1157 76 q 1068 8 1107 24 q 976 -8 1029 -8 q 813 53 868 -8 q 758 229 758 115 q 784 366 758 306 q 859 469 810 426 q 978 535 908 513 q 1138 558 1049 558 l 1144 435 q 992 406 1046 431 q 910 335 938 382 q 946 345 924 340 q 992 350 968 350 z "},"":{"ha":1219,"x_min":28,"x_max":1183,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 896 963 l 403 0 l 211 0 l 707 963 l 896 963 m 844 3 q 903 239 864 139 q 1004 424 942 339 l 757 424 l 757 557 l 1183 557 l 1183 440 q 1127 361 1156 408 q 1074 257 1099 314 q 1030 135 1049 200 q 1003 3 1011 69 l 844 3 z "},"":{"ha":1219,"x_min":22,"x_max":1183,"o":"m 433 814 q 424 758 433 783 q 398 712 414 733 q 361 672 382 690 q 319 635 340 653 q 271 591 296 615 q 231 546 246 567 l 447 546 l 447 419 l 49 419 q 47 440 47 431 q 47 458 47 449 q 84 581 47 526 q 192 696 121 636 q 252 751 229 728 q 275 800 275 775 q 263 833 275 821 q 226 846 250 846 q 152 830 186 846 q 94 794 118 814 l 22 903 q 115 959 58 933 q 233 985 171 985 q 326 972 288 985 q 388 937 364 960 q 422 883 411 914 q 433 814 433 851 m 940 963 l 447 0 l 256 0 l 751 963 l 940 963 m 844 3 q 903 239 864 139 q 1004 424 942 339 l 757 424 l 757 557 l 1183 557 l 1183 440 q 1127 361 1156 408 q 1074 257 1099 314 q 1030 135 1049 200 q 1003 3 1011 69 l 844 3 z "},"":{"ha":1219,"x_min":32,"x_max":1183,"o":"m 215 539 q 283 553 264 539 q 303 590 303 568 q 206 647 303 647 l 149 647 l 149 761 l 206 761 q 258 774 238 761 q 279 811 279 786 q 218 856 279 856 q 154 845 186 856 q 93 821 122 835 l 40 931 q 127 969 75 953 q 229 985 179 985 q 323 972 285 985 q 384 938 361 960 q 417 888 407 917 q 426 829 426 860 q 413 774 426 800 q 368 722 400 747 q 433 667 413 701 q 453 589 453 632 q 440 518 453 551 q 400 460 428 485 q 327 422 372 436 q 217 408 282 408 q 167 411 193 408 q 117 419 142 414 q 70 431 92 425 q 32 446 49 438 l 64 569 q 144 544 111 550 q 215 539 176 539 m 918 963 l 425 0 l 233 0 l 729 963 l 918 963 m 844 3 q 903 239 864 139 q 1004 424 942 339 l 757 424 l 757 557 l 1183 557 l 1183 440 q 1127 361 1156 408 q 1074 257 1099 314 q 1030 135 1049 200 q 1003 3 1011 69 l 844 3 z "},"":{"ha":1219,"x_min":28,"x_max":1183,"o":"m 418 974 l 418 653 l 482 653 l 482 538 l 418 538 l 418 418 l 288 418 l 288 538 l 28 538 l 28 638 q 147 816 86 736 q 281 974 207 896 l 418 974 m 288 819 q 227 742 256 783 q 174 653 199 701 l 288 653 l 288 819 m 936 963 l 443 0 l 251 0 l 747 963 l 936 963 m 844 3 q 903 239 864 139 q 1004 424 942 339 l 757 424 l 757 557 l 1183 557 l 1183 440 q 1127 361 1156 408 q 1074 257 1099 314 q 1030 135 1049 200 q 1003 3 1011 69 l 844 3 z "},"":{"ha":1219,"x_min":36,"x_max":1183,"o":"m 453 596 q 441 521 453 556 q 401 461 429 486 q 329 422 374 436 q 221 408 285 408 q 121 417 172 408 q 36 443 69 426 l 68 567 q 96 556 82 561 q 126 547 110 551 q 161 541 142 543 q 207 539 181 539 q 296 594 296 539 q 281 631 296 618 q 239 651 267 644 q 169 658 211 657 q 72 660 128 660 q 81 741 76 696 q 90 830 86 786 q 97 912 94 874 q 103 974 100 950 l 432 974 l 432 847 l 219 847 q 217 809 218 833 q 213 769 215 785 q 326 756 281 768 q 400 721 372 743 q 440 667 428 699 q 453 596 453 635 m 918 963 l 425 0 l 233 0 l 729 963 l 918 963 m 844 3 q 903 239 864 139 q 1004 424 942 339 l 757 424 l 757 557 l 1183 557 l 1183 440 q 1127 361 1156 408 q 1074 257 1099 314 q 1030 135 1049 200 q 1003 3 1011 69 l 844 3 z "},"":{"ha":1219,"x_min":43,"x_max":1183,"o":"m 249 665 q 213 661 232 665 q 185 651 194 657 q 264 528 176 528 q 314 549 299 528 q 329 596 329 569 q 311 648 329 631 q 249 665 293 665 m 276 767 q 364 754 328 767 q 423 719 400 742 q 456 667 446 697 q 467 600 467 636 q 454 528 467 563 q 417 467 442 493 q 353 424 392 440 q 261 408 314 408 q 98 470 153 408 q 43 646 43 532 q 69 783 43 722 q 144 886 94 843 q 263 952 193 929 q 422 975 333 975 l 429 851 q 276 823 331 847 q 194 751 222 799 q 231 762 208 757 q 276 767 253 767 m 921 963 l 428 0 l 236 0 l 732 963 l 921 963 m 844 3 q 903 239 864 139 q 1004 424 942 339 l 757 424 l 757 557 l 1183 557 l 1183 440 q 1127 361 1156 408 q 1074 257 1099 314 q 1030 135 1049 200 q 1003 3 1011 69 l 844 3 z "},"":{"ha":1219,"x_min":28,"x_max":1181,"o":"m 28 858 q 141 912 86 882 q 236 974 196 942 l 357 974 l 357 419 l 199 419 l 199 794 q 142 766 171 779 q 71 738 113 753 l 28 858 m 911 963 l 418 0 l 226 0 l 722 963 l 911 963 m 976 314 q 1012 318 993 314 q 1040 328 1031 322 q 964 451 1049 451 q 913 432 929 451 q 896 386 896 413 q 914 333 896 351 q 976 314 932 314 m 947 210 q 860 223 896 210 q 801 259 824 236 q 767 313 778 282 q 757 381 757 344 q 769 451 757 417 q 807 510 782 485 q 871 552 832 536 q 963 568 910 568 q 1126 505 1071 568 q 1181 331 1181 442 q 1089 90 1181 178 q 801 1 997 1 l 794 125 q 954 152 901 128 q 1031 225 1007 176 q 994 215 1017 219 q 947 210 971 210 z "},"":{"ha":1219,"x_min":22,"x_max":1181,"o":"m 433 814 q 424 758 433 783 q 398 712 414 733 q 361 672 382 690 q 319 635 340 653 q 271 591 296 615 q 231 546 246 567 l 447 546 l 447 419 l 49 419 q 47 440 47 431 q 47 458 47 449 q 84 581 47 526 q 192 696 121 636 q 252 751 229 728 q 275 800 275 775 q 263 833 275 821 q 226 846 250 846 q 152 830 186 846 q 94 794 118 814 l 22 903 q 115 959 58 933 q 233 985 171 985 q 326 972 288 985 q 388 937 364 960 q 422 883 411 914 q 433 814 433 851 m 960 963 l 467 0 l 275 0 l 771 963 l 960 963 m 976 314 q 1012 318 993 314 q 1040 328 1031 322 q 964 451 1049 451 q 913 432 929 451 q 896 386 896 413 q 914 333 896 351 q 976 314 932 314 m 947 210 q 860 223 896 210 q 801 259 824 236 q 767 313 778 282 q 757 381 757 344 q 769 451 757 417 q 807 510 782 485 q 871 552 832 536 q 963 568 910 568 q 1126 505 1071 568 q 1181 331 1181 442 q 1089 90 1181 178 q 801 1 997 1 l 794 125 q 954 152 901 128 q 1031 225 1007 176 q 994 215 1017 219 q 947 210 971 210 z "},"":{"ha":1219,"x_min":28,"x_max":1181,"o":"m 418 974 l 418 653 l 482 653 l 482 538 l 418 538 l 418 418 l 288 418 l 288 538 l 28 538 l 28 638 q 147 816 86 736 q 281 974 207 896 l 418 974 m 288 819 q 227 742 256 783 q 174 653 199 701 l 288 653 l 288 819 m 953 963 l 460 0 l 268 0 l 764 963 l 953 963 m 976 314 q 1012 318 993 314 q 1040 328 1031 322 q 964 451 1049 451 q 913 432 929 451 q 896 386 896 413 q 914 333 896 351 q 976 314 932 314 m 947 210 q 860 223 896 210 q 801 259 824 236 q 767 313 778 282 q 757 381 757 344 q 769 451 757 417 q 807 510 782 485 q 871 552 832 536 q 963 568 910 568 q 1126 505 1071 568 q 1181 331 1181 442 q 1089 90 1181 178 q 801 1 997 1 l 794 125 q 954 152 901 128 q 1031 225 1007 176 q 994 215 1017 219 q 947 210 971 210 z "},"":{"ha":1219,"x_min":36,"x_max":1181,"o":"m 453 596 q 441 521 453 556 q 401 461 429 486 q 329 422 374 436 q 221 408 285 408 q 121 417 172 408 q 36 443 69 426 l 68 567 q 96 556 82 561 q 126 547 110 551 q 161 541 142 543 q 207 539 181 539 q 296 594 296 539 q 281 631 296 618 q 239 651 267 644 q 169 658 211 657 q 72 660 128 660 q 81 741 76 696 q 90 830 86 786 q 97 912 94 874 q 103 974 100 950 l 432 974 l 432 847 l 219 847 q 217 809 218 833 q 213 769 215 785 q 326 756 281 768 q 400 721 372 743 q 440 667 428 699 q 453 596 453 635 m 939 963 l 446 0 l 254 0 l 750 963 l 939 963 m 976 314 q 1012 318 993 314 q 1040 328 1031 322 q 964 451 1049 451 q 913 432 929 451 q 896 386 896 413 q 914 333 896 351 q 976 314 932 314 m 947 210 q 860 223 896 210 q 801 259 824 236 q 767 313 778 282 q 757 381 757 344 q 769 451 757 417 q 807 510 782 485 q 871 552 832 536 q 963 568 910 568 q 1126 505 1071 568 q 1181 331 1181 442 q 1089 90 1181 178 q 801 1 997 1 l 794 125 q 954 152 901 128 q 1031 225 1007 176 q 994 215 1017 219 q 947 210 971 210 z "},"":{"ha":1219,"x_min":25,"x_max":1181,"o":"m 113 419 q 171 656 132 556 q 272 840 210 756 l 25 840 l 25 974 l 451 974 l 451 857 q 395 778 424 825 q 342 674 367 731 q 298 551 317 617 q 271 419 279 486 l 113 419 m 883 963 l 390 0 l 199 0 l 694 963 l 883 963 m 976 314 q 1012 318 993 314 q 1040 328 1031 322 q 964 451 1049 451 q 913 432 929 451 q 896 386 896 413 q 914 333 896 351 q 976 314 932 314 m 947 210 q 860 223 896 210 q 801 259 824 236 q 767 313 778 282 q 757 381 757 344 q 769 451 757 417 q 807 510 782 485 q 871 552 832 536 q 963 568 910 568 q 1126 505 1071 568 q 1181 331 1181 442 q 1089 90 1181 178 q 801 1 997 1 l 794 125 q 954 152 901 128 q 1031 225 1007 176 q 994 215 1017 219 q 947 210 971 210 z "},"":{"ha":1219,"x_min":29,"x_max":1181,"o":"m 476 574 q 464 507 476 538 q 424 455 451 476 q 355 421 397 433 q 251 408 313 408 q 139 424 182 408 q 72 463 96 439 q 38 513 47 486 q 29 564 29 540 q 54 644 29 613 q 115 699 79 675 q 60 754 76 726 q 43 824 43 782 q 56 885 43 856 q 94 936 68 914 q 160 972 121 958 q 253 985 200 985 q 354 971 314 985 q 419 935 394 957 q 453 886 443 913 q 463 833 463 860 q 441 763 463 796 q 385 711 419 731 q 456 649 436 681 q 476 574 476 617 m 175 574 q 192 535 175 554 q 253 517 208 517 q 313 535 296 517 q 331 574 331 553 q 302 628 331 608 q 226 657 274 647 q 189 622 203 642 q 175 574 175 601 m 321 825 q 306 860 321 842 q 254 878 290 878 q 203 860 218 878 q 188 825 188 842 q 205 781 188 801 q 267 746 222 760 q 308 779 294 761 q 321 825 321 797 m 957 963 l 464 0 l 272 0 l 768 963 l 957 963 m 976 314 q 1012 318 993 314 q 1040 328 1031 322 q 964 451 1049 451 q 913 432 929 451 q 896 386 896 413 q 914 333 896 351 q 976 314 932 314 m 947 210 q 860 223 896 210 q 801 259 824 236 q 767 313 778 282 q 757 381 757 344 q 769 451 757 417 q 807 510 782 485 q 871 552 832 536 q 963 568 910 568 q 1126 505 1071 568 q 1181 331 1181 442 q 1089 90 1181 178 q 801 1 997 1 l 794 125 q 954 152 901 128 q 1031 225 1007 176 q 994 215 1017 219 q 947 210 971 210 z "},"∂":{"ha":850,"x_min":51,"x_max":781,"o":"m 349 903 q 271 897 313 903 q 181 872 229 892 l 149 1035 q 266 1067 211 1058 q 369 1076 321 1076 q 572 1031 492 1076 q 698 910 651 985 q 763 738 744 835 q 781 539 781 642 q 760 342 781 442 q 694 163 740 243 q 569 33 647 83 q 376 -17 492 -17 q 247 6 306 -17 q 144 70 188 28 q 76 174 100 113 q 51 314 51 235 q 77 476 51 403 q 151 602 103 550 q 266 683 199 654 q 417 713 333 713 q 501 702 464 713 q 575 672 539 692 q 510 843 568 783 q 349 903 453 903 m 436 547 q 346 527 382 547 q 288 475 310 507 q 257 402 267 443 q 247 318 247 361 q 286 197 247 235 q 381 160 325 160 q 467 185 431 160 q 526 257 503 211 q 562 367 550 303 q 576 506 574 431 q 506 538 544 528 q 436 547 468 547 z "},"∆":{"ha":963,"x_min":14,"x_max":949,"o":"m 14 0 q 108 281 63 153 q 199 523 154 408 q 291 744 244 638 q 390 963 338 851 l 571 963 q 670 744 622 851 q 764 522 718 636 q 855 279 810 407 q 949 0 900 151 l 14 0 m 671 181 q 562 493 611 354 q 478 706 513 632 q 440 614 461 668 q 395 492 419 560 q 344 345 371 424 q 288 181 317 267 l 671 181 z "},"∏":{"ha":1014,"x_min":111,"x_max":903,"o":"m 903 963 l 903 -151 l 686 -151 l 686 779 l 328 779 l 328 -151 l 111 -151 l 111 963 l 903 963 z "},"∑":{"ha":754,"x_min":21,"x_max":726,"o":"m 546 419 q 474 326 510 375 q 403 226 438 276 q 335 126 368 176 q 276 31 303 76 l 726 31 l 726 -151 l 21 -151 l 21 -18 q 163 217 89 108 q 308 425 238 325 q 166 628 236 528 q 25 833 96 729 l 25 963 l 726 963 l 726 781 l 297 781 q 354 699 324 743 q 417 607 385 654 q 482 511 449 560 q 546 419 515 463 z "},"Ω":{"ha":1088,"x_min":56,"x_max":1032,"o":"m 544 985 q 730 955 644 985 q 878 867 815 925 q 976 723 940 808 q 1011 528 1011 638 q 867 179 1011 328 l 1032 179 l 1032 0 l 611 0 l 611 161 q 679 228 647 192 q 735 309 711 265 q 774 406 760 353 q 788 521 788 458 q 722 726 788 656 q 544 797 657 797 q 367 726 432 797 q 301 521 301 656 q 315 406 301 458 q 353 309 329 353 q 408 228 376 265 q 476 161 440 192 l 476 0 l 56 0 l 56 179 l 221 179 q 78 528 78 329 q 113 723 78 638 q 211 867 149 808 q 359 955 274 925 q 544 985 444 985 z "},"−":{"ha":789,"x_min":68,"x_max":721,"o":"m 68 501 l 721 501 l 721 328 l 68 328 l 68 501 z "},"∕":{"ha":211,"x_min":-236,"x_max":449,"o":"m 449 963 l -44 0 l -236 0 l 260 963 l 449 963 z "},"∙":{"ha":342,"x_min":42,"x_max":300,"o":"m 300 410 q 260 315 300 347 q 171 282 221 282 q 81 315 121 282 q 42 410 42 347 q 81 505 42 472 q 171 538 121 538 q 260 505 221 538 q 300 410 300 472 z "},"√":{"ha":836,"x_min":36,"x_max":885,"o":"m 36 489 l 317 582 q 353 503 338 539 q 384 431 369 467 q 415 356 399 394 q 453 267 432 317 l 689 1088 l 885 1088 l 547 -19 l 374 -19 q 292 182 332 86 q 204 375 251 278 l 85 338 l 36 489 z "},"∞":{"ha":883,"x_min":42,"x_max":842,"o":"m 442 289 q 364 216 407 246 q 263 186 321 186 q 101 245 160 186 q 42 408 42 304 q 101 573 42 515 q 263 631 160 631 q 365 601 321 631 q 442 528 408 572 q 519 601 476 571 q 621 631 563 631 q 783 572 724 631 q 842 408 842 513 q 783 244 842 301 q 621 186 724 186 q 519 215 563 186 q 442 289 475 244 m 368 408 q 322 467 349 447 q 265 486 296 486 q 217 462 233 486 q 200 408 200 438 q 217 355 200 379 q 265 331 233 331 q 321 349 296 331 q 368 408 346 367 m 515 408 q 561 350 535 369 q 618 331 588 331 q 667 355 650 331 q 683 408 683 379 q 667 462 683 438 q 618 486 650 486 q 563 468 588 486 q 515 408 538 450 z "},"∫":{"ha":557,"x_min":7,"x_max":550,"o":"m 175 767 q 249 998 175 917 q 481 1079 322 1079 q 490 1079 482 1079 q 508 1078 497 1079 q 531 1077 519 1078 q 550 1075 542 1076 l 550 894 l 490 894 q 407 860 432 894 q 382 769 382 826 l 382 56 q 308 -176 382 -94 q 76 -257 235 -257 q 67 -257 75 -257 q 49 -256 60 -257 q 26 -255 38 -256 q 7 -253 15 -254 l 7 -72 l 67 -72 q 150 -38 125 -72 q 175 53 175 -4 l 175 767 z "},"≈":{"ha":789,"x_min":32,"x_max":758,"o":"m 536 438 q 458 453 494 438 q 387 490 421 469 q 322 526 353 510 q 260 542 290 542 q 236 539 247 542 q 214 526 225 536 q 192 495 203 515 q 174 440 182 475 l 32 479 q 54 560 39 518 q 95 637 69 601 q 160 695 121 672 q 253 718 199 718 q 331 702 294 718 q 402 666 368 686 q 467 630 436 646 q 529 614 499 614 q 553 617 542 614 q 575 630 564 619 q 597 660 586 640 q 615 715 607 681 l 757 676 q 735 596 750 638 q 693 519 719 554 q 628 460 667 483 q 536 438 590 438 m 538 99 q 459 115 496 99 q 388 151 422 131 q 323 187 354 171 q 261 203 292 203 q 238 200 249 203 q 215 187 226 197 q 194 156 204 176 q 175 101 183 136 l 33 140 q 56 221 40 179 q 97 298 71 263 q 161 356 122 333 q 254 379 200 379 q 333 363 296 379 q 403 327 369 347 q 469 291 438 307 q 531 275 500 275 q 554 278 543 275 q 576 291 565 281 q 598 322 588 301 q 617 376 608 342 l 758 338 q 736 257 751 299 q 694 180 721 215 q 630 122 668 144 q 538 99 592 99 z "},"≠":{"ha":789,"x_min":68,"x_max":721,"o":"m 68 647 l 446 647 l 540 825 l 657 761 l 597 647 l 721 647 l 721 474 l 506 474 l 438 343 l 721 343 l 721 169 l 346 169 l 251 -11 l 135 53 l 196 169 l 68 169 l 68 343 l 286 343 l 356 474 l 68 474 l 68 647 z "},"≤":{"ha":789,"x_min":68,"x_max":721,"o":"m 69 628 l 669 868 l 719 703 l 294 546 l 719 388 l 669 222 l 69 463 l 69 628 m 68 168 l 721 168 l 721 0 l 68 0 l 68 168 z "},"≥":{"ha":789,"x_min":68,"x_max":721,"o":"m 719 463 l 119 222 l 69 388 l 494 546 l 69 703 l 119 868 l 719 628 l 719 463 m 721 0 l 68 0 l 68 168 l 721 168 l 721 0 z "},"◊":{"ha":819,"x_min":65,"x_max":763,"o":"m 65 482 q 159 626 114 558 q 247 754 204 693 q 332 873 290 815 q 414 988 374 931 q 496 873 454 931 q 581 754 538 815 q 669 626 624 693 q 763 482 714 558 q 669 338 714 406 q 581 210 624 271 q 496 91 538 149 q 414 -24 454 33 q 332 91 374 33 q 247 210 290 149 q 159 338 204 271 q 65 482 114 406 m 554 482 q 483 592 518 543 q 414 689 449 640 q 344 592 379 640 q 272 482 308 543 q 344 372 308 421 q 414 275 379 324 q 483 372 449 324 q 554 482 518 421 z "},"ﬀ":{"ha":1168,"x_min":97,"x_max":1178,"o":"m 414 1078 q 521 1066 472 1078 q 596 1043 569 1054 l 556 878 q 495 897 528 890 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 996 1078 q 1103 1066 1054 1078 q 1178 1043 1151 1054 l 1138 878 q 1077 897 1110 890 q 1017 903 1044 903 q 953 892 979 903 q 913 864 928 882 q 892 821 899 846 q 886 767 886 796 l 886 731 l 1142 731 l 1142 558 l 886 558 l 886 0 l 679 0 l 679 769 q 759 994 679 911 q 996 1078 839 1078 z "},"":{"ha":983,"x_min":97,"x_max":906,"o":"m 414 1078 q 510 1068 472 1078 q 575 1047 549 1058 l 539 885 q 490 899 517 894 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 886 0 l 679 0 l 679 731 l 886 731 l 886 0 m 906 942 q 869 852 906 885 q 782 819 832 819 q 695 852 732 819 q 658 942 658 885 q 695 1031 658 999 q 782 1064 732 1064 q 869 1031 832 1064 q 906 942 906 999 z "},"ﬁ":{"ha":983,"x_min":97,"x_max":906,"o":"m 414 1078 q 510 1068 472 1078 q 575 1047 549 1058 l 539 885 q 490 899 517 894 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 886 0 l 679 0 l 679 731 l 886 731 l 886 0 m 906 942 q 869 852 906 885 q 782 819 832 819 q 695 852 732 819 q 658 942 658 885 q 695 1031 658 999 q 782 1064 732 1064 q 869 1031 832 1064 q 906 942 906 999 z "},"":{"ha":1022,"x_min":97,"x_max":1001,"o":"m 414 1078 q 510 1068 472 1078 q 575 1047 549 1058 l 539 885 q 490 899 517 894 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 972 -14 q 826 6 882 -12 q 737 56 769 24 q 692 135 704 89 q 681 240 681 182 l 681 1044 l 888 1078 l 888 282 q 892 232 888 254 q 908 194 896 210 q 942 169 919 179 q 1001 157 964 160 l 972 -14 z "},"ﬂ":{"ha":1022,"x_min":97,"x_max":1001,"o":"m 414 1078 q 510 1068 472 1078 q 575 1047 549 1058 l 539 885 q 490 899 517 894 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 972 -14 q 826 6 882 -12 q 737 56 769 24 q 692 135 704 89 q 681 240 681 182 l 681 1044 l 888 1078 l 888 282 q 892 232 888 254 q 908 194 896 210 q 942 169 919 179 q 1001 157 964 160 l 972 -14 z "},"ﬃ":{"ha":1565,"x_min":97,"x_max":1488,"o":"m 414 1078 q 521 1066 472 1078 q 596 1043 569 1054 l 556 878 q 495 897 528 890 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 996 1078 q 1092 1068 1054 1078 q 1157 1047 1131 1058 l 1121 885 q 1072 899 1099 894 q 1017 903 1044 903 q 953 892 979 903 q 913 864 928 882 q 892 821 899 846 q 886 767 886 796 l 886 731 l 1142 731 l 1142 558 l 886 558 l 886 0 l 679 0 l 679 769 q 759 994 679 911 q 996 1078 839 1078 m 1468 0 l 1261 0 l 1261 731 l 1468 731 l 1468 0 m 1488 942 q 1451 852 1488 885 q 1364 819 1414 819 q 1277 852 1314 819 q 1240 942 1240 885 q 1277 1031 1240 999 q 1364 1064 1314 1064 q 1451 1031 1414 1064 q 1488 942 1488 999 z "},"ﬄ":{"ha":1604,"x_min":97,"x_max":1583,"o":"m 414 1078 q 521 1066 472 1078 q 596 1043 569 1054 l 556 878 q 495 897 528 890 q 435 903 463 903 q 372 892 397 903 q 331 864 346 882 q 310 821 317 846 q 304 767 304 796 l 304 731 l 560 731 l 560 558 l 304 558 l 304 0 l 97 0 l 97 769 q 177 994 97 911 q 414 1078 257 1078 m 996 1078 q 1092 1068 1054 1078 q 1157 1047 1131 1058 l 1121 885 q 1072 899 1099 894 q 1017 903 1044 903 q 953 892 979 903 q 913 864 928 882 q 892 821 899 846 q 886 767 886 796 l 886 731 l 1142 731 l 1142 558 l 886 558 l 886 0 l 679 0 l 679 769 q 759 994 679 911 q 996 1078 839 1078 m 1554 -14 q 1408 6 1464 -12 q 1319 56 1351 24 q 1274 135 1286 89 q 1263 240 1263 182 l 1263 1044 l 1469 1078 l 1469 282 q 1474 232 1469 254 q 1490 194 1478 210 q 1524 169 1501 179 q 1583 157 1546 160 l 1554 -14 z "},"":{"ha":819,"x_min":63,"x_max":757,"o":"m 757 483 q 665 110 757 240 q 410 -19 572 -19 q 155 110 247 -19 q 63 483 63 240 q 87 697 63 604 q 157 854 111 790 q 267 951 203 918 q 410 985 331 985 q 665 855 572 985 q 757 483 757 725 m 546 483 q 539 615 546 556 q 517 717 532 674 q 475 783 501 760 q 410 807 449 807 q 345 783 371 807 q 303 717 319 760 q 281 615 288 674 q 274 483 274 556 q 281 351 274 411 q 303 249 288 292 q 345 182 319 206 q 410 158 371 158 q 475 182 449 158 q 517 249 501 206 q 539 351 532 292 q 546 483 546 411 z "},"":{"ha":643,"x_min":38,"x_max":500,"o":"m 38 763 q 122 801 78 779 q 207 848 165 822 q 287 902 249 874 q 356 963 325 931 l 500 963 l 500 0 l 293 0 l 293 693 q 200 642 251 665 q 100 603 149 619 l 38 763 z "},"":{"ha":781,"x_min":49,"x_max":718,"o":"m 689 710 q 668 608 689 657 q 614 515 647 560 q 539 428 581 469 q 457 349 497 386 q 412 305 436 329 q 365 256 388 281 q 326 209 343 231 q 304 174 308 188 l 718 174 l 718 0 l 76 0 q 74 39 74 15 q 74 72 74 63 q 95 194 74 139 q 151 298 117 250 q 230 388 186 346 q 317 471 274 429 q 379 531 350 503 q 431 587 408 560 q 465 641 453 614 q 478 696 478 668 q 443 782 478 757 q 357 807 408 807 q 287 795 319 807 q 227 767 254 783 q 181 735 200 751 q 151 710 161 719 l 49 854 q 191 948 110 911 q 365 985 272 985 q 511 965 450 985 q 612 910 572 946 q 670 824 651 875 q 689 710 689 774 z "},"":{"ha":761,"x_min":22,"x_max":688,"o":"m 303 -21 q 224 -16 265 -21 q 143 -3 182 -11 q 72 15 104 6 q 22 33 40 25 l 63 206 q 155 173 99 190 q 294 156 211 156 q 435 192 390 156 q 479 289 479 228 q 463 352 479 326 q 419 394 447 378 q 353 416 392 410 q 272 422 315 422 l 192 422 l 192 589 l 283 589 q 342 594 314 589 q 393 613 371 600 q 428 649 415 626 q 442 707 442 672 q 431 753 442 733 q 402 785 419 772 q 362 803 385 797 q 315 810 339 810 q 205 792 256 810 q 113 747 154 774 l 39 899 q 91 928 61 913 q 157 956 121 943 q 234 976 193 968 q 321 985 275 985 q 467 965 406 985 q 569 908 529 944 q 629 822 610 871 q 649 714 649 772 q 617 603 649 657 q 531 522 585 550 q 647 431 606 492 q 688 286 688 371 q 665 163 688 219 q 596 66 643 107 q 476 2 549 25 q 303 -21 403 -21 z "},"":{"ha":797,"x_min":42,"x_max":763,"o":"m 457 710 q 342 556 403 639 q 239 385 281 472 l 457 385 l 457 710 m 660 963 l 660 385 l 763 385 l 763 215 l 660 215 l 660 0 l 457 0 l 457 215 l 42 215 l 42 367 q 118 505 72 428 q 220 663 164 582 q 339 822 276 744 q 464 963 401 900 l 660 963 z "},"":{"ha":768,"x_min":44,"x_max":699,"o":"m 492 283 q 474 355 492 324 q 411 407 456 386 q 292 439 367 428 q 103 450 217 450 q 128 713 118 579 q 143 963 138 846 l 664 963 l 664 789 l 317 789 q 310 692 314 739 q 303 611 307 646 q 602 516 506 597 q 699 290 699 435 q 675 167 699 224 q 604 68 651 110 q 485 3 557 26 q 318 -21 414 -21 q 240 -16 281 -21 q 160 -3 199 -11 q 92 13 122 4 q 44 29 61 21 l 82 200 q 174 170 117 185 q 310 156 231 156 q 449 194 406 156 q 492 283 492 232 z "},"":{"ha":793,"x_min":57,"x_max":746,"o":"m 386 453 q 321 447 356 453 q 267 432 286 442 q 266 415 267 426 q 265 396 265 404 q 272 301 265 346 q 296 224 279 257 q 340 172 313 190 q 410 153 368 153 q 469 167 444 153 q 509 204 493 182 q 533 253 525 226 q 540 306 540 281 q 505 415 540 376 q 386 453 469 453 m 413 614 q 566 590 503 614 q 669 524 629 565 q 728 426 710 482 q 746 308 746 371 q 726 194 746 253 q 665 89 706 136 q 560 11 624 42 q 411 -19 497 -19 q 147 90 238 -19 q 57 393 57 200 q 100 639 57 532 q 223 819 143 746 q 416 930 303 892 q 671 969 529 968 q 676 885 674 926 q 682 800 679 844 q 549 787 611 799 q 437 750 488 775 q 349 685 386 725 q 290 589 311 646 q 353 608 321 603 q 413 614 385 614 z "},"":{"ha":747,"x_min":38,"x_max":711,"o":"m 175 0 q 210 211 183 101 q 274 426 236 321 q 360 626 313 532 q 456 788 407 719 l 38 788 l 38 964 l 711 964 l 711 814 q 613 679 667 765 q 512 484 560 593 q 428 250 464 375 q 385 0 393 125 l 175 0 z "},"":{"ha":789,"x_min":56,"x_max":738,"o":"m 738 268 q 716 153 738 206 q 651 63 694 101 q 544 2 608 24 q 394 -19 479 -19 q 233 8 297 -19 q 128 75 168 35 q 72 163 89 115 q 56 251 56 211 q 67 328 56 293 q 97 391 78 363 q 141 443 117 419 q 193 488 165 467 q 105 583 133 536 q 76 704 76 631 q 99 811 76 760 q 164 901 122 863 q 265 962 206 939 q 396 985 324 985 q 541 960 481 985 q 640 899 601 936 q 697 815 679 861 q 714 722 714 768 q 678 598 714 656 q 590 507 643 540 q 703 399 669 456 q 738 268 738 343 m 257 260 q 265 223 257 243 q 289 186 272 203 q 332 158 306 169 q 396 147 358 147 q 501 182 468 147 q 535 260 535 217 q 520 317 535 292 q 481 360 506 342 q 422 394 456 379 q 349 421 388 408 q 283 353 310 392 q 257 260 257 314 m 514 717 q 508 749 514 732 q 487 782 501 767 q 450 808 472 797 q 396 818 428 818 q 343 808 365 818 q 306 783 321 799 q 285 749 292 767 q 278 714 278 731 q 310 631 278 669 q 422 564 343 592 q 490 628 467 592 q 514 717 514 664 z "},"":{"ha":793,"x_min":44,"x_max":735,"o":"m 407 517 q 474 523 439 517 q 525 540 508 529 l 525 553 q 526 564 525 558 q 526 574 526 569 q 518 667 525 624 q 494 744 511 711 q 449 795 478 776 q 379 814 421 814 q 321 800 346 814 q 281 764 296 786 q 258 715 265 742 q 250 664 250 689 q 287 553 250 589 q 407 517 324 517 m 508 382 q 444 362 479 368 q 383 356 408 356 q 229 377 293 356 q 124 438 165 399 q 64 533 83 478 q 44 656 44 589 q 63 769 44 711 q 122 876 82 828 q 224 955 163 924 q 374 986 286 986 q 644 876 553 986 q 735 558 735 765 q 699 318 735 422 q 590 143 664 214 q 400 35 515 72 q 126 -3 285 -1 q 122 83 125 42 q 117 169 119 125 q 260 181 196 171 q 372 216 324 192 q 455 281 421 240 q 508 382 489 321 z "},"":{"ha":504,"x_min":21,"x_max":483,"o":"m 21 864 q 81 1076 21 1001 q 253 1151 142 1151 q 423 1076 363 1151 q 483 864 483 1001 q 423 650 483 725 q 253 575 363 575 q 81 650 142 575 q 21 864 21 725 m 335 864 q 318 981 335 936 q 254 1026 301 1026 q 188 981 207 1026 q 169 864 169 936 q 188 745 169 790 q 254 700 207 700 q 318 745 301 700 q 335 864 335 790 z "},"":{"ha":504,"x_min":53,"x_max":382,"o":"m 53 1025 q 166 1078 111 1049 q 261 1140 221 1108 l 382 1140 l 382 586 l 224 586 l 224 961 q 167 933 196 946 q 96 904 138 919 l 53 1025 z "},"":{"ha":504,"x_min":22,"x_max":447,"o":"m 433 981 q 424 925 433 950 q 398 878 414 900 q 361 838 382 857 q 319 801 340 819 q 271 758 296 782 q 231 713 246 733 l 447 713 l 447 586 l 49 586 q 47 606 47 597 q 47 625 47 615 q 84 748 47 693 q 192 863 121 803 q 252 918 229 894 q 275 967 275 942 q 263 1000 275 988 q 226 1013 250 1013 q 152 997 186 1013 q 94 961 118 981 l 22 1069 q 115 1126 58 1100 q 233 1151 171 1151 q 326 1139 288 1151 q 388 1103 364 1126 q 422 1049 411 1081 q 433 981 433 1018 z "},"":{"ha":504,"x_min":24,"x_max":444,"o":"m 207 706 q 275 720 256 706 q 294 757 294 735 q 197 814 294 814 l 140 814 l 140 928 l 197 928 q 250 940 229 928 q 271 978 271 953 q 210 1022 271 1022 q 146 1012 178 1022 q 85 988 114 1001 l 32 1097 q 119 1135 67 1119 q 221 1151 171 1151 q 315 1139 276 1151 q 376 1105 353 1126 q 408 1055 399 1083 q 418 996 418 1026 q 405 940 418 967 q 360 889 392 914 q 424 833 404 868 q 444 756 444 799 q 432 685 444 718 q 392 627 419 651 q 319 589 364 603 q 208 575 274 575 q 159 578 185 575 q 108 586 133 581 q 62 598 83 592 q 24 613 40 604 l 56 736 q 135 711 103 717 q 207 706 168 706 z "},"":{"ha":504,"x_min":28,"x_max":482,"o":"m 418 1140 l 418 819 l 482 819 l 482 704 l 418 704 l 418 585 l 288 585 l 288 704 l 28 704 l 28 804 q 147 983 86 903 q 281 1140 207 1063 l 418 1140 m 288 986 q 227 909 256 950 q 174 819 199 868 l 288 819 l 288 986 z "},"":{"ha":504,"x_min":36,"x_max":453,"o":"m 453 763 q 441 688 453 722 q 401 628 429 653 q 329 589 374 603 q 221 575 285 575 q 121 584 172 575 q 36 610 69 593 l 68 733 q 96 723 82 728 q 126 714 110 718 q 161 708 142 710 q 207 706 181 706 q 296 761 296 706 q 281 798 296 785 q 239 817 267 811 q 169 825 211 824 q 72 826 128 826 q 81 908 76 863 q 90 997 86 953 q 97 1078 94 1040 q 103 1140 100 1117 l 432 1140 l 432 1014 l 219 1014 q 217 976 218 1000 q 213 936 215 951 q 326 922 281 935 q 400 888 372 910 q 440 833 428 865 q 453 763 453 801 z "},"":{"ha":504,"x_min":43,"x_max":467,"o":"m 249 832 q 213 828 232 832 q 185 818 194 824 q 264 694 176 694 q 314 715 299 694 q 329 763 329 736 q 311 815 329 797 q 249 832 293 832 m 276 933 q 364 921 328 933 q 423 886 400 908 q 456 833 446 864 q 467 767 467 803 q 454 694 467 729 q 417 633 442 660 q 353 591 392 607 q 261 575 314 575 q 98 637 153 575 q 43 813 43 699 q 69 949 43 889 q 144 1053 94 1010 q 263 1119 193 1096 q 422 1142 333 1142 l 429 1018 q 276 990 331 1014 q 194 918 222 965 q 231 928 208 924 q 276 933 253 933 z "},"":{"ha":504,"x_min":42,"x_max":468,"o":"m 129 586 q 188 822 149 722 q 289 1007 226 922 l 42 1007 l 42 1140 l 468 1140 l 468 1024 q 412 944 440 992 q 358 840 383 897 q 315 718 333 783 q 288 586 296 653 l 129 586 z "},"":{"ha":504,"x_min":29,"x_max":476,"o":"m 476 740 q 464 674 476 704 q 424 622 451 643 q 355 588 397 600 q 251 575 313 575 q 139 590 182 575 q 72 629 96 606 q 38 680 47 653 q 29 731 29 707 q 54 810 29 779 q 115 865 79 842 q 60 921 76 893 q 43 990 43 949 q 56 1051 43 1022 q 94 1103 68 1081 q 160 1138 121 1125 q 253 1151 200 1151 q 354 1138 314 1151 q 419 1101 394 1124 q 453 1053 443 1079 q 463 1000 463 1026 q 441 930 463 963 q 385 878 419 897 q 456 815 436 847 q 476 740 476 783 m 175 740 q 192 702 175 721 q 253 683 208 683 q 313 701 296 683 q 331 740 331 719 q 302 794 331 775 q 226 824 274 814 q 189 788 203 808 q 175 740 175 768 m 321 992 q 306 1026 321 1008 q 254 1044 290 1044 q 203 1026 218 1044 q 188 992 188 1008 q 205 947 188 968 q 267 913 222 926 q 308 946 294 928 q 321 992 321 964 z "},"":{"ha":504,"x_min":42,"x_max":465,"o":"m 261 897 q 297 901 278 897 q 325 911 315 906 q 249 1035 333 1035 q 197 1015 214 1035 q 181 969 181 996 q 199 916 181 935 q 261 897 217 897 m 232 793 q 144 806 181 793 q 85 842 108 819 q 52 897 63 865 q 42 964 42 928 q 54 1034 42 1000 q 92 1094 67 1068 q 156 1135 117 1119 q 247 1151 194 1151 q 410 1088 356 1151 q 465 914 465 1025 q 374 673 465 761 q 86 585 282 585 l 79 708 q 239 735 186 711 q 315 808 292 760 q 278 798 301 803 q 232 793 256 793 z "},"":{"ha":504,"x_min":21,"x_max":483,"o":"m 21 114 q 81 326 21 251 q 253 401 142 401 q 423 326 363 401 q 483 114 483 251 q 423 -100 483 -25 q 253 -175 363 -175 q 81 -100 142 -175 q 21 114 21 -25 m 335 114 q 318 231 335 186 q 254 276 301 276 q 188 231 207 276 q 169 114 169 186 q 188 -5 169 40 q 254 -50 207 -50 q 318 -5 301 -50 q 335 114 335 40 z "},"":{"ha":504,"x_min":53,"x_max":382,"o":"m 53 275 q 166 328 111 299 q 261 390 221 358 l 382 390 l 382 -164 l 224 -164 l 224 211 q 167 183 196 196 q 96 154 138 169 l 53 275 z "},"":{"ha":504,"x_min":22,"x_max":447,"o":"m 433 231 q 424 175 433 200 q 398 128 414 150 q 361 88 382 107 q 319 51 340 69 q 271 8 296 32 q 231 -37 246 -17 l 447 -37 l 447 -164 l 49 -164 q 47 -144 47 -153 q 47 -125 47 -135 q 84 -2 47 -57 q 192 113 121 53 q 252 168 229 144 q 275 217 275 192 q 263 250 275 238 q 226 263 250 263 q 152 247 186 263 q 94 211 118 231 l 22 319 q 115 376 58 350 q 233 401 171 401 q 326 389 288 401 q 388 353 364 376 q 422 299 411 331 q 433 231 433 268 z "},"":{"ha":504,"x_min":24,"x_max":444,"o":"m 207 -44 q 275 -30 256 -44 q 294 7 294 -15 q 197 64 294 64 l 140 64 l 140 178 l 197 178 q 250 190 229 178 q 271 228 271 203 q 210 272 271 272 q 146 262 178 272 q 85 238 114 251 l 32 347 q 119 385 67 369 q 221 401 171 401 q 315 389 276 401 q 376 355 353 376 q 408 305 399 333 q 418 246 418 276 q 405 190 418 217 q 360 139 392 164 q 424 83 404 118 q 444 6 444 49 q 432 -65 444 -32 q 392 -123 419 -99 q 319 -161 364 -147 q 208 -175 274 -175 q 159 -172 185 -175 q 108 -164 133 -169 q 62 -152 83 -158 q 24 -137 40 -146 l 56 -14 q 135 -39 103 -33 q 207 -44 168 -44 z "},"":{"ha":504,"x_min":28,"x_max":482,"o":"m 418 390 l 418 69 l 482 69 l 482 -46 l 418 -46 l 418 -165 l 288 -165 l 288 -46 l 28 -46 l 28 54 q 147 233 86 153 q 281 390 207 313 l 418 390 m 288 236 q 227 159 256 200 q 174 69 199 118 l 288 69 l 288 236 z "},"":{"ha":504,"x_min":36,"x_max":453,"o":"m 453 13 q 441 -62 453 -28 q 401 -122 429 -97 q 329 -161 374 -147 q 221 -175 285 -175 q 121 -166 172 -175 q 36 -140 69 -157 l 68 -17 q 96 -27 82 -22 q 126 -36 110 -32 q 161 -42 142 -40 q 207 -44 181 -44 q 296 11 296 -44 q 281 48 296 35 q 239 67 267 61 q 169 75 211 74 q 72 76 128 76 q 81 158 76 113 q 90 247 86 203 q 97 328 94 290 q 103 390 100 367 l 432 390 l 432 264 l 219 264 q 217 226 218 250 q 213 186 215 201 q 326 172 281 185 q 400 138 372 160 q 440 83 428 115 q 453 13 453 51 z "},"":{"ha":504,"x_min":43,"x_max":467,"o":"m 249 82 q 213 78 232 82 q 185 68 194 74 q 264 -56 176 -56 q 314 -35 299 -56 q 329 13 329 -14 q 311 65 329 47 q 249 82 293 82 m 276 183 q 364 171 328 183 q 423 136 400 158 q 456 83 446 114 q 467 17 467 53 q 454 -56 467 -21 q 417 -117 442 -90 q 353 -159 392 -143 q 261 -175 314 -175 q 98 -113 153 -175 q 43 63 43 -51 q 69 199 43 139 q 144 303 94 260 q 263 369 193 346 q 422 392 333 392 l 429 268 q 276 240 331 264 q 194 168 222 215 q 231 178 208 174 q 276 183 253 183 z "},"":{"ha":504,"x_min":42,"x_max":468,"o":"m 129 -164 q 188 72 149 -28 q 289 257 226 172 l 42 257 l 42 390 l 468 390 l 468 274 q 412 194 440 242 q 358 90 383 147 q 315 -32 333 33 q 288 -164 296 -97 l 129 -164 z "},"":{"ha":504,"x_min":29,"x_max":476,"o":"m 476 -10 q 464 -76 476 -46 q 424 -128 451 -107 q 355 -162 397 -150 q 251 -175 313 -175 q 139 -160 182 -175 q 72 -121 96 -144 q 38 -70 47 -97 q 29 -19 29 -43 q 54 60 29 29 q 115 115 79 92 q 60 171 76 143 q 43 240 43 199 q 56 301 43 272 q 94 353 68 331 q 160 388 121 375 q 253 401 200 401 q 354 388 314 401 q 419 351 394 374 q 453 303 443 329 q 463 250 463 276 q 441 180 463 213 q 385 128 419 147 q 456 65 436 97 q 476 -10 476 33 m 175 -10 q 192 -48 175 -29 q 253 -67 208 -67 q 313 -49 296 -67 q 331 -10 331 -31 q 302 44 331 25 q 226 74 274 64 q 189 38 203 58 q 175 -10 175 18 m 321 242 q 306 276 321 258 q 254 294 290 294 q 203 276 218 294 q 188 242 188 258 q 205 197 188 218 q 267 163 222 176 q 308 196 294 178 q 321 242 321 214 z "},"":{"ha":504,"x_min":42,"x_max":465,"o":"m 261 147 q 297 151 278 147 q 325 161 315 156 q 249 285 333 285 q 197 265 214 285 q 181 219 181 246 q 199 166 181 185 q 261 147 217 147 m 232 43 q 144 56 181 43 q 85 92 108 69 q 52 147 63 115 q 42 214 42 178 q 54 284 42 250 q 92 344 67 318 q 156 385 117 369 q 247 401 194 401 q 410 338 356 401 q 465 164 465 275 q 374 -77 465 11 q 86 -165 282 -165 l 79 -42 q 239 -15 186 -39 q 315 58 292 10 q 278 48 301 53 q 232 43 256 43 z "},"ƀ":{"ha":839,"x_min":11,"x_max":776,"o":"m 11 957 l 97 957 l 97 1044 l 304 1078 l 304 957 l 503 957 l 503 828 l 304 828 l 304 694 q 376 718 339 710 q 457 726 414 726 q 594 699 535 726 q 694 622 654 671 q 756 505 735 574 q 776 356 776 436 q 751 203 776 272 q 676 85 725 135 q 557 9 628 36 q 396 -18 486 -18 q 317 -15 358 -18 q 237 -6 276 -11 q 161 8 197 0 q 97 24 125 15 l 97 828 l 11 828 l 11 957 m 565 361 q 528 501 565 451 q 418 551 492 551 q 355 543 386 551 q 304 522 324 535 l 304 165 q 343 160 319 163 q 394 158 367 158 q 468 174 436 158 q 522 216 500 189 q 554 281 543 243 q 565 361 565 318 z "},"Ɓ":{"ha":1126,"x_min":21,"x_max":1064,"o":"m 21 726 q 76 867 21 817 q 213 940 131 917 q 392 969 296 964 q 569 974 488 974 q 755 960 672 974 q 896 915 838 947 q 985 831 954 883 q 1017 703 1017 779 q 906 521 1017 588 q 1031 426 997 486 q 1064 292 1064 367 q 953 64 1064 140 q 625 -12 843 -12 q 467 -8 546 -12 q 304 15 389 -3 l 304 785 q 221 757 247 779 q 194 703 194 735 q 195 680 194 696 q 201 642 196 664 l 38 619 q 26 669 32 639 q 21 726 21 700 m 515 419 l 515 171 q 567 167 539 168 q 628 165 594 165 q 785 193 725 165 q 844 296 844 221 q 794 391 844 363 q 651 419 744 419 l 515 419 m 515 585 l 621 585 q 764 610 721 585 q 807 693 807 636 q 763 775 807 751 q 632 799 718 799 q 515 794 571 799 l 515 585 z "},"Ƃ":{"ha":903,"x_min":111,"x_max":840,"o":"m 318 779 l 318 621 l 389 621 q 580 604 496 621 q 722 550 664 588 q 810 453 779 513 q 840 307 840 393 q 724 69 840 147 q 393 -10 608 -10 q 260 -3 335 -10 q 111 22 186 4 l 111 963 l 750 963 l 750 779 l 318 779 m 404 175 q 486 181 447 175 q 555 201 525 186 q 603 240 585 215 q 621 306 621 265 q 604 374 621 347 q 557 415 588 400 q 482 436 526 431 q 382 442 438 442 l 318 442 l 318 178 q 355 176 333 176 q 404 175 376 175 z "},"ƃ":{"ha":839,"x_min":97,"x_max":776,"o":"m 776 357 q 751 203 776 272 q 676 85 725 135 q 557 9 628 36 q 396 -18 486 -18 q 317 -15 358 -18 q 237 -6 276 -11 q 161 8 197 0 q 97 24 125 15 l 97 1068 l 703 1068 l 703 897 l 304 897 l 304 697 q 376 721 339 713 q 457 729 414 729 q 594 702 535 729 q 694 626 654 675 q 756 508 735 576 q 776 357 776 440 m 565 363 q 528 505 565 456 q 418 554 492 554 q 355 546 386 554 q 304 525 324 538 l 304 165 q 343 160 319 163 q 394 158 367 158 q 522 215 479 158 q 565 363 565 272 z "},"Ƅ":{"ha":839,"x_min":-21,"x_max":776,"o":"m 776 365 q 751 207 776 278 q 676 86 725 136 q 557 9 628 36 q 396 -18 486 -18 q 317 -15 358 -18 q 237 -6 276 -11 q 161 8 197 0 q 97 24 125 15 l 97 825 l -21 949 q 132 1021 50 988 q 304 1078 214 1054 l 304 714 q 376 738 339 729 q 457 746 414 746 q 594 719 535 746 q 694 642 654 692 q 756 522 735 592 q 776 365 776 451 m 565 371 q 418 571 565 571 q 355 563 386 571 q 304 542 324 554 l 304 165 q 343 160 319 163 q 394 158 367 158 q 522 217 479 158 q 565 371 565 275 z "},"ƅ":{"ha":893,"x_min":-7,"x_max":840,"o":"m 318 626 q 349 628 335 628 q 379 628 364 628 q 724 549 608 628 q 840 308 840 471 q 389 -8 840 -8 q 258 -2 331 -8 q 111 21 185 4 l 111 724 l -7 847 q 146 919 64 886 q 318 976 228 953 l 318 626 m 621 308 q 602 377 621 350 q 551 420 583 404 q 474 442 518 436 q 376 449 429 449 q 341 448 351 449 q 318 446 331 447 l 318 174 q 353 172 333 172 q 399 172 372 172 q 485 178 444 172 q 555 200 525 185 q 603 242 585 215 q 621 308 621 268 z "},"Ɔ":{"ha":900,"x_min":28,"x_max":831,"o":"m 350 985 q 557 951 467 985 q 708 854 647 918 q 799 697 768 790 q 831 483 831 603 q 793 270 831 364 q 690 112 756 176 q 535 14 625 47 q 339 -19 444 -19 q 228 -10 278 -19 q 140 10 178 -1 q 78 35 103 22 q 42 54 53 47 l 104 229 q 208 189 149 206 q 342 172 267 172 q 440 189 392 172 q 524 242 488 206 q 583 338 561 279 q 606 479 606 396 q 591 603 606 546 q 544 703 576 661 q 458 769 511 744 q 331 793 406 793 q 178 774 235 793 q 88 739 122 756 l 28 913 q 157 963 74 940 q 350 985 240 985 z "},"Ƈ":{"ha":1000,"x_min":69,"x_max":1042,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 640 981 606 985 q 708 967 674 976 q 785 1066 738 1040 q 901 1092 832 1092 q 983 1082 946 1092 q 1042 1061 1019 1072 l 992 896 q 958 907 975 903 q 919 911 940 911 q 869 899 896 911 q 828 838 843 886 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 z "},"ƈ":{"ha":761,"x_min":63,"x_max":810,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 476 749 458 750 q 513 744 493 747 q 581 838 539 811 q 688 864 624 864 q 758 856 726 864 q 810 838 790 847 l 764 683 q 734 694 749 690 q 700 697 719 697 q 656 686 679 697 q 621 633 632 675 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 z "},"Ɖ":{"ha":1039,"x_min":14,"x_max":969,"o":"m 343 176 q 378 174 358 175 q 426 174 399 174 q 667 256 589 174 q 746 482 746 338 q 671 711 746 633 q 433 789 596 789 q 388 788 411 789 q 343 785 364 788 l 343 579 l 518 579 l 518 419 l 343 419 l 343 176 m 969 482 q 931 264 969 357 q 820 110 892 171 q 646 18 749 49 q 415 -12 543 -12 q 279 -8 357 -12 q 126 13 201 -3 l 126 419 l 14 419 l 14 579 l 126 579 l 126 950 q 283 969 201 964 q 422 974 364 974 q 647 946 546 974 q 819 858 747 918 q 931 706 892 799 q 969 482 969 613 z "},"Ɗ":{"ha":1217,"x_min":21,"x_max":1147,"o":"m 1147 482 q 1108 264 1147 357 q 998 110 1069 171 q 824 18 926 49 q 593 -12 721 -12 q 457 -8 535 -12 q 304 13 379 -3 l 304 785 q 221 757 247 779 q 194 703 194 735 q 195 680 194 696 q 201 642 196 664 l 38 619 q 26 669 32 639 q 21 726 21 700 q 49 832 21 789 q 126 903 78 875 q 234 945 174 931 q 359 966 294 960 q 486 973 424 972 q 600 974 549 974 q 824 946 724 974 q 997 858 925 918 q 1108 706 1069 799 q 1147 482 1147 613 m 521 176 q 556 174 536 175 q 604 174 576 174 q 845 256 767 174 q 924 482 924 338 q 849 711 924 633 q 611 789 774 789 q 565 788 589 789 q 521 785 542 788 l 521 176 z "},"Ƌ":{"ha":903,"x_min":63,"x_max":792,"o":"m 153 779 l 153 963 l 792 963 l 792 22 q 642 -3 717 4 q 510 -10 568 -10 q 178 69 294 -10 q 63 307 63 147 q 93 453 63 393 q 181 550 124 513 q 323 604 239 588 q 514 621 407 621 l 585 621 l 585 779 l 153 779 m 499 175 q 548 176 526 175 q 585 178 569 176 l 585 442 l 521 442 q 421 436 465 442 q 346 415 376 431 q 299 374 315 400 q 282 306 282 347 q 300 240 282 265 q 348 201 318 215 q 417 181 378 186 q 499 175 456 175 z "},"ƌ":{"ha":839,"x_min":63,"x_max":742,"o":"m 63 357 q 83 508 63 440 q 144 626 104 576 q 244 702 185 675 q 382 729 304 729 q 463 721 425 729 q 535 697 500 713 l 535 897 l 136 897 l 136 1068 l 742 1068 l 742 24 q 678 8 714 15 q 602 -6 642 0 q 522 -15 563 -11 q 443 -18 481 -18 q 282 9 353 -18 q 163 85 211 36 q 88 203 114 135 q 63 357 63 272 m 274 363 q 317 215 274 272 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 525 q 484 546 515 538 q 421 554 453 554 q 310 505 347 554 q 274 363 274 456 z "},"ƍ":{"ha":824,"x_min":58,"x_max":765,"o":"m 765 418 q 712 242 765 319 q 561 114 658 164 q 601 78 583 96 q 633 41 619 61 q 653 -3 646 21 q 660 -58 660 -28 q 590 -205 660 -149 q 379 -261 521 -261 q 238 -249 293 -261 q 126 -217 182 -237 l 169 -56 q 260 -82 211 -72 q 367 -92 308 -92 q 394 -91 379 -92 q 422 -86 410 -90 q 444 -73 435 -82 q 453 -47 453 -64 q 440 -12 453 -28 q 401 19 426 3 q 339 54 376 35 q 254 101 301 74 q 108 231 158 157 q 58 406 58 306 q 83 545 58 482 q 154 653 108 608 q 265 724 200 699 q 411 749 331 749 q 558 725 493 749 q 669 658 624 701 q 740 553 715 614 q 765 418 765 493 m 268 407 q 276 352 268 378 q 301 303 283 326 q 347 259 318 281 q 419 215 376 238 q 480 251 454 229 q 522 299 506 274 q 547 353 539 325 q 556 407 556 381 q 514 533 556 493 q 411 572 472 572 q 309 533 350 572 q 268 407 268 493 z "},"Ǝ":{"ha":842,"x_min":49,"x_max":731,"o":"m 49 0 l 49 182 l 514 182 l 514 414 l 129 414 l 129 592 l 514 592 l 514 781 l 81 781 l 81 963 l 731 963 l 731 0 l 49 0 z "},"Ə":{"ha":1014,"x_min":69,"x_max":944,"o":"m 717 550 q 690 665 710 618 q 635 742 669 713 q 551 784 601 771 q 433 797 501 797 q 355 790 392 797 q 285 774 318 783 q 227 753 253 764 q 183 735 201 743 l 128 904 q 175 928 144 914 q 247 954 206 942 q 340 976 289 967 q 447 985 390 985 q 674 947 579 985 q 828 841 768 908 q 917 683 889 774 q 944 486 944 592 q 911 265 944 360 q 817 106 878 169 q 674 12 757 43 q 493 -19 592 -19 q 319 11 397 -19 q 186 102 242 42 q 100 253 131 163 q 69 463 69 343 q 73 506 69 478 q 79 550 76 535 l 717 550 m 294 372 q 354 219 303 274 q 494 164 406 164 q 585 181 547 164 q 649 226 624 197 q 690 292 675 254 q 710 372 704 329 l 294 372 z "},"Ɛ":{"ha":854,"x_min":63,"x_max":813,"o":"m 650 410 l 519 410 q 426 405 469 410 q 352 387 383 400 q 303 349 321 374 q 286 283 286 324 q 342 192 286 218 q 490 165 399 165 q 565 172 528 165 q 638 189 603 179 q 701 209 672 199 q 749 228 729 219 l 813 58 q 745 29 783 43 q 663 4 707 15 q 572 -14 619 -7 q 475 -21 524 -21 q 172 50 281 -21 q 63 275 63 121 q 75 358 63 321 q 109 424 88 394 q 159 475 131 453 q 219 514 188 497 q 133 602 161 550 q 104 707 104 654 q 131 828 104 776 q 207 915 158 881 q 322 966 256 949 q 467 983 389 983 q 645 962 567 983 q 779 906 724 940 l 710 735 q 601 781 658 764 q 468 799 544 799 q 363 775 400 799 q 325 704 325 751 q 339 649 325 671 q 377 613 353 626 q 434 593 401 599 q 504 588 467 588 l 650 588 l 650 410 z "},"Ƒ":{"ha":797,"x_min":-67,"x_max":756,"o":"m 328 24 q 263 -190 328 -121 q 54 -260 197 -260 q 1 -256 35 -260 q -67 -242 -33 -253 l -39 -74 q -5 -83 -18 -81 q 35 -85 8 -85 q 94 -56 78 -85 q 111 29 111 -26 l 111 963 l 756 963 l 756 781 l 328 781 l 328 579 l 708 579 l 708 397 l 328 397 l 328 24 z "},"Ɠ":{"ha":1013,"x_min":69,"x_max":1054,"o":"m 808 738 q 706 778 764 761 q 581 796 649 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 644 979 601 985 q 721 967 686 974 q 797 1066 750 1040 q 914 1092 844 1092 q 995 1082 958 1092 q 1054 1061 1032 1072 l 1004 896 q 970 907 988 903 q 932 911 953 911 q 882 898 908 911 q 840 838 856 885 l 808 738 z "},"Ɣ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 381 240 q 194 601 286 417 q 14 963 101 785 l 249 963 q 375 690 313 819 q 504 418 438 561 q 632 688 569 557 q 756 963 694 818 l 988 963 q 811 597 901 775 q 624 240 721 419 l 658 186 q 701 110 685 144 q 728 47 718 75 q 740 -6 738 18 q 743 -53 743 -31 q 678 -201 742 -146 q 501 -257 614 -257 q 325 -201 389 -257 q 260 -53 261 -146 q 263 -6 260 -31 q 276 47 267 18 q 301 110 285 75 q 346 186 318 144 l 381 240 m 501 -90 q 544 -74 529 -90 q 560 -33 560 -57 q 541 47 560 7 q 501 119 522 88 q 462 47 481 88 q 443 -33 443 7 q 458 -74 443 -57 q 501 -90 474 -90 z "},"ƕ":{"ha":1224,"x_min":97,"x_max":1133,"o":"m 821 -19 q 585 61 663 -19 q 507 315 507 142 l 507 388 q 503 472 507 438 q 488 529 499 507 q 456 561 476 551 q 400 571 435 571 q 348 566 372 571 q 304 556 324 561 l 304 0 l 97 0 l 97 1044 l 304 1078 l 304 728 q 358 741 325 735 q 421 747 390 747 q 567 723 510 747 q 656 654 624 699 q 701 549 689 610 q 714 413 714 488 l 714 339 q 735 201 714 243 q 821 158 757 158 q 906 201 885 158 q 926 339 926 243 l 926 731 l 1133 731 l 1133 315 q 1056 61 1133 142 q 821 -19 979 -19 z "},"Ɩ":{"ha":604,"x_min":111,"x_max":576,"o":"m 111 963 l 328 963 l 328 296 q 349 194 328 231 q 439 158 369 158 q 494 164 465 158 q 544 176 522 169 l 576 11 q 506 -10 546 0 q 408 -19 467 -19 q 262 2 319 -19 q 171 65 204 24 q 124 163 138 106 q 111 290 111 219 l 111 963 z "},"Ɨ":{"ha":503,"x_min":3,"x_max":500,"o":"m 3 575 l 143 575 l 143 963 l 360 963 l 360 575 l 500 575 l 500 422 l 360 422 l 360 0 l 143 0 l 143 422 l 3 422 l 3 575 z "},"Ƙ":{"ha":965,"x_min":111,"x_max":951,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 415 706 371 651 q 508 815 460 760 q 557 872 532 842 q 613 926 582 901 q 682 966 643 950 q 774 982 721 982 q 866 966 826 982 q 951 907 906 950 l 861 763 q 827 786 844 778 q 782 794 810 794 q 731 777 750 794 q 690 736 711 760 q 593 626 638 676 q 504 522 549 575 q 728 293 619 426 q 936 0 838 160 l 679 0 z "},"ƙ":{"ha":804,"x_min":97,"x_max":790,"o":"m 304 467 q 367 536 335 500 q 431 608 400 572 q 488 675 461 643 q 535 731 515 707 l 781 731 q 637 569 707 646 q 483 410 567 492 q 569 320 525 372 q 656 213 614 268 q 732 101 697 157 q 790 0 767 46 l 553 0 q 502 80 531 36 q 442 167 474 124 q 374 251 410 211 q 304 319 339 292 l 304 0 l 97 0 l 97 817 q 156 1014 97 950 q 357 1078 214 1078 q 406 1075 375 1078 q 468 1061 438 1072 l 443 913 q 413 919 428 917 q 381 922 399 922 q 304 824 304 922 l 304 467 z "},"ƚ":{"ha":478,"x_min":14,"x_max":457,"o":"m 14 622 l 125 622 l 125 1044 l 332 1078 l 332 622 l 457 622 l 457 490 l 332 490 l 332 282 q 336 232 332 254 q 352 194 340 210 q 386 169 364 179 q 446 157 408 160 l 417 -14 q 270 6 326 -12 q 181 56 214 24 q 137 135 149 89 q 125 240 125 182 l 125 490 l 14 490 l 14 622 z "},"ƛ":{"ha":760,"x_min":15,"x_max":756,"o":"m 629 885 l 472 828 q 560 611 517 726 q 640 384 603 496 q 707 172 678 272 q 756 0 736 71 l 535 0 q 503 120 521 54 q 467 254 486 186 q 429 385 449 322 q 392 499 410 449 q 350 385 372 449 q 305 254 328 322 q 262 120 282 186 q 228 0 242 54 l 15 0 q 156 397 78 214 q 303 718 233 581 l 285 761 l 126 704 l 83 819 l 228 871 q 190 901 211 892 q 138 910 169 910 q 101 907 119 910 q 61 896 83 904 l 26 1054 q 89 1070 53 1063 q 174 1078 125 1078 q 315 1047 257 1078 q 418 939 372 1015 l 586 1000 l 629 885 z "},"Ɯ":{"ha":1364,"x_min":97,"x_max":1253,"o":"m 906 -19 q 685 46 771 -19 q 583 3 646 25 q 438 -19 521 -19 q 265 10 332 -19 q 161 92 199 39 q 110 216 124 144 q 97 374 97 288 l 97 963 l 314 963 l 314 406 q 342 224 314 281 q 453 167 369 167 q 526 176 492 167 q 585 199 561 186 q 571 283 575 238 q 567 374 567 328 l 567 963 l 783 963 l 783 406 q 810 224 783 281 q 921 167 838 167 q 981 169 949 167 q 1036 174 1013 171 l 1036 963 l 1253 963 l 1253 25 q 1181 9 1221 17 q 1094 -5 1140 1 q 1001 -15 1049 -11 q 906 -19 953 -19 z "},"Ɲ":{"ha":1050,"x_min":-67,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 24 q 261 -190 325 -121 q 54 -260 197 -260 q 1 -256 35 -260 q -67 -242 -33 -253 l -39 -74 q -5 -83 -18 -81 q 35 -85 8 -85 q 94 -56 78 -85 q 111 29 111 -26 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 z "},"ƞ":{"ha":853,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 z "},"Ɵ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 549 171 q 717 235 653 171 q 799 408 782 299 l 297 408 q 379 235 314 299 q 549 171 444 171 m 549 794 q 381 731 444 794 q 299 561 317 668 l 797 561 q 716 731 779 668 q 549 794 653 794 z "},"Ơ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 810 915 696 985 q 827 977 822 944 q 832 1044 832 1010 q 831 1078 832 1061 q 829 1113 831 1094 l 1021 1113 q 1025 1075 1024 1093 q 1026 1038 1026 1057 q 1005 915 1026 972 q 931 807 983 857 q 1002 664 976 744 q 1028 482 1028 583 m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 z "},"ơ":{"ha":843,"x_min":63,"x_max":835,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 628 690 540 750 q 649 735 639 710 q 658 801 658 761 q 658 835 658 817 q 656 878 658 854 l 829 878 q 834 835 833 856 q 835 794 835 814 q 806 674 835 725 q 731 575 776 624 q 781 367 781 488 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 z "},"Ƣ":{"ha":1492,"x_min":69,"x_max":1381,"o":"m 992 482 q 955 265 992 358 q 856 108 918 171 q 709 13 793 44 q 531 -19 625 -19 q 356 13 439 -19 q 209 108 272 44 q 108 265 146 171 q 69 482 69 358 q 108 699 69 606 q 212 857 147 793 q 360 953 276 921 q 531 985 443 985 q 676 963 606 985 q 806 896 747 940 q 922 963 861 940 q 1056 985 982 985 q 1224 956 1160 985 q 1322 876 1288 928 q 1369 752 1357 824 q 1381 594 1381 681 l 1381 0 l 1164 0 l 1164 590 q 1156 692 1164 653 q 1132 755 1149 732 q 1091 787 1115 778 q 1033 796 1067 796 q 925 760 978 796 q 974 634 957 703 q 992 482 992 565 m 293 482 q 310 354 293 411 q 359 256 328 297 q 434 193 390 215 q 531 171 478 171 q 627 193 583 171 q 702 256 671 215 q 751 354 733 297 q 768 482 768 411 q 751 610 768 553 q 702 709 733 668 q 627 772 671 750 q 531 794 583 794 q 434 772 478 794 q 359 708 390 749 q 310 609 328 667 q 293 482 293 551 z "},"ƣ":{"ha":1207,"x_min":63,"x_max":1117,"o":"m 761 367 q 736 209 761 281 q 665 87 711 138 q 556 8 619 36 q 413 -19 492 -19 q 271 8 335 -19 q 160 87 207 36 q 88 209 114 138 q 63 367 63 281 q 89 524 63 453 q 163 644 115 594 q 274 722 210 694 q 413 750 338 750 q 621 683 533 750 q 717 731 664 715 q 829 746 771 746 q 977 719 921 746 q 1065 644 1033 692 q 1106 531 1096 596 q 1117 393 1117 467 l 1117 -257 l 910 -257 l 910 382 q 892 523 910 476 q 815 569 875 569 q 726 543 765 569 q 761 367 761 463 m 550 367 q 514 517 550 463 q 413 572 478 572 q 306 517 338 572 q 274 367 274 463 q 310 215 274 271 q 413 158 347 158 q 514 215 478 158 q 550 367 550 271 z "},"Ƥ":{"ha":1088,"x_min":21,"x_max":1039,"o":"m 304 785 q 221 757 247 779 q 194 703 194 735 q 195 680 194 696 q 201 642 196 664 l 38 619 q 26 669 32 639 q 21 726 21 700 q 49 831 21 789 q 123 901 76 874 q 230 944 169 929 q 353 965 290 958 q 479 973 417 972 q 593 974 542 974 q 924 898 808 974 q 1039 650 1039 822 q 922 399 1039 476 q 589 322 806 322 l 521 322 l 521 0 l 304 0 l 304 785 m 607 789 q 560 788 583 789 q 521 785 538 786 l 521 507 l 589 507 q 758 538 701 507 q 815 651 815 568 q 801 718 815 692 q 759 760 786 744 q 693 783 732 776 q 607 789 654 789 z "},"ƥ":{"ha":839,"x_min":97,"x_max":776,"o":"m 97 817 q 156 1014 97 950 q 357 1078 214 1078 q 406 1075 375 1078 q 468 1061 438 1072 l 443 913 q 413 919 428 917 q 381 922 399 922 q 304 824 304 922 l 304 733 q 357 744 328 740 q 408 747 386 747 q 561 720 493 747 q 677 644 629 693 q 751 524 725 594 q 776 365 776 453 q 756 211 776 281 q 694 92 735 142 q 594 14 654 42 q 457 -14 535 -14 q 376 -6 414 -14 q 304 18 339 3 l 304 -257 l 97 -257 l 97 817 m 565 360 q 523 513 565 456 q 401 571 481 571 q 347 567 374 571 q 304 558 319 564 l 304 190 q 355 169 324 178 q 418 161 386 161 q 565 360 565 161 z "},"Ʀ":{"ha":926,"x_min":111,"x_max":972,"o":"m 411 972 q 729 892 618 972 q 840 657 840 813 q 794 492 840 556 q 660 393 747 429 q 732 290 689 357 q 820 144 775 222 q 906 -12 865 67 q 972 -150 947 -90 l 729 -150 q 664 -19 703 -92 q 583 125 625 54 q 502 257 542 196 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 1078 l 326 1078 l 326 969 q 370 972 344 971 q 411 972 396 972 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 z "},"Ƨ":{"ha":808,"x_min":56,"x_max":757,"o":"m 435 165 q 590 184 526 165 q 696 226 653 203 l 757 54 q 709 31 738 43 q 641 7 681 18 q 550 -12 601 -4 q 435 -19 499 -19 q 150 55 244 -19 q 56 264 56 129 q 74 382 56 333 q 128 467 92 431 q 221 530 165 503 q 351 585 276 557 q 417 609 386 597 q 470 635 447 621 q 506 668 493 650 q 518 713 518 686 q 484 778 518 757 q 372 800 450 800 q 253 784 303 800 q 164 747 204 768 l 101 918 q 218 964 147 943 q 386 985 289 985 q 533 965 467 985 q 644 907 599 944 q 715 816 690 869 q 740 696 740 763 q 717 583 740 629 q 656 503 693 536 q 571 449 618 471 q 476 411 524 428 q 324 344 368 375 q 279 265 279 313 q 286 225 279 243 q 311 194 293 207 q 359 173 329 181 q 435 165 389 165 z "},"ƨ":{"ha":674,"x_min":56,"x_max":618,"o":"m 365 149 q 475 160 419 149 q 583 193 531 172 l 618 25 q 528 -3 593 14 q 367 -19 464 -19 q 137 36 218 -19 q 56 200 56 92 q 66 281 56 246 q 102 344 76 315 q 172 397 128 372 q 285 446 217 421 q 340 469 318 458 q 374 488 361 479 q 390 507 386 497 q 394 529 394 517 q 297 583 394 583 q 202 574 244 583 q 124 551 160 564 l 88 713 q 185 738 124 726 q 313 750 246 750 q 522 690 446 750 q 599 528 599 631 q 583 438 599 475 q 540 373 568 400 q 473 326 513 346 q 385 289 433 307 q 292 247 322 265 q 261 203 261 228 q 285 160 261 171 q 365 149 308 149 z "},"Ʃ":{"ha":826,"x_min":43,"x_max":771,"o":"m 343 486 q 274 575 311 529 q 199 665 236 621 q 126 749 161 708 q 64 822 92 790 l 64 963 l 771 963 l 771 781 l 351 781 q 472 633 410 710 q 588 486 535 557 q 530 422 567 461 q 453 338 493 382 q 375 253 413 294 q 314 182 338 211 l 771 182 l 771 0 l 43 0 l 43 150 q 189 316 110 229 q 343 486 268 403 z "},"ƪ":{"ha":579,"x_min":-56,"x_max":596,"o":"m 567 -260 q 420 -240 476 -258 q 331 -190 364 -222 q 287 -110 299 -157 q 275 -6 275 -64 l 275 640 q 232 622 260 632 q 164 613 204 613 q 85 626 124 613 q 15 669 46 640 q -36 742 -17 699 q -56 843 -56 785 q -34 948 -56 903 q 24 1024 -12 993 q 107 1069 60 1054 q 206 1083 154 1083 q 335 1060 282 1083 q 420 994 388 1038 q 467 889 453 951 q 482 746 482 826 l 482 36 q 486 -14 482 8 q 502 -51 490 -36 q 536 -76 514 -67 q 596 -89 558 -86 l 567 -260 m 275 831 q 257 900 275 871 q 197 929 239 929 q 142 904 161 929 q 122 851 122 879 q 142 794 122 818 q 197 769 163 769 q 239 778 218 769 q 275 801 260 788 l 275 831 z "},"ƫ":{"ha":617,"x_min":90,"x_max":579,"o":"m 406 -15 q 390 -17 399 -17 q 379 -17 382 -17 q 239 6 294 -17 q 150 70 183 29 q 103 169 117 111 q 90 299 90 228 l 90 913 l 297 946 l 297 731 l 546 731 l 546 558 l 297 558 l 297 301 q 320 197 297 236 q 413 158 343 158 q 488 163 446 158 q 561 178 529 167 q 569 123 565 149 q 574 73 572 97 q 578 24 576 49 q 579 -31 579 -1 q 517 -204 579 -149 q 344 -260 456 -260 q 290 -256 326 -260 q 222 -242 254 -253 l 249 -94 q 285 -103 268 -101 q 326 -106 301 -106 q 385 -90 363 -106 q 407 -33 407 -74 q 407 -26 407 -29 q 406 -15 407 -22 z "},"Ƭ":{"ha":908,"x_min":21,"x_max":881,"o":"m 299 778 q 219 753 242 778 q 197 696 197 728 q 198 673 197 689 q 204 635 199 657 l 38 613 q 26 663 32 632 q 21 719 21 693 q 65 863 21 813 q 178 935 110 913 q 330 960 247 957 q 490 963 413 963 l 881 963 l 881 778 l 590 778 l 590 0 l 374 0 l 374 778 l 299 778 z "},"ƭ":{"ha":617,"x_min":90,"x_max":583,"o":"m 554 731 l 554 558 l 297 558 l 297 301 q 322 197 297 236 q 415 158 346 158 q 485 165 449 158 q 551 183 522 172 l 581 22 q 496 -5 543 7 q 382 -17 449 -17 q 241 6 297 -17 q 151 70 185 29 q 104 169 118 111 q 90 299 90 228 l 90 769 q 169 994 90 911 q 404 1078 247 1078 q 510 1067 463 1078 q 583 1044 557 1056 l 543 879 q 484 897 515 892 q 425 903 453 903 q 363 892 388 903 q 323 864 338 882 q 303 821 308 846 q 297 767 297 796 l 297 731 l 554 731 z "},"Ʈ":{"ha":853,"x_min":28,"x_max":825,"o":"m 535 29 q 551 -56 535 -26 q 611 -85 568 -85 q 651 -83 638 -85 q 685 -74 664 -81 l 713 -242 q 645 -256 679 -253 q 592 -260 611 -260 q 383 -190 449 -260 q 318 24 318 -121 l 318 778 l 28 778 l 28 963 l 825 963 l 825 778 l 535 778 l 535 29 z "},"Ư":{"ha":1038,"x_min":97,"x_max":1051,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 747 963 q 838 989 813 963 q 863 1050 863 1015 q 862 1081 863 1067 q 860 1113 861 1094 l 1046 1113 q 1050 1075 1049 1093 q 1051 1038 1051 1057 q 1044 974 1051 1006 q 1019 913 1038 942 q 968 863 1000 885 q 885 831 936 842 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 z "},"ư":{"ha":869,"x_min":90,"x_max":883,"o":"m 514 731 l 629 731 q 694 756 674 733 q 714 817 714 779 q 714 843 714 832 q 711 878 714 854 l 878 878 q 883 835 882 856 q 883 794 883 814 q 874 736 883 765 q 844 681 864 707 q 794 636 825 656 q 721 608 764 617 l 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 z "},"Ʊ":{"ha":1074,"x_min":49,"x_max":1025,"o":"m 538 -19 q 352 10 438 -19 q 204 99 267 40 q 106 242 142 157 q 71 438 71 326 q 107 624 71 538 q 214 783 143 710 l 49 783 l 49 963 l 469 963 l 469 801 q 401 734 433 769 q 346 656 369 699 q 308 560 322 613 q 294 444 294 508 q 360 239 294 310 q 538 168 425 168 q 715 239 650 168 q 781 444 781 310 q 767 560 781 508 q 728 656 753 613 q 672 734 704 699 q 604 801 640 769 l 604 963 l 1025 963 l 1025 783 l 860 783 q 1004 438 1004 635 q 969 242 1004 326 q 871 99 933 157 q 723 10 808 40 q 538 -19 638 -19 z "},"Ʋ":{"ha":1006,"x_min":97,"x_max":936,"o":"m 575 974 q 851 850 765 974 q 936 478 936 726 q 905 261 936 354 q 815 106 874 168 q 674 12 757 43 q 490 -19 592 -19 q 318 9 392 -19 q 195 90 244 38 q 122 215 146 142 q 97 378 97 288 l 97 963 l 314 963 l 314 396 q 328 288 314 332 q 367 218 343 244 q 424 180 392 192 q 493 168 457 168 q 595 190 553 168 q 663 253 638 213 q 701 350 689 293 q 713 478 713 407 q 706 610 713 553 q 683 708 700 668 q 633 768 665 747 q 547 789 600 789 q 486 781 515 789 l 467 961 q 521 970 489 967 q 575 974 553 974 z "},"Ƴ":{"ha":993,"x_min":7,"x_max":1007,"o":"m 579 794 q 611 856 593 824 q 656 915 629 888 q 718 959 682 942 q 807 976 754 976 q 911 960 863 976 q 1007 897 960 943 l 917 756 q 885 780 901 771 q 843 789 868 789 q 799 776 815 789 q 768 736 783 764 q 667 553 715 646 q 568 368 619 460 l 568 0 l 351 0 l 351 365 q 171 660 256 513 q 7 963 86 807 l 258 963 q 354 765 303 863 q 464 567 406 667 l 579 794 z "},"ƴ":{"ha":843,"x_min":7,"x_max":836,"o":"m 389 249 q 438 417 413 329 q 488 579 464 504 q 557 702 513 663 q 693 742 601 742 q 762 735 724 742 q 836 714 800 729 l 793 563 q 758 574 772 572 q 732 576 743 576 q 690 564 707 576 q 661 519 674 551 q 569 251 611 386 q 478 -17 526 117 q 358 -198 432 -139 q 164 -257 283 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 148 342 219 168 q 14 731 76 517 l 233 731 q 267 613 247 676 q 307 485 286 550 q 349 360 328 421 q 389 249 369 299 z "},"Ƶ":{"ha":847,"x_min":49,"x_max":806,"o":"m 469 415 q 387 297 426 356 q 315 182 347 238 l 806 182 l 806 0 l 49 0 l 49 129 q 130 265 83 192 q 229 415 176 338 l 86 415 l 86 568 l 338 568 q 423 682 381 628 q 503 781 465 736 l 71 781 l 71 963 l 790 963 l 790 813 q 697 707 750 771 q 583 568 643 643 l 774 568 l 774 415 l 469 415 z "},"ƶ":{"ha":694,"x_min":49,"x_max":653,"o":"m 646 599 q 583 528 622 574 q 497 431 543 483 l 618 431 l 618 308 l 393 308 q 337 235 364 272 q 286 165 310 199 l 653 165 l 653 0 l 49 0 l 49 115 q 107 206 72 157 q 182 308 142 256 l 93 308 l 93 431 l 281 431 q 339 502 311 467 q 390 565 367 538 l 65 565 l 65 731 l 646 731 l 646 599 z "},"Ʒ":{"ha":853,"x_min":28,"x_max":776,"o":"m 247 544 q 303 602 274 571 q 364 665 333 633 q 422 727 394 697 q 471 782 450 757 l 78 782 l 78 963 l 751 963 l 751 833 q 706 779 735 813 q 642 708 676 746 q 571 632 607 671 q 503 560 535 593 q 714 465 651 533 q 776 285 776 397 q 747 148 776 206 q 662 53 717 90 q 530 -3 607 15 q 360 -21 453 -21 q 250 -12 301 -21 q 156 10 199 -3 q 80 37 113 22 q 28 63 47 51 l 92 235 q 208 188 138 211 q 358 164 278 164 q 501 192 450 164 q 553 288 553 221 q 535 354 553 328 q 487 397 518 381 q 412 419 456 413 q 315 425 368 425 l 247 425 l 247 544 z "},"Ƹ":{"ha":853,"x_min":76,"x_max":825,"o":"m 606 425 l 538 425 q 441 419 485 425 q 366 397 397 413 q 317 354 335 381 q 300 288 300 328 q 351 192 300 221 q 494 164 403 164 q 645 185 575 164 q 761 231 715 207 l 825 58 q 773 33 806 47 q 697 8 740 19 q 603 -12 654 -4 q 493 -21 551 -21 q 322 -3 399 -21 q 191 53 246 15 q 106 148 136 90 q 76 285 76 206 q 139 465 76 397 q 350 560 201 533 q 282 632 318 593 q 211 708 246 671 q 147 779 176 746 q 101 833 118 813 l 101 963 l 775 963 l 775 782 l 382 782 q 431 727 403 757 q 489 665 458 697 q 549 602 519 633 q 606 544 579 571 l 606 425 z "},"ƹ":{"ha":715,"x_min":56,"x_max":708,"o":"m 543 199 l 468 199 q 317 164 369 199 q 264 57 264 129 q 308 -43 264 -7 q 438 -79 351 -79 q 494 -76 464 -79 q 555 -68 525 -74 q 613 -54 585 -62 q 663 -36 640 -46 l 708 -201 q 652 -223 685 -212 q 581 -241 619 -233 q 503 -253 543 -249 q 424 -257 463 -257 q 153 -181 251 -257 q 56 49 56 -104 q 74 153 56 107 q 125 235 93 200 q 201 295 157 271 q 294 333 244 319 q 176 476 233 407 q 85 589 119 544 l 85 731 l 672 731 l 672 558 l 347 558 q 391 502 367 533 q 442 439 415 471 q 494 376 468 407 q 543 319 519 344 l 543 199 z "},"ƺ":{"ha":719,"x_min":14,"x_max":643,"o":"m 14 -142 q 32 -58 14 -92 q 83 0 50 -24 q 162 40 115 24 q 265 69 208 56 q 335 88 304 79 q 388 107 365 96 q 422 135 410 118 q 433 176 433 151 q 426 216 433 199 q 392 246 418 233 q 315 265 365 258 q 181 272 265 272 l 181 393 q 226 436 201 414 q 274 481 250 458 q 318 523 297 503 q 356 558 339 543 l 32 558 l 32 731 l 619 731 l 619 589 q 576 547 600 569 q 524 498 551 524 q 470 447 497 472 q 418 399 443 421 q 514 369 472 386 q 585 326 556 353 q 628 263 614 300 q 643 174 643 226 q 620 65 643 108 q 553 -8 597 22 q 446 -58 510 -37 q 300 -96 382 -78 q 223 -128 240 -110 q 206 -169 206 -146 q 211 -202 206 -183 q 224 -235 217 -221 l 56 -268 q 28 -212 42 -243 q 14 -142 14 -182 z "},"ƻ":{"ha":785,"x_min":28,"x_max":722,"o":"m 693 710 q 668 614 693 657 q 603 525 643 571 l 713 525 l 713 372 l 468 372 q 410 317 440 346 q 353 260 379 288 q 308 210 326 233 q 285 174 289 188 l 722 174 l 722 0 l 56 0 q 53 38 53 15 q 53 71 53 61 q 65 163 53 122 q 99 238 78 203 q 150 306 121 274 q 213 372 179 339 l 86 372 l 86 525 l 360 525 q 403 569 382 547 q 442 611 425 590 q 470 653 460 632 q 481 696 481 675 q 444 782 481 757 q 350 807 407 807 q 278 797 311 807 q 217 772 244 786 q 167 740 189 757 q 131 710 146 724 l 28 854 q 174 948 89 911 q 358 985 258 985 q 509 965 446 985 q 613 910 572 946 q 674 824 654 875 q 693 710 693 774 z "},"Ƽ":{"ha":772,"x_min":14,"x_max":731,"o":"m 731 290 q 708 167 731 224 q 638 68 686 110 q 516 3 590 26 q 338 -19 442 -19 q 252 -13 296 -19 q 170 2 208 -7 q 101 21 132 11 q 57 38 71 31 l 100 219 q 198 183 138 203 q 333 164 258 164 q 418 174 383 164 q 474 200 453 183 q 503 238 494 217 q 513 283 513 260 q 493 353 513 322 q 428 403 474 383 q 305 434 382 424 q 111 444 228 444 q 131 622 122 543 q 144 785 139 701 l 14 785 l 14 963 l 693 963 l 693 785 l 346 785 q 340 694 343 740 q 331 603 336 647 q 731 290 731 574 z "},"ƽ":{"ha":711,"x_min":14,"x_max":649,"o":"m 649 224 q 563 43 649 106 q 310 -19 476 -19 q 145 -5 215 -19 q 49 21 75 10 l 83 193 q 118 182 96 189 q 169 169 140 175 q 233 160 199 164 q 306 156 268 156 q 443 226 443 156 q 433 268 443 251 q 397 295 424 285 q 324 310 371 306 q 204 314 278 314 l 92 314 q 106 443 99 382 q 117 564 113 504 l 14 564 l 14 731 l 621 731 l 621 564 l 301 564 q 297 513 300 540 q 292 461 294 485 l 336 461 q 566 403 483 461 q 649 224 649 344 z "},"ƾ":{"ha":679,"x_min":54,"x_max":617,"o":"m 617 200 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 q 388 160 364 149 q 411 203 411 171 q 385 247 411 229 q 293 289 360 264 q 209 324 247 306 q 143 370 171 343 q 100 439 115 397 q 85 543 85 481 l 85 913 l 292 946 l 292 731 l 540 731 l 540 561 l 292 561 l 292 542 q 313 484 292 506 q 392 442 335 463 q 486 403 444 422 q 557 357 528 383 q 601 293 586 331 q 617 200 617 256 z "},"ƿ":{"ha":817,"x_min":97,"x_max":754,"o":"m 543 422 q 503 530 543 490 q 394 569 464 569 q 343 566 365 569 q 304 558 321 563 l 304 122 q 409 175 364 147 q 484 238 454 203 q 528 318 514 274 q 543 422 543 363 m 754 419 q 719 240 754 317 q 622 108 683 164 q 478 10 560 51 q 304 -64 396 -31 l 304 -257 l 97 -257 l 97 689 q 226 728 147 708 q 396 747 304 747 q 545 724 479 747 q 658 659 611 701 q 729 556 704 617 q 754 419 754 496 z "},"ǀ":{"ha":447,"x_min":125,"x_max":322,"o":"m 125 1088 l 322 1088 l 322 -257 l 125 -257 l 125 1088 z "},"ǁ":{"ha":779,"x_min":125,"x_max":654,"o":"m 125 1088 l 322 1088 l 322 -257 l 125 -257 l 125 1088 m 457 1088 l 654 1088 l 654 -257 l 457 -257 l 457 1088 z "},"ǂ":{"ha":792,"x_min":42,"x_max":750,"o":"m 42 635 l 297 635 l 297 1088 l 496 1088 l 496 635 l 750 635 l 750 485 l 496 485 l 496 360 l 750 360 l 750 210 l 496 210 l 496 -257 l 297 -257 l 297 210 l 42 210 l 42 360 l 297 360 l 297 485 l 42 485 l 42 635 z "},"ǃ":{"ha":397,"x_min":69,"x_max":328,"o":"m 310 714 q 301 504 310 601 q 279 307 293 407 l 121 307 q 98 504 107 407 q 89 714 89 601 l 89 963 l 310 963 l 310 714 m 328 110 q 288 15 328 49 q 199 -18 249 -18 q 109 15 149 -18 q 69 110 69 49 q 109 204 69 171 q 199 238 149 238 q 288 204 249 238 q 328 110 328 171 z "},"Ǆ":{"ha":1806,"x_min":111,"x_max":1764,"o":"m 328 176 q 363 174 343 175 q 411 174 383 174 q 652 256 574 174 q 731 482 731 338 q 656 711 731 633 q 418 789 581 789 q 372 788 396 789 q 328 785 349 788 l 328 176 m 954 482 q 915 264 954 357 q 805 110 876 171 q 631 18 733 49 q 400 -12 528 -12 q 264 -8 342 -12 q 111 13 186 -3 l 111 950 q 267 969 186 964 q 407 974 349 974 q 631 946 531 974 q 804 858 732 918 q 915 706 876 799 q 954 482 954 613 m 1175 1228 l 1251 1319 l 1390 1213 l 1529 1319 l 1608 1228 l 1390 1038 l 1175 1228 m 1749 813 q 1643 694 1704 767 q 1517 535 1582 621 q 1388 357 1451 449 q 1274 182 1324 265 l 1764 182 l 1764 0 l 1007 0 l 1007 129 q 1102 287 1046 200 q 1219 462 1158 374 q 1344 633 1281 550 q 1461 781 1407 715 l 1029 781 l 1029 963 l 1749 963 l 1749 813 z "},"ǅ":{"ha":1688,"x_min":111,"x_max":1646,"o":"m 328 176 q 363 174 343 175 q 411 174 383 174 q 652 256 574 174 q 731 482 731 338 q 656 711 731 633 q 418 789 581 789 q 372 788 396 789 q 328 785 349 788 l 328 176 m 954 482 q 915 264 954 357 q 805 110 876 171 q 631 18 733 49 q 400 -12 528 -12 q 264 -8 342 -12 q 111 13 186 -3 l 111 950 q 267 969 186 964 q 407 974 349 974 q 631 946 531 974 q 804 858 732 918 q 915 706 876 799 q 954 482 954 613 m 1135 1004 l 1211 1096 l 1350 989 l 1489 1096 l 1568 1004 l 1350 814 l 1135 1004 m 1639 592 q 1572 517 1614 564 q 1481 413 1529 469 q 1383 293 1432 356 q 1293 172 1333 231 l 1646 172 l 1646 0 l 1042 0 l 1042 122 q 1112 230 1071 172 q 1198 346 1153 288 q 1288 459 1243 404 q 1369 558 1332 514 l 1058 558 l 1058 731 l 1639 731 l 1639 592 z "},"ǆ":{"ha":1521,"x_min":63,"x_max":1479,"o":"m 274 371 q 317 217 274 275 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 542 q 484 563 515 554 q 421 571 453 571 q 274 371 274 571 m 742 24 q 678 8 714 15 q 602 -6 642 0 q 522 -15 563 -11 q 443 -18 481 -18 q 282 8 353 -18 q 163 84 211 35 q 88 203 114 133 q 63 361 63 274 q 85 522 63 450 q 149 643 107 593 q 251 719 190 693 q 389 746 311 746 q 466 738 432 746 q 535 714 500 729 l 535 1044 l 742 1078 l 742 24 m 957 1004 l 1033 1096 l 1172 989 l 1311 1096 l 1390 1004 l 1172 814 l 957 1004 m 1472 592 q 1405 517 1447 564 q 1314 413 1363 469 q 1216 293 1265 356 q 1126 172 1167 231 l 1479 172 l 1479 0 l 875 0 l 875 122 q 945 230 904 172 q 1031 346 986 288 q 1121 459 1076 404 q 1203 558 1165 514 l 892 558 l 892 731 l 1472 731 l 1472 592 z "},"Ǉ":{"ha":1514,"x_min":111,"x_max":1417,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 m 1417 324 q 1401 190 1417 253 q 1345 81 1385 128 q 1238 8 1306 35 q 1068 -19 1171 -19 q 906 3 974 -19 q 793 57 838 26 l 865 225 q 951 183 906 201 q 1051 165 997 165 q 1165 204 1131 165 q 1200 335 1200 243 l 1200 963 l 1417 963 l 1417 324 z "},"ǈ":{"ha":1178,"x_min":111,"x_max":1099,"o":"m 754 186 l 754 0 l 111 0 l 111 963 l 328 963 l 328 186 l 754 186 m 804 -257 q 747 -253 785 -257 q 675 -237 708 -249 l 703 -69 q 741 -79 724 -76 q 785 -82 758 -82 q 853 -53 833 -82 q 872 32 872 -24 l 872 731 l 1079 731 l 1079 26 q 1008 -187 1079 -118 q 804 -257 938 -257 m 1099 942 q 1062 852 1099 885 q 975 819 1025 819 q 888 852 925 819 q 851 942 851 885 q 888 1031 851 999 q 975 1064 925 1064 q 1062 1031 1025 1064 q 1099 942 1099 999 z "},"ǉ":{"ha":838,"x_min":97,"x_max":758,"o":"m 389 -14 q 242 6 299 -12 q 153 56 186 24 q 109 135 121 89 q 97 240 97 182 l 97 1044 l 304 1078 l 304 282 q 308 232 304 254 q 324 194 313 210 q 358 169 336 179 q 418 157 381 160 l 389 -14 m 464 -257 q 406 -253 444 -257 q 335 -237 368 -249 l 363 -69 q 401 -79 383 -76 q 444 -82 418 -82 q 513 -53 493 -82 q 532 32 532 -24 l 532 731 l 739 731 l 739 26 q 668 -187 739 -118 q 464 -257 597 -257 m 758 942 q 722 852 758 885 q 635 819 685 819 q 548 852 585 819 q 511 942 511 885 q 548 1031 511 999 q 635 1064 585 1064 q 722 1031 685 1064 q 758 942 758 999 z "},"Ǌ":{"ha":1779,"x_min":111,"x_max":1682,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 1682 324 q 1666 190 1682 253 q 1610 81 1650 128 q 1503 8 1571 35 q 1333 -19 1436 -19 q 1171 3 1239 -19 q 1058 57 1103 26 l 1131 225 q 1217 183 1171 201 q 1317 165 1263 165 q 1431 204 1396 165 q 1465 335 1465 243 l 1465 963 l 1682 963 l 1682 324 z "},"ǋ":{"ha":1449,"x_min":111,"x_max":1368,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 1074 -257 q 1016 -253 1054 -257 q 944 -237 978 -249 l 972 -69 q 1010 -79 993 -76 q 1054 -82 1028 -82 q 1122 -53 1103 -82 q 1142 32 1142 -24 l 1142 731 l 1349 731 l 1349 26 q 1278 -187 1349 -118 q 1074 -257 1207 -257 m 1368 942 q 1331 852 1368 885 q 1244 819 1294 819 q 1158 852 1194 819 q 1121 942 1121 885 q 1158 1031 1121 999 q 1244 1064 1194 1064 q 1331 1031 1294 1064 q 1368 942 1368 999 z "},"ǌ":{"ha":1219,"x_min":97,"x_max":1140,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 846 -257 q 788 -253 826 -257 q 717 -237 750 -249 l 744 -69 q 783 -79 765 -76 q 826 -82 800 -82 q 894 -53 875 -82 q 914 32 914 -24 l 914 731 l 1121 731 l 1121 26 q 1050 -187 1121 -118 q 846 -257 979 -257 m 1140 942 q 1103 852 1140 885 q 1017 819 1067 819 q 930 852 967 819 q 893 942 893 885 q 930 1031 893 999 q 1017 1064 967 1064 q 1103 1031 1067 1064 q 1140 942 1140 999 z "},"Ǎ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 279 1228 l 356 1319 l 494 1213 l 633 1319 l 713 1228 l 494 1038 l 279 1228 z "},"ǎ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 176 1004 l 253 1096 l 392 989 l 531 1096 l 610 1004 l 392 814 l 176 1004 z "},"Ǐ":{"ha":439,"x_min":6,"x_max":439,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 6 1228 l 82 1319 l 221 1213 l 360 1319 l 439 1228 l 221 1038 l 6 1228 z "},"ǐ":{"ha":401,"x_min":-14,"x_max":419,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m -14 1004 l 63 1096 l 201 989 l 340 1096 l 419 1004 l 201 814 l -14 1004 z "},"Ǒ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 333 1228 l 410 1319 l 549 1213 l 688 1319 l 767 1228 l 549 1038 l 333 1228 z "},"ǒ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 204 1004 l 281 1096 l 419 989 l 558 1096 l 638 1004 l 419 814 l 204 1004 z "},"Ǔ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 275 1228 l 351 1319 l 490 1213 l 629 1319 l 708 1228 l 490 1038 l 275 1228 z "},"ǔ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 189 1004 l 265 1096 l 404 989 l 543 1096 l 622 1004 l 404 814 l 189 1004 z "},"Ǖ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 449 1099 q 422 1035 449 1058 q 360 1011 396 1011 q 297 1035 322 1011 q 271 1099 271 1058 q 297 1163 271 1139 q 360 1186 322 1186 q 422 1163 396 1186 q 449 1099 449 1139 m 710 1099 q 683 1035 710 1058 q 621 1011 657 1011 q 558 1035 585 1011 q 532 1099 532 1058 q 558 1163 532 1139 q 621 1186 585 1186 q 683 1163 657 1186 q 710 1099 710 1139 m 308 1336 l 669 1336 l 669 1225 l 308 1225 l 308 1336 z "},"ǖ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 361 901 q 335 838 361 861 q 272 814 308 814 q 209 838 235 814 q 183 901 183 861 q 209 965 183 942 q 272 989 235 989 q 335 965 308 989 q 361 901 361 942 m 622 901 q 596 838 622 861 q 533 814 569 814 q 471 838 497 814 q 444 901 444 861 q 471 965 444 942 q 533 989 497 989 q 596 965 569 989 q 622 901 622 942 m 221 1139 l 582 1139 l 582 1028 l 221 1028 l 221 1139 z "},"Ǘ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 390 1104 q 364 1040 390 1064 q 301 1017 338 1017 q 238 1040 264 1017 q 213 1104 213 1064 q 238 1168 213 1144 q 301 1192 264 1192 q 364 1168 338 1192 q 390 1104 390 1144 m 751 1104 q 725 1040 751 1064 q 663 1017 699 1017 q 600 1040 626 1017 q 574 1104 574 1064 q 600 1168 574 1144 q 663 1192 626 1192 q 725 1168 699 1192 q 751 1104 751 1144 m 640 1236 l 458 1100 l 389 1182 l 558 1336 l 640 1236 z "},"ǘ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 596 1133 l 408 921 l 321 986 l 486 1222 l 596 1133 m 310 907 q 283 843 310 867 q 221 819 257 819 q 158 843 183 819 q 132 907 132 867 q 158 971 132 947 q 221 994 183 994 q 283 971 257 994 q 310 907 310 947 m 678 907 q 651 843 678 867 q 589 819 625 819 q 526 843 553 819 q 500 907 500 867 q 526 971 500 947 q 589 994 553 994 q 651 971 625 994 q 678 907 678 947 z "},"Ǚ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 396 1104 q 369 1040 396 1064 q 307 1017 343 1017 q 244 1040 269 1017 q 218 1104 218 1064 q 244 1168 218 1144 q 307 1192 269 1192 q 369 1168 343 1192 q 396 1104 396 1144 m 757 1104 q 731 1040 757 1064 q 668 1017 704 1017 q 606 1040 632 1017 q 579 1104 579 1064 q 606 1168 579 1144 q 668 1192 632 1192 q 731 1168 704 1192 q 757 1104 757 1144 m 319 1264 l 378 1336 l 488 1251 l 596 1336 l 657 1264 l 488 1114 l 319 1264 z "},"ǚ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 311 907 q 285 843 311 867 q 222 819 258 819 q 159 843 185 819 q 133 907 133 867 q 159 971 133 947 q 222 994 185 994 q 285 971 258 994 q 311 907 311 947 m 679 907 q 653 843 679 867 q 590 819 626 819 q 528 843 554 819 q 501 907 501 867 q 528 971 501 947 q 590 994 554 994 q 653 971 626 994 q 679 907 679 947 m 203 1114 l 271 1194 l 404 1093 l 539 1194 l 608 1114 l 404 936 l 203 1114 z "},"Ǜ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 579 1104 q 606 1168 579 1144 q 668 1192 632 1192 q 731 1168 706 1192 q 757 1104 757 1144 q 731 1040 757 1064 q 668 1017 706 1017 q 606 1040 632 1017 q 579 1104 579 1064 m 218 1104 q 244 1168 218 1144 q 307 1192 271 1192 q 369 1168 343 1192 q 396 1104 396 1144 q 369 1040 396 1064 q 307 1017 343 1017 q 244 1040 271 1017 q 218 1104 218 1064 m 411 1336 l 581 1182 l 511 1100 l 329 1236 l 411 1336 z "},"ǜ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 324 1222 l 489 986 l 401 921 l 214 1133 l 324 1222 m 500 907 q 526 971 500 947 q 589 994 553 994 q 652 971 626 994 q 678 907 678 947 q 652 843 678 867 q 589 819 626 819 q 526 843 553 819 q 500 907 500 867 m 132 907 q 158 971 132 947 q 221 994 185 994 q 283 971 257 994 q 310 907 310 947 q 283 843 310 867 q 221 819 257 819 q 158 843 185 819 q 132 907 132 867 z "},"ǝ":{"ha":811,"x_min":63,"x_max":749,"o":"m 749 371 q 719 201 749 274 q 640 78 689 128 q 528 5 592 29 q 399 -19 465 -19 q 153 75 243 -19 q 63 356 63 169 q 64 395 63 374 q 67 433 65 417 l 536 433 q 476 535 529 497 q 335 572 424 572 q 222 562 276 572 q 133 536 168 551 l 106 704 q 150 721 122 713 q 212 735 178 729 q 285 746 246 742 q 363 750 324 750 q 534 721 461 750 q 655 641 607 692 q 726 521 703 590 q 749 371 749 451 m 263 292 q 272 240 264 265 q 294 195 279 215 q 335 163 310 175 q 396 151 360 151 q 456 163 431 151 q 497 194 481 175 q 523 239 514 214 q 536 292 532 264 l 263 292 z "},"Ǟ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 456 1099 q 429 1035 456 1058 q 367 1011 403 1011 q 303 1035 329 1011 q 278 1099 278 1058 q 303 1163 278 1139 q 367 1186 329 1186 q 429 1163 403 1186 q 456 1099 456 1139 m 717 1099 q 690 1035 717 1058 q 628 1011 664 1011 q 565 1035 592 1011 q 539 1099 539 1058 q 565 1163 539 1139 q 628 1186 592 1186 q 690 1163 664 1186 q 717 1099 717 1139 m 315 1336 l 676 1336 l 676 1225 l 315 1225 l 315 1336 z "},"ǟ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 329 901 q 303 838 329 861 q 240 814 276 814 q 177 838 203 814 q 151 901 151 861 q 177 965 151 942 q 240 989 203 989 q 303 965 276 989 q 329 901 329 942 m 590 901 q 564 838 590 861 q 501 814 538 814 q 439 838 465 814 q 413 901 413 861 q 439 965 413 942 q 501 989 465 989 q 564 965 538 989 q 590 901 590 942 m 189 1139 l 550 1139 l 550 1028 l 189 1028 l 189 1139 z "},"Ǡ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 586 1100 q 560 1036 586 1060 q 497 1013 533 1013 q 435 1036 461 1013 q 408 1100 408 1060 q 435 1164 408 1140 q 497 1188 461 1188 q 560 1164 533 1188 q 586 1100 586 1140 m 317 1336 l 678 1336 l 678 1225 l 317 1225 l 317 1336 z "},"ǡ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 463 903 q 436 839 463 863 q 374 815 410 815 q 311 839 338 815 q 285 903 285 863 q 311 967 285 943 q 374 990 338 990 q 436 967 410 990 q 463 903 463 943 m 193 1139 l 554 1139 l 554 1028 l 193 1028 l 193 1139 z "},"Ǣ":{"ha":1381,"x_min":14,"x_max":1332,"o":"m 681 228 l 375 228 q 311 114 346 175 q 251 0 276 53 l 14 0 q 329 542 183 304 q 606 963 475 781 l 1300 963 l 1300 781 l 890 781 l 890 592 l 1251 592 l 1251 414 l 890 414 l 890 182 l 1332 182 l 1332 0 l 681 0 l 681 228 m 681 753 q 631 676 658 721 q 573 584 603 632 q 515 488 543 536 q 463 400 486 439 l 681 400 l 681 753 m 613 1219 l 1060 1219 l 1060 1078 l 613 1078 l 613 1219 z "},"ǣ":{"ha":1214,"x_min":49,"x_max":1151,"o":"m 360 750 q 438 744 403 750 q 499 727 472 739 q 549 697 526 715 q 590 651 571 678 q 697 727 638 704 q 825 750 757 750 q 960 726 900 750 q 1063 654 1019 701 q 1128 537 1106 607 q 1151 375 1151 467 q 1150 335 1151 357 q 1147 297 1149 314 l 678 297 q 738 196 685 233 q 879 158 790 158 q 991 169 936 158 q 1081 194 1046 179 l 1108 26 q 1064 10 1092 18 q 1002 -5 1036 1 q 929 -15 968 -11 q 851 -19 890 -19 q 708 -1 769 -19 q 604 46 647 17 q 363 -15 500 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 465 q 447 548 479 518 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 376 144 q 455 149 419 144 q 517 165 490 154 q 490 247 497 215 q 482 310 483 278 q 436 314 463 313 q 396 315 410 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 950 439 q 941 490 949 465 q 917 535 933 515 q 877 567 901 554 q 817 579 853 579 q 757 567 782 579 q 715 536 732 556 q 690 491 699 517 q 676 439 681 465 l 950 439 m 360 1007 l 807 1007 l 807 865 l 360 865 l 360 1007 z "},"Ǥ":{"ha":1011,"x_min":69,"x_max":997,"o":"m 533 433 l 668 433 l 668 536 l 885 536 l 885 433 l 997 433 l 997 285 l 885 285 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 285 l 533 285 l 533 433 z "},"ǥ":{"ha":836,"x_min":63,"x_max":822,"o":"m 728 467 l 822 467 l 822 342 l 728 342 l 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 467 m 417 467 l 521 467 l 521 576 q 485 581 506 579 q 436 583 464 583 q 311 528 351 583 q 271 389 271 472 q 305 257 271 301 q 414 213 339 213 q 474 221 446 213 q 521 240 501 229 l 521 342 l 417 342 l 417 467 z "},"Ǧ":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 m 340 1228 l 417 1319 l 556 1213 l 694 1319 l 774 1228 l 556 1038 l 340 1228 z "},"ǧ":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 m 225 1004 l 301 1096 l 440 989 l 579 1096 l 658 1004 l 440 814 l 225 1004 z "},"Ǩ":{"ha":950,"x_min":111,"x_max":936,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 730 292 622 424 q 936 0 838 160 l 679 0 m 265 1228 l 342 1319 l 481 1213 l 619 1319 l 699 1228 l 481 1038 l 265 1228 z "},"ǩ":{"ha":804,"x_min":97,"x_max":790,"o":"m 304 467 q 367 536 335 500 q 431 608 400 572 q 488 675 461 643 q 535 731 515 707 l 781 731 q 637 569 707 646 q 483 410 567 492 q 569 320 525 372 q 656 213 614 268 q 732 101 697 157 q 790 0 767 46 l 553 0 q 502 80 531 36 q 442 167 474 124 q 374 251 410 211 q 304 319 339 292 l 304 0 l 97 0 l 97 1044 l 304 1078 l 304 467 m 315 1100 l 110 1249 l 169 1336 l 315 1253 l 458 1336 l 518 1249 l 315 1100 z "},"Ǫ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 624 -307 q 490 -272 531 -307 q 450 -181 450 -237 q 463 -124 450 -151 q 496 -69 475 -96 q 543 -19 519 -39 q 358 14 444 -18 q 208 109 272 46 q 107 265 144 172 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 q 980 238 1028 338 q 844 72 932 139 q 800 41 822 56 q 756 12 778 26 q 713 -19 735 -3 q 671 -57 692 -35 q 642 -91 653 -75 q 632 -122 632 -107 q 641 -147 632 -137 q 674 -157 650 -157 q 703 -155 686 -157 q 744 -146 721 -153 l 761 -285 q 694 -301 733 -296 q 624 -307 656 -307 m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 z "},"ǫ":{"ha":843,"x_min":63,"x_max":781,"o":"m 463 -307 q 329 -272 369 -307 q 289 -181 289 -237 q 301 -124 289 -151 q 335 -69 314 -96 q 359 -41 346 -54 q 385 -17 372 -28 q 253 19 313 -11 q 151 100 193 50 q 85 217 108 150 q 63 367 63 285 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 q 736 164 781 250 q 613 29 692 78 q 562 -8 586 14 q 510 -57 538 -29 q 481 -91 492 -75 q 471 -122 471 -107 q 480 -147 471 -137 q 513 -157 489 -157 q 542 -155 525 -157 q 583 -146 560 -153 l 600 -285 q 533 -301 572 -296 q 463 -307 494 -307 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 z "},"Ǭ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 624 -307 q 490 -272 531 -307 q 450 -181 450 -237 q 463 -124 450 -151 q 496 -69 475 -96 q 543 -19 519 -39 q 358 14 444 -18 q 208 109 272 46 q 107 265 144 172 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 q 980 238 1028 338 q 844 72 932 139 q 800 41 822 56 q 756 12 778 26 q 713 -19 735 -3 q 671 -57 692 -35 q 642 -91 653 -75 q 632 -122 632 -107 q 641 -147 632 -137 q 674 -157 650 -157 q 703 -155 686 -157 q 744 -146 721 -153 l 761 -285 q 694 -301 733 -296 q 624 -307 656 -307 m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 325 1219 l 772 1219 l 772 1078 l 325 1078 l 325 1219 z "},"ǭ":{"ha":843,"x_min":63,"x_max":781,"o":"m 463 -307 q 329 -272 369 -307 q 289 -181 289 -237 q 301 -124 289 -151 q 335 -69 314 -96 q 359 -41 346 -54 q 385 -17 372 -28 q 253 19 313 -11 q 151 100 193 50 q 85 217 108 150 q 63 367 63 285 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 q 736 164 781 250 q 613 29 692 78 q 562 -8 586 14 q 510 -57 538 -29 q 481 -91 492 -75 q 471 -122 471 -107 q 480 -147 471 -137 q 513 -157 489 -157 q 542 -155 525 -157 q 583 -146 560 -153 l 600 -285 q 533 -301 572 -296 q 463 -307 494 -307 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 197 1007 l 644 1007 l 644 865 l 197 865 l 197 1007 z "},"Ǯ":{"ha":853,"x_min":28,"x_max":776,"o":"m 247 544 q 303 602 274 571 q 364 665 333 633 q 422 727 394 697 q 471 782 450 757 l 78 782 l 78 963 l 751 963 l 751 833 q 706 779 735 813 q 642 708 676 746 q 571 632 607 671 q 503 560 535 593 q 714 465 651 533 q 776 285 776 397 q 747 148 776 206 q 662 53 717 90 q 530 -3 607 15 q 360 -21 453 -21 q 250 -12 301 -21 q 156 10 199 -3 q 80 37 113 22 q 28 63 47 51 l 92 235 q 208 188 138 211 q 358 164 278 164 q 501 192 450 164 q 553 288 553 221 q 535 354 553 328 q 487 397 518 381 q 412 419 456 413 q 315 425 368 425 l 247 425 l 247 544 m 196 1228 l 272 1319 l 411 1213 l 550 1319 l 629 1228 l 411 1038 l 196 1228 z "},"ǯ":{"ha":715,"x_min":7,"x_max":660,"o":"m 172 319 q 221 376 194 344 q 273 439 247 407 q 324 502 299 471 q 368 558 349 533 l 43 558 l 43 731 l 631 731 l 631 589 q 590 538 614 567 q 539 476 567 508 q 481 407 511 443 q 421 333 451 371 q 515 295 471 319 q 590 235 558 271 q 641 153 622 200 q 660 49 660 107 q 562 -181 660 -104 q 292 -257 464 -257 q 213 -253 253 -257 q 134 -241 172 -249 q 63 -223 96 -233 q 7 -201 31 -212 l 53 -36 q 103 -54 75 -46 q 160 -68 131 -62 q 220 -76 190 -74 q 278 -79 250 -79 q 408 -43 364 -79 q 451 57 451 -7 q 399 164 451 129 q 247 199 346 199 l 172 199 l 172 319 m 125 1004 l 201 1096 l 340 989 l 479 1096 l 558 1004 l 340 814 l 125 1004 z "},"ǰ":{"ha":401,"x_min":-100,"x_max":426,"o":"m 29 -257 q -28 -253 10 -257 q -100 -237 -67 -249 l -72 -69 q -34 -79 -51 -76 q 10 -82 -17 -82 q 78 -53 58 -82 q 97 32 97 -24 l 97 731 l 304 731 l 304 26 q 233 -187 304 -118 q 29 -257 163 -257 m -7 1004 l 69 1096 l 208 989 l 347 1096 l 426 1004 l 208 814 l -7 1004 z "},"Ǳ":{"ha":1806,"x_min":111,"x_max":1764,"o":"m 328 176 q 363 174 343 175 q 411 174 383 174 q 652 256 574 174 q 731 482 731 338 q 656 711 731 633 q 418 789 581 789 q 372 788 396 789 q 328 785 349 788 l 328 176 m 954 482 q 915 264 954 357 q 805 110 876 171 q 631 18 733 49 q 400 -12 528 -12 q 264 -8 342 -12 q 111 13 186 -3 l 111 950 q 267 969 186 964 q 407 974 349 974 q 631 946 531 974 q 804 858 732 918 q 915 706 876 799 q 954 482 954 613 m 1749 813 q 1643 694 1704 767 q 1517 535 1582 621 q 1388 357 1451 449 q 1274 182 1324 265 l 1764 182 l 1764 0 l 1007 0 l 1007 129 q 1102 287 1046 200 q 1219 462 1158 374 q 1344 633 1281 550 q 1461 781 1407 715 l 1029 781 l 1029 963 l 1749 963 l 1749 813 z "},"ǲ":{"ha":1688,"x_min":111,"x_max":1646,"o":"m 328 176 q 363 174 343 175 q 411 174 383 174 q 652 256 574 174 q 731 482 731 338 q 656 711 731 633 q 418 789 581 789 q 372 788 396 789 q 328 785 349 788 l 328 176 m 954 482 q 915 264 954 357 q 805 110 876 171 q 631 18 733 49 q 400 -12 528 -12 q 264 -8 342 -12 q 111 13 186 -3 l 111 950 q 267 969 186 964 q 407 974 349 974 q 631 946 531 974 q 804 858 732 918 q 915 706 876 799 q 954 482 954 613 m 1639 592 q 1572 517 1614 564 q 1481 413 1529 469 q 1383 293 1432 356 q 1293 172 1333 231 l 1646 172 l 1646 0 l 1042 0 l 1042 122 q 1112 230 1071 172 q 1198 346 1153 288 q 1288 459 1243 404 q 1369 558 1332 514 l 1058 558 l 1058 731 l 1639 731 l 1639 592 z "},"ǳ":{"ha":1521,"x_min":63,"x_max":1479,"o":"m 274 371 q 317 217 274 275 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 542 q 484 563 515 554 q 421 571 453 571 q 274 371 274 571 m 742 24 q 678 8 714 15 q 602 -6 642 0 q 522 -15 563 -11 q 443 -18 481 -18 q 282 8 353 -18 q 163 84 211 35 q 88 203 114 133 q 63 361 63 274 q 85 522 63 450 q 149 643 107 593 q 251 719 190 693 q 389 746 311 746 q 466 738 432 746 q 535 714 500 729 l 535 1044 l 742 1078 l 742 24 m 1472 592 q 1405 517 1447 564 q 1314 413 1363 469 q 1216 293 1265 356 q 1126 172 1167 231 l 1479 172 l 1479 0 l 875 0 l 875 122 q 945 230 904 172 q 1031 346 986 288 q 1121 459 1076 404 q 1203 558 1165 514 l 892 558 l 892 731 l 1472 731 l 1472 592 z "},"Ǵ":{"ha":975,"x_min":69,"x_max":885,"o":"m 581 796 q 362 712 429 796 q 294 482 294 628 q 311 353 294 411 q 361 254 328 296 q 444 190 394 213 q 561 167 494 167 q 623 168 597 167 q 668 174 649 169 l 668 508 l 885 508 l 885 32 q 760 -1 846 17 q 547 -18 674 -18 q 351 15 439 -18 q 200 113 263 49 q 103 269 138 176 q 69 482 69 363 q 107 696 69 603 q 210 853 144 789 q 363 951 275 918 q 551 985 451 985 q 674 976 619 985 q 769 955 729 967 q 834 931 808 943 q 871 911 860 918 l 808 738 q 706 778 764 761 q 581 796 649 796 m 744 1215 l 515 1022 l 421 1107 l 618 1332 l 744 1215 z "},"ǵ":{"ha":825,"x_min":63,"x_max":728,"o":"m 274 389 q 414 215 274 215 q 474 224 446 215 q 521 243 501 232 l 521 574 q 485 578 506 576 q 436 581 464 581 q 314 526 354 581 q 274 389 274 472 m 728 92 q 637 -174 728 -87 q 356 -261 546 -261 q 222 -249 289 -261 q 99 -218 156 -237 l 135 -44 q 237 -75 183 -64 q 358 -86 290 -86 q 484 -47 447 -86 q 521 53 521 -8 l 521 79 q 452 56 488 64 q 375 49 417 49 q 143 138 224 49 q 63 389 63 228 q 88 535 63 469 q 160 649 113 601 q 278 722 208 696 q 435 747 347 747 q 512 744 472 747 q 590 735 551 740 q 665 722 629 729 q 728 706 700 714 l 728 92 m 669 993 l 440 800 l 346 885 l 543 1110 l 669 993 z "},"Ƕ":{"ha":1474,"x_min":111,"x_max":1390,"o":"m 682 963 l 899 963 l 899 369 q 930 216 899 265 q 1038 167 961 167 q 1144 216 1113 167 q 1175 369 1175 265 l 1175 742 l 1390 742 l 1390 344 q 1375 200 1390 267 q 1320 85 1360 133 q 1212 8 1281 36 q 1038 -19 1143 -19 q 865 8 933 -19 q 756 83 796 35 q 699 197 715 131 q 682 340 682 263 l 682 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 682 594 l 682 963 z "},"Ƿ":{"ha":932,"x_min":111,"x_max":876,"o":"m 328 -257 l 111 -257 l 111 900 q 179 924 140 911 q 263 947 218 936 q 355 964 307 957 q 450 971 403 971 q 765 877 653 971 q 876 604 876 783 q 835 397 876 489 q 719 231 793 304 q 544 101 644 158 q 328 0 444 44 l 328 -257 m 328 203 q 458 272 399 235 q 561 358 518 310 q 628 467 604 406 q 651 610 651 529 q 598 740 651 694 q 451 786 544 786 q 381 782 411 786 q 328 772 350 778 l 328 203 z "},"Ǹ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 m 431 1332 l 628 1107 l 533 1022 l 304 1215 l 431 1332 z "},"ǹ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 335 1110 l 532 885 l 438 800 l 208 993 l 335 1110 z "},"Ǻ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 110 271 64 146 q 199 506 156 396 q 285 717 243 617 q 372 911 328 817 q 353 988 353 943 q 365 1049 353 1022 q 396 1093 376 1075 q 441 1120 415 1111 q 496 1129 467 1129 q 598 1094 554 1129 q 642 988 642 1058 q 637 950 642 967 q 625 918 632 933 q 713 722 669 822 q 799 510 756 621 q 890 272 843 399 q 988 0 936 146 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 550 604 568 557 q 518 688 532 651 q 496 744 504 724 m 547 988 q 531 1026 547 1013 q 496 1040 515 1040 q 462 1026 478 1040 q 446 988 446 1013 q 462 949 446 963 q 496 936 478 936 q 531 949 515 936 q 547 988 547 963 m 633 1225 l 399 1136 l 354 1219 l 579 1336 l 633 1225 z "},"ǻ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 517 1206 l 279 1117 l 236 1201 l 461 1318 l 517 1206 m 522 960 q 510 901 522 926 q 479 858 499 875 q 434 831 460 840 q 381 822 408 822 q 328 831 353 822 q 283 858 303 840 q 252 901 264 875 q 240 960 240 926 q 252 1019 240 993 q 283 1062 264 1044 q 328 1088 303 1079 q 381 1097 353 1097 q 434 1088 408 1097 q 479 1062 460 1079 q 510 1019 499 1044 q 522 960 522 993 m 435 960 q 418 1002 435 988 q 381 1017 401 1017 q 344 1002 361 1017 q 326 960 326 988 q 344 917 326 932 q 381 903 361 903 q 418 917 401 903 q 435 960 435 932 z "},"Ǽ":{"ha":1381,"x_min":14,"x_max":1332,"o":"m 681 228 l 375 228 q 311 114 346 175 q 251 0 276 53 l 14 0 q 329 542 183 304 q 606 963 475 781 l 1300 963 l 1300 781 l 890 781 l 890 592 l 1251 592 l 1251 414 l 890 414 l 890 182 l 1332 182 l 1332 0 l 681 0 l 681 228 m 681 753 q 631 676 658 721 q 573 584 603 632 q 515 488 543 536 q 463 400 486 439 l 681 400 l 681 753 m 1033 1215 l 804 1022 l 710 1107 l 907 1332 l 1033 1215 z "},"ǽ":{"ha":1214,"x_min":49,"x_max":1151,"o":"m 360 750 q 438 744 403 750 q 499 727 472 739 q 549 697 526 715 q 590 651 571 678 q 697 727 638 704 q 825 750 757 750 q 960 726 900 750 q 1063 654 1019 701 q 1128 537 1106 607 q 1151 375 1151 467 q 1150 335 1151 357 q 1147 297 1149 314 l 678 297 q 738 196 685 233 q 879 158 790 158 q 991 169 936 158 q 1081 194 1046 179 l 1108 26 q 1064 10 1092 18 q 1002 -5 1036 1 q 929 -15 968 -11 q 851 -19 890 -19 q 708 -1 769 -19 q 604 46 647 17 q 363 -15 500 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 465 q 447 548 479 518 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 376 144 q 455 149 419 144 q 517 165 490 154 q 490 247 497 215 q 482 310 483 278 q 436 314 463 313 q 396 315 410 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 950 439 q 941 490 949 465 q 917 535 933 515 q 877 567 901 554 q 817 579 853 579 q 757 567 782 579 q 715 536 732 556 q 690 491 699 517 q 676 439 681 465 l 950 439 m 829 993 l 600 800 l 506 885 l 703 1110 l 829 993 z "},"Ǿ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 416 -5 479 -19 q 299 42 353 10 l 218 -62 l 100 25 l 185 133 q 100 283 131 196 q 69 482 69 369 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 796 924 686 985 l 874 1025 l 992 938 l 910 832 q 997 682 965 769 q 1028 482 1028 594 m 804 482 q 771 653 804 582 l 422 201 q 549 171 479 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 m 293 482 q 325 315 293 386 l 672 764 q 549 794 618 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 713 1215 l 483 1022 l 389 1107 l 586 1332 l 713 1215 z "},"ǿ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 236 28 318 -19 l 174 -54 l 76 19 l 144 107 q 83 222 104 157 q 63 367 63 288 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 519 738 474 750 q 604 704 565 726 l 668 786 l 765 713 l 697 625 q 759 511 738 576 q 781 367 781 446 m 581 367 q 569 458 581 414 l 346 168 q 422 147 379 147 q 539 206 497 147 q 581 367 581 265 m 263 367 q 265 317 263 340 q 274 275 267 294 l 496 564 q 422 583 464 583 q 305 526 347 583 q 263 367 263 468 m 593 993 l 364 800 l 269 885 l 467 1110 l 593 993 z "},"Ȁ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 592 1335 l 758 1097 l 665 1026 l 471 1238 l 592 1335 m 311 1335 l 478 1097 l 385 1026 l 190 1238 l 311 1335 z "},"ȁ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 454 1110 l 621 872 l 528 801 l 333 1013 l 454 1110 m 174 1110 l 340 872 l 247 801 l 53 1013 l 174 1110 z "},"Ȃ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 499 1272 q 588 1257 546 1272 q 659 1214 629 1242 q 706 1145 689 1186 q 724 1053 724 1104 l 724 1042 l 583 1042 q 556 1120 579 1100 q 499 1140 532 1140 q 442 1120 465 1140 q 414 1042 418 1100 l 274 1042 l 274 1053 q 291 1145 274 1104 q 338 1214 308 1186 q 409 1257 368 1242 q 499 1272 450 1272 z "},"ȃ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 381 1050 q 469 1035 428 1050 q 541 992 511 1019 q 588 923 571 964 q 606 831 606 882 l 606 819 l 465 819 q 438 898 461 878 q 381 918 414 918 q 324 898 347 918 q 296 819 300 878 l 156 819 l 156 831 q 173 923 156 882 q 220 992 190 964 q 291 1035 250 1019 q 381 1050 332 1050 z "},"Ȅ":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 526 1335 l 693 1097 l 600 1026 l 406 1238 l 526 1335 m 246 1335 l 413 1097 l 319 1026 l 125 1238 l 246 1335 z "},"ȅ":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 511 1110 l 678 872 l 585 801 l 390 1013 l 511 1110 m 231 1110 l 397 872 l 304 801 l 110 1013 l 231 1110 z "},"Ȇ":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 439 1272 q 528 1257 486 1272 q 599 1214 569 1242 q 647 1145 629 1186 q 664 1053 664 1104 l 664 1042 l 524 1042 q 496 1120 519 1100 q 439 1140 472 1140 q 382 1120 406 1140 q 354 1042 358 1100 l 214 1042 l 214 1053 q 231 1145 214 1104 q 278 1214 249 1186 q 349 1257 308 1242 q 439 1272 390 1272 z "},"ȇ":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 417 1050 q 506 1035 464 1050 q 577 992 547 1019 q 624 923 607 964 q 642 831 642 882 l 642 819 l 501 819 q 474 898 497 878 q 417 918 450 918 q 360 898 383 918 q 332 819 336 878 l 192 819 l 192 831 q 209 923 192 882 q 256 992 226 964 q 327 1035 286 1019 q 417 1050 368 1050 z "},"Ȉ":{"ha":439,"x_min":-97,"x_max":471,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 304 1335 l 471 1097 l 378 1026 l 183 1238 l 304 1335 m 24 1335 l 190 1097 l 97 1026 l -97 1238 l 24 1335 z "},"ȉ":{"ha":401,"x_min":-115,"x_max":453,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 286 1110 l 453 872 l 360 801 l 165 1013 l 286 1110 m 6 1110 l 172 872 l 79 801 l -115 1013 l 6 1110 z "},"Ȋ":{"ha":439,"x_min":-3,"x_max":447,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 222 1272 q 311 1257 269 1272 q 383 1214 353 1242 q 430 1145 413 1186 q 447 1053 447 1104 l 447 1042 l 307 1042 q 279 1120 303 1100 q 222 1140 256 1140 q 165 1120 189 1140 q 138 1042 142 1100 l -3 1042 l -3 1053 q 15 1145 -3 1104 q 62 1214 32 1186 q 133 1257 92 1242 q 222 1272 174 1272 z "},"ȋ":{"ha":401,"x_min":-22,"x_max":428,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 203 1050 q 292 1035 250 1050 q 363 992 333 1019 q 410 923 393 964 q 428 831 428 882 l 428 819 l 288 819 q 260 898 283 878 q 203 918 236 918 q 146 898 169 918 q 118 819 122 878 l -22 819 l -22 831 q -5 923 -22 882 q 42 992 13 964 q 113 1035 72 1019 q 203 1050 154 1050 z "},"Ȍ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 621 1335 l 788 1097 l 694 1026 l 500 1238 l 621 1335 m 340 1335 l 507 1097 l 414 1026 l 219 1238 l 340 1335 z "},"ȍ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 511 1110 l 678 872 l 585 801 l 390 1013 l 511 1110 m 231 1110 l 397 872 l 304 801 l 110 1013 l 231 1110 z "},"Ȏ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 549 1272 q 638 1257 596 1272 q 709 1214 679 1242 q 756 1145 739 1186 q 774 1053 774 1104 l 774 1042 l 633 1042 q 606 1120 629 1100 q 549 1140 582 1140 q 492 1120 515 1140 q 464 1042 468 1100 l 324 1042 l 324 1053 q 341 1145 324 1104 q 388 1214 358 1186 q 459 1257 418 1242 q 549 1272 500 1272 z "},"ȏ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 421 1050 q 510 1035 468 1050 q 581 992 551 1019 q 628 923 611 964 q 646 831 646 882 l 646 819 l 506 819 q 478 898 501 878 q 421 918 454 918 q 364 898 388 918 q 336 819 340 878 l 196 819 l 196 831 q 213 923 196 882 q 260 992 231 964 q 331 1035 290 1019 q 421 1050 372 1050 z "},"Ȑ":{"ha":926,"x_min":111,"x_max":899,"o":"m 393 974 q 725 897 610 974 q 840 657 840 819 q 794 492 840 556 q 660 393 747 429 q 721 310 689 357 q 784 213 753 264 q 844 108 815 163 q 899 0 874 53 l 656 0 q 602 96 629 47 q 547 190 575 144 q 490 277 518 236 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 949 q 258 968 182 963 q 393 974 333 974 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 m 513 1335 l 679 1097 l 586 1026 l 392 1238 l 513 1335 m 232 1335 l 399 1097 l 306 1026 l 111 1238 l 232 1335 z "},"ȑ":{"ha":586,"x_min":1,"x_max":572,"o":"m 538 547 q 472 562 510 554 q 392 569 435 569 q 345 566 372 569 q 304 558 318 563 l 304 0 l 97 0 l 97 692 q 228 728 153 711 q 397 746 304 746 q 438 744 414 746 q 485 738 461 742 q 532 730 508 735 q 572 718 556 725 l 538 547 m 403 1110 l 569 872 l 476 801 l 282 1013 l 403 1110 m 122 1110 l 289 872 l 196 801 l 1 1013 l 122 1110 z "},"Ȓ":{"ha":926,"x_min":111,"x_max":899,"o":"m 393 974 q 725 897 610 974 q 840 657 840 819 q 794 492 840 556 q 660 393 747 429 q 721 310 689 357 q 784 213 753 264 q 844 108 815 163 q 899 0 874 53 l 656 0 q 602 96 629 47 q 547 190 575 144 q 490 277 518 236 q 435 351 463 318 l 328 351 l 328 0 l 111 0 l 111 949 q 258 968 182 963 q 393 974 333 974 m 406 789 q 363 788 382 789 q 328 785 344 786 l 328 524 l 389 524 q 564 554 511 524 q 617 658 617 585 q 563 759 617 729 q 406 789 510 789 m 447 1272 q 536 1257 494 1272 q 608 1214 578 1242 q 655 1145 638 1186 q 672 1053 672 1104 l 672 1042 l 532 1042 q 504 1120 528 1100 q 447 1140 481 1140 q 390 1120 414 1140 q 363 1042 367 1100 l 222 1042 l 222 1053 q 240 1145 222 1104 q 287 1214 257 1186 q 358 1257 317 1242 q 447 1272 399 1272 z "},"ȓ":{"ha":586,"x_min":97,"x_max":572,"o":"m 538 547 q 472 562 510 554 q 392 569 435 569 q 345 566 372 569 q 304 558 318 563 l 304 0 l 97 0 l 97 692 q 228 728 153 711 q 397 746 304 746 q 438 744 414 746 q 485 738 461 742 q 532 730 508 735 q 572 718 556 725 l 538 547 m 340 1050 q 429 1035 388 1050 q 501 992 471 1019 q 548 923 531 964 q 565 831 565 882 l 565 819 l 425 819 q 397 898 421 878 q 340 918 374 918 q 283 898 307 918 q 256 819 260 878 l 115 819 l 115 831 q 133 923 115 882 q 180 992 150 964 q 251 1035 210 1019 q 340 1050 292 1050 z "},"Ȕ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 567 1335 l 733 1097 l 640 1026 l 446 1238 l 567 1335 m 286 1335 l 453 1097 l 360 1026 l 165 1238 l 286 1335 z "},"ȕ":{"ha":818,"x_min":72,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 474 1110 l 640 872 l 547 801 l 353 1013 l 474 1110 m 193 1110 l 360 872 l 267 801 l 72 1013 l 193 1110 z "},"Ȗ":{"ha":982,"x_min":97,"x_max":885,"o":"m 488 -19 q 313 9 386 -19 q 191 88 239 38 q 120 209 143 139 q 97 364 97 279 l 97 963 l 314 963 l 314 382 q 327 283 314 324 q 363 216 340 242 q 419 179 386 190 q 490 168 451 168 q 619 217 569 168 q 668 382 668 265 l 668 963 l 885 963 l 885 364 q 861 208 885 279 q 789 87 838 138 q 665 8 740 36 q 488 -19 590 -19 m 492 1272 q 581 1257 539 1272 q 652 1214 622 1242 q 699 1145 682 1186 q 717 1053 717 1104 l 717 1042 l 576 1042 q 549 1120 572 1100 q 492 1140 525 1140 q 435 1120 458 1140 q 407 1042 411 1100 l 267 1042 l 267 1053 q 284 1145 267 1104 q 331 1214 301 1186 q 402 1257 361 1242 q 492 1272 443 1272 z "},"ȗ":{"ha":818,"x_min":90,"x_max":721,"o":"m 721 25 q 585 -3 668 10 q 410 -17 501 -17 q 255 8 317 -17 q 157 78 193 33 q 106 186 121 124 q 90 324 90 249 l 90 731 l 297 731 l 297 349 q 324 204 297 249 q 422 160 350 160 q 469 162 444 160 q 514 167 494 164 l 514 731 l 721 731 l 721 25 m 406 1050 q 494 1035 453 1050 q 566 992 536 1019 q 613 923 596 964 q 631 831 631 882 l 631 819 l 490 819 q 463 898 486 878 q 406 918 439 918 q 349 898 372 918 q 321 819 325 878 l 181 819 l 181 831 q 198 923 181 882 q 245 992 215 964 q 316 1035 275 1019 q 406 1050 357 1050 z "},"Ȝ":{"ha":789,"x_min":21,"x_max":718,"o":"m 153 -68 q 281 -59 219 -68 q 390 -26 343 -50 q 466 37 438 -3 q 494 138 494 76 q 473 226 494 190 q 417 283 451 261 q 337 313 382 304 q 244 322 292 322 l 154 322 l 154 504 l 233 504 q 395 543 333 504 q 457 661 457 582 q 413 763 457 728 q 299 797 369 797 q 189 783 244 797 q 92 749 133 769 l 21 921 q 153 967 81 950 q 306 985 225 985 q 454 967 386 985 q 572 910 522 949 q 651 812 622 872 q 679 668 679 751 q 643 535 679 597 q 536 429 607 472 q 673 310 628 386 q 718 146 718 233 q 672 -45 718 32 q 549 -169 626 -122 q 371 -237 472 -217 q 157 -258 269 -258 q 133 -258 149 -258 q 98 -258 117 -258 q 59 -256 79 -257 q 22 -251 39 -254 l 36 -62 q 67 -65 50 -64 q 100 -67 83 -67 q 131 -68 117 -68 q 153 -68 144 -68 z "},"ȝ":{"ha":663,"x_min":14,"x_max":603,"o":"m 246 750 q 377 736 317 750 q 481 692 438 722 q 550 615 525 661 q 575 503 575 568 q 543 397 575 449 q 436 306 511 346 q 559 218 515 278 q 603 79 603 158 q 557 -78 603 -15 q 433 -181 511 -142 q 249 -239 354 -221 q 26 -258 144 -257 l 14 -83 q 150 -74 83 -81 q 269 -49 217 -67 q 354 1 322 -31 q 386 82 386 32 q 372 139 386 117 q 331 175 357 161 q 271 194 306 189 q 197 200 236 200 l 161 200 l 161 368 q 314 397 265 368 q 363 486 363 426 q 333 551 363 528 q 246 574 304 574 q 67 542 150 574 l 25 711 q 66 724 42 717 q 119 736 90 731 q 181 746 149 742 q 246 750 214 750 z "},"Ȟ":{"ha":1019,"x_min":111,"x_max":908,"o":"m 692 963 l 908 963 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 m 294 1228 l 371 1319 l 510 1213 l 649 1319 l 728 1228 l 510 1038 l 294 1228 z "},"ȟ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 0 l 97 1044 l 304 1078 l 304 728 q 358 741 325 735 q 421 747 390 747 q 569 723 510 747 q 663 654 628 699 q 713 549 699 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 495 529 521 488 q 400 571 469 571 q 348 566 372 571 q 304 556 324 561 l 304 0 l 97 0 m 315 1100 l 110 1249 l 169 1336 l 315 1253 l 458 1336 l 518 1249 l 315 1100 z "},"Ƞ":{"ha":978,"x_min":111,"x_max":874,"o":"m 111 942 q 269 972 178 958 q 474 985 361 985 q 664 954 588 985 q 787 869 740 924 q 853 738 833 814 q 874 572 874 663 l 874 -257 l 657 -257 l 657 575 q 642 678 657 636 q 602 747 628 721 q 540 785 576 774 q 460 797 503 797 q 388 794 424 797 q 328 788 353 792 l 328 0 l 111 0 l 111 942 z "},"ȡ":{"ha":1086,"x_min":63,"x_max":1075,"o":"m 742 186 q 785 205 757 194 q 854 215 814 215 q 939 200 899 215 q 1009 156 979 185 q 1057 83 1039 126 q 1075 -17 1075 40 q 1055 -123 1075 -78 q 1000 -198 1035 -168 q 919 -242 965 -228 q 821 -257 872 -257 q 681 -224 738 -257 q 592 -131 624 -190 l 489 -243 l 383 -143 l 497 -17 q 469 -18 482 -18 q 443 -18 456 -18 q 282 8 353 -18 q 163 84 211 35 q 88 203 114 133 q 63 361 63 274 q 85 522 63 450 q 149 643 107 593 q 251 719 190 693 q 389 746 311 746 q 466 738 432 746 q 535 714 500 729 l 535 1044 l 742 1078 l 742 186 m 274 371 q 317 217 274 275 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 542 q 484 563 515 554 q 421 571 453 571 q 274 371 274 571 m 742 -3 q 759 -75 742 -46 q 821 -104 776 -104 q 878 -79 858 -104 q 897 -25 897 -54 q 877 34 897 10 q 821 58 857 58 q 777 50 799 58 q 742 28 756 42 l 742 -3 z "},"Ȣ":{"ha":989,"x_min":69,"x_max":919,"o":"m 494 601 q 606 646 572 601 q 640 758 640 690 q 640 808 640 786 q 637 853 639 831 q 631 902 635 876 q 619 963 626 928 l 829 963 q 850 858 843 906 q 857 747 857 810 q 853 690 857 721 q 840 630 850 660 q 808 573 829 600 q 754 526 788 546 q 835 474 803 503 q 885 415 867 446 q 912 349 904 383 q 919 282 919 315 q 819 60 919 140 q 494 -19 719 -19 q 169 60 269 -19 q 69 282 69 140 q 77 349 69 315 q 103 415 85 383 q 154 474 122 446 q 235 526 186 503 q 181 573 201 546 q 149 630 160 600 q 135 690 139 660 q 132 747 132 721 q 138 858 132 810 q 160 963 144 906 l 369 963 q 358 902 363 928 q 352 853 354 876 q 349 808 350 831 q 349 758 349 786 q 383 646 349 690 q 494 601 417 601 m 494 160 q 572 167 535 160 q 636 192 608 175 q 681 233 664 208 q 697 293 697 258 q 640 394 697 363 q 494 425 583 425 q 349 394 406 425 q 292 293 292 363 q 308 233 292 258 q 353 192 325 208 q 417 167 381 175 q 494 160 454 160 z "},"ȣ":{"ha":831,"x_min":56,"x_max":775,"o":"m 415 679 q 500 722 469 679 q 531 847 531 765 q 528 950 531 888 q 515 1078 525 1013 l 710 1078 q 727 966 721 1022 q 733 850 733 910 q 706 703 733 764 q 608 604 679 643 q 735 485 694 563 q 775 319 775 408 q 749 178 775 242 q 674 72 722 115 q 560 4 626 28 q 415 -19 494 -19 q 270 4 336 -19 q 156 72 204 28 q 82 178 108 115 q 56 319 56 242 q 96 485 56 408 q 222 604 136 563 q 124 703 151 643 q 97 850 97 764 q 103 966 97 910 q 121 1078 110 1022 l 315 1078 q 303 950 306 1013 q 300 847 300 888 q 331 722 300 765 q 415 679 361 679 m 415 158 q 524 202 483 158 q 564 328 564 246 q 524 454 564 407 q 415 501 483 501 q 307 454 347 501 q 267 328 267 407 q 307 202 267 246 q 415 158 347 158 z "},"Ȥ":{"ha":847,"x_min":49,"x_max":806,"o":"m 790 813 q 685 694 746 767 q 558 535 624 621 q 429 357 493 449 q 315 182 365 265 l 806 182 l 806 24 q 742 -190 806 -121 q 542 -260 679 -260 q 488 -256 522 -260 q 421 -242 454 -253 l 449 -82 q 484 -91 471 -89 q 525 -93 497 -93 q 604 0 604 -93 l 49 0 l 49 129 q 144 287 88 200 q 261 462 200 374 q 385 633 322 550 q 503 781 449 715 l 71 781 l 71 963 l 790 963 l 790 813 z "},"ȥ":{"ha":694,"x_min":49,"x_max":653,"o":"m 646 592 q 578 517 621 564 q 488 413 536 469 q 390 293 439 356 q 300 172 340 231 l 653 172 l 653 -31 q 591 -201 653 -144 q 418 -257 529 -257 q 364 -253 400 -257 q 296 -239 328 -250 l 322 -92 q 358 -101 342 -99 q 400 -103 375 -103 q 458 -86 436 -103 q 481 -33 481 -69 l 481 0 l 49 0 l 49 122 q 119 230 78 172 q 205 346 160 288 q 294 459 250 404 q 376 558 339 514 l 65 558 l 65 731 l 646 731 l 646 592 z "},"Ȧ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 499 1056 q 422 1085 454 1056 q 389 1164 389 1114 q 422 1243 389 1214 q 499 1272 454 1272 q 576 1243 543 1272 q 608 1164 608 1214 q 576 1085 608 1114 q 499 1056 543 1056 z "},"ȧ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 372 833 q 295 863 328 833 q 263 942 263 892 q 295 1021 263 992 q 372 1050 328 1050 q 449 1021 417 1050 q 482 942 482 992 q 449 863 482 892 q 372 833 417 833 z "},"Ȩ":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 536 0 q 522 -29 529 -14 q 511 -56 515 -44 q 572 -108 556 -78 q 589 -171 589 -139 q 536 -272 589 -237 q 397 -307 483 -307 q 336 -302 367 -307 q 275 -289 306 -297 l 300 -168 q 335 -177 310 -171 q 386 -183 361 -183 q 420 -176 406 -183 q 436 -149 435 -168 q 423 -118 438 -132 q 376 -97 408 -104 l 360 -93 q 378 -47 367 -74 q 399 0 389 -21 l 111 0 z "},"ȩ":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 618 -1 678 11 q 492 -18 558 -14 q 482 -39 486 -29 q 475 -56 478 -49 q 536 -108 519 -78 q 553 -171 553 -139 q 500 -272 553 -237 q 361 -307 447 -307 q 300 -302 331 -307 q 239 -289 269 -297 l 264 -168 q 299 -177 274 -171 q 350 -183 325 -183 q 384 -176 369 -183 q 400 -149 399 -168 q 387 -118 401 -132 q 340 -97 372 -104 l 324 -93 q 338 -53 329 -76 q 357 -11 347 -31 q 226 34 282 1 q 134 116 171 67 q 80 227 97 165 q 63 360 63 289 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 z "},"Ȫ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 506 1099 q 479 1035 506 1058 q 417 1011 453 1011 q 353 1035 379 1011 q 328 1099 328 1058 q 353 1163 328 1139 q 417 1186 379 1186 q 479 1163 453 1186 q 506 1099 506 1139 m 767 1099 q 740 1035 767 1058 q 678 1011 714 1011 q 615 1035 642 1011 q 589 1099 589 1058 q 615 1163 589 1139 q 678 1186 642 1186 q 740 1163 714 1186 q 767 1099 767 1139 m 365 1336 l 726 1336 l 726 1225 l 365 1225 l 365 1336 z "},"ȫ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 382 901 q 356 838 382 861 q 293 814 329 814 q 230 838 256 814 q 204 901 204 861 q 230 965 204 942 q 293 989 256 989 q 356 965 329 989 q 382 901 382 942 m 643 901 q 617 838 643 861 q 554 814 590 814 q 492 838 518 814 q 465 901 465 861 q 492 965 465 942 q 554 989 518 989 q 617 965 590 989 q 643 901 643 942 m 242 1139 l 603 1139 l 603 1028 l 242 1028 l 242 1139 z "},"Ȭ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 767 1146 q 747 1106 760 1128 q 716 1067 733 1085 q 676 1037 699 1049 q 625 1025 653 1025 q 585 1031 604 1025 q 549 1045 567 1038 q 513 1059 531 1053 q 475 1065 494 1065 q 436 1050 451 1065 q 410 1014 421 1035 l 333 1075 q 351 1113 339 1093 q 383 1149 364 1133 q 425 1174 401 1164 q 476 1185 449 1185 q 515 1178 497 1185 q 551 1164 533 1172 q 588 1149 569 1156 q 625 1143 606 1143 q 665 1158 649 1143 q 692 1194 681 1174 l 767 1146 m 369 1336 l 731 1336 l 731 1225 l 369 1225 l 369 1336 z "},"ȭ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 644 949 q 624 909 638 931 q 594 869 611 888 q 553 840 576 851 q 503 828 531 828 q 463 834 482 828 q 426 848 444 840 q 390 862 408 856 q 353 868 372 868 q 314 853 329 868 q 288 817 299 838 l 211 878 q 229 916 217 896 q 260 951 242 936 q 303 977 279 967 q 354 988 326 988 q 393 981 375 988 q 429 967 411 975 q 465 952 447 958 q 503 946 483 946 q 542 961 526 946 q 569 997 558 976 l 644 949 m 247 1139 l 608 1139 l 608 1028 l 247 1028 l 247 1139 z "},"Ȯ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 549 1056 q 472 1085 504 1056 q 439 1164 439 1114 q 472 1243 439 1214 q 549 1272 504 1272 q 626 1243 593 1272 q 658 1164 658 1214 q 626 1085 658 1114 q 549 1056 593 1056 z "},"ȯ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 421 833 q 344 863 376 833 q 311 942 311 892 q 344 1021 311 992 q 421 1050 376 1050 q 498 1021 465 1050 q 531 942 531 992 q 498 863 531 892 q 421 833 465 833 z "},"Ȱ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 638 1100 q 611 1036 638 1060 q 549 1013 585 1013 q 486 1036 513 1013 q 460 1100 460 1060 q 486 1164 460 1140 q 549 1188 513 1188 q 611 1164 585 1188 q 638 1100 638 1140 m 368 1336 l 729 1336 l 729 1225 l 368 1225 l 368 1336 z "},"ȱ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 510 903 q 483 839 510 863 q 421 815 457 815 q 358 839 385 815 q 332 903 332 863 q 358 967 332 943 q 421 990 385 990 q 483 967 457 990 q 510 903 510 943 m 240 1139 l 601 1139 l 601 1028 l 240 1028 l 240 1139 z "},"Ȳ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 235 1219 l 682 1219 l 682 1078 l 235 1078 l 235 1219 z "},"ȳ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 158 1007 l 606 1007 l 606 865 l 158 865 l 158 1007 z "},"ȴ":{"ha":707,"x_min":-7,"x_max":696,"o":"m 363 186 q 406 206 376 196 q 475 215 435 215 q 560 200 519 215 q 630 156 600 185 q 678 83 660 126 q 696 -17 696 40 q 676 -123 696 -78 q 621 -198 656 -168 q 540 -242 586 -228 q 442 -257 493 -257 q 298 -223 357 -257 q 204 -128 239 -189 l 99 -243 l -7 -143 l 157 39 q 156 71 156 57 l 156 1043 l 363 1076 l 363 186 m 361 -3 q 379 -75 361 -46 q 442 -104 397 -104 q 499 -79 479 -104 q 518 -25 518 -54 q 498 34 518 10 q 442 58 478 58 q 397 49 419 58 q 361 26 375 40 l 361 -3 z "},"ȵ":{"ha":1072,"x_min":97,"x_max":1061,"o":"m 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 186 q 772 204 743 193 q 840 215 800 215 q 925 200 885 215 q 995 156 965 185 q 1043 83 1025 126 q 1061 -17 1061 40 q 1041 -123 1061 -78 q 986 -198 1021 -168 q 905 -242 951 -228 q 807 -257 858 -257 q 663 -223 722 -257 q 569 -128 604 -189 l 464 -243 l 358 -143 l 522 39 q 521 71 521 57 l 521 388 m 726 -3 q 744 -75 726 -46 q 807 -104 763 -104 q 864 -79 844 -104 q 883 -25 883 -54 q 863 34 883 10 q 807 58 843 58 q 763 50 785 58 q 726 26 740 42 l 726 -3 z "},"ȶ":{"ha":707,"x_min":-7,"x_max":696,"o":"m 363 186 q 406 204 378 193 q 475 215 435 215 q 560 200 519 215 q 630 156 600 185 q 678 83 660 126 q 696 -17 696 40 q 676 -123 696 -78 q 621 -198 656 -168 q 540 -242 586 -228 q 442 -257 493 -257 q 298 -223 357 -257 q 204 -128 239 -189 l 99 -243 l -7 -143 l 157 39 q 156 71 156 57 l 156 913 l 363 946 l 363 731 l 611 731 l 611 558 l 363 558 l 363 186 m 361 -4 q 379 -76 361 -47 q 442 -106 397 -106 q 499 -81 479 -106 q 518 -26 518 -56 q 498 33 518 8 q 442 57 478 57 q 397 49 419 57 q 361 25 375 40 l 361 -4 z "},"ȸ":{"ha":1276,"x_min":63,"x_max":1214,"o":"m 1003 371 q 856 571 1003 571 q 792 563 824 571 q 742 542 761 554 l 742 165 q 781 160 757 163 q 832 158 804 158 q 960 217 917 158 q 1003 371 1003 275 m 639 17 q 542 -8 592 1 q 443 -18 492 -18 q 282 8 353 -18 q 163 84 211 35 q 88 203 114 133 q 63 361 63 274 q 85 522 63 450 q 149 643 107 593 q 251 719 190 693 q 389 746 311 746 q 466 738 432 746 q 535 714 500 729 l 535 1044 l 742 1078 l 742 714 q 814 738 776 729 q 894 746 851 746 q 1032 719 972 746 q 1132 642 1092 692 q 1193 522 1172 592 q 1214 365 1214 451 q 1188 207 1214 278 q 1114 86 1163 136 q 994 9 1065 36 q 833 -18 924 -18 q 736 -8 786 -18 q 639 17 686 1 m 274 371 q 317 217 274 275 q 444 158 360 158 q 496 160 472 158 q 535 165 519 163 l 535 542 q 484 563 515 554 q 421 571 453 571 q 274 371 274 571 z "},"ȹ":{"ha":1276,"x_min":63,"x_max":1214,"o":"m 274 360 q 421 161 274 161 q 484 169 453 161 q 535 190 515 178 l 535 564 q 496 569 519 567 q 444 571 472 571 q 317 513 360 571 q 274 360 274 456 m 638 710 q 735 736 685 725 q 833 747 786 747 q 994 720 924 747 q 1114 644 1065 693 q 1188 524 1163 594 q 1214 365 1214 453 q 1193 211 1214 281 q 1132 92 1172 142 q 1032 14 1092 42 q 894 -14 972 -14 q 814 -6 851 -14 q 742 18 776 3 l 742 -257 l 535 -257 l 535 18 q 463 -6 500 3 q 382 -14 425 -14 q 144 88 226 -14 q 63 365 63 190 q 88 520 63 450 q 163 641 114 590 q 282 719 211 692 q 443 747 353 747 q 540 736 489 747 q 638 710 590 725 m 1003 360 q 960 513 1003 456 q 832 571 917 571 q 781 569 804 571 q 742 564 757 567 l 742 190 q 792 169 761 178 q 856 161 824 161 q 1003 360 1003 161 z "},"Ⱥ":{"ha":1032,"x_min":14,"x_max":1018,"o":"m 717 775 q 862 426 788 614 q 1018 0 936 238 l 786 0 q 754 103 771 50 q 719 208 738 156 l 531 208 l 417 -135 l 299 -100 l 400 208 l 306 208 q 271 103 288 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 304 758 258 653 q 399 963 350 863 l 606 963 l 631 908 l 692 1093 l 813 1060 l 717 775 m 497 740 q 476 683 490 719 q 442 599 461 647 q 402 494 424 551 q 358 374 381 436 l 454 374 l 539 632 l 497 740 m 663 374 q 642 430 653 401 q 622 483 632 458 l 585 374 l 663 374 z "},"Ȼ":{"ha":918,"x_min":69,"x_max":882,"o":"m 803 940 q 847 921 828 931 q 882 903 867 911 l 819 728 q 785 745 804 736 q 743 761 765 754 l 549 172 l 569 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 q 517 -19 533 -19 q 486 -17 501 -18 l 444 -142 l 308 -101 l 346 13 q 140 181 210 61 q 69 482 69 300 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 615 983 589 985 q 664 978 640 981 l 703 1096 l 842 1057 l 803 940 m 294 486 q 322 324 294 396 q 411 211 349 251 l 601 790 q 580 792 590 792 q 558 793 569 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 z "},"ȼ":{"ha":714,"x_min":63,"x_max":672,"o":"m 593 728 q 635 713 615 721 q 672 699 654 706 l 628 533 q 589 547 611 540 q 539 561 567 554 l 408 163 q 464 158 433 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 351 -11 394 -19 l 315 -124 l 207 -92 l 243 22 q 106 160 149 69 q 63 365 63 250 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 460 749 450 750 q 479 749 469 749 l 513 850 l 624 819 l 593 728 m 274 365 q 281 285 274 321 q 308 222 289 249 l 421 569 q 310 503 346 558 q 274 365 274 449 z "},"Ƚ":{"ha":797,"x_min":14,"x_max":769,"o":"m 14 592 l 126 592 l 126 963 l 343 963 l 343 592 l 533 592 l 533 439 l 343 439 l 343 186 l 769 186 l 769 0 l 126 0 l 126 439 l 14 439 l 14 592 z "},"Ⱦ":{"ha":844,"x_min":24,"x_max":956,"o":"m 43 17 l 314 361 l 314 778 l 24 778 l 24 963 l 786 963 l 857 1053 l 956 972 l 531 431 l 531 0 l 314 0 l 314 156 l 142 -64 l 43 17 m 531 636 l 640 778 l 531 778 l 531 636 z "},"ȿ":{"ha":674,"x_min":56,"x_max":617,"o":"m 308 149 q 388 160 365 149 q 411 203 411 172 q 382 247 411 228 q 290 289 353 265 q 202 326 242 307 q 134 373 163 346 q 90 438 106 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 303 485 278 503 q 390 444 328 468 q 502 395 458 419 q 572 343 546 371 q 607 281 597 315 q 617 200 617 246 q 550 52 617 104 q 365 0 483 0 q 347 0 356 0 q 328 1 338 0 q 374 -42 354 -25 q 410 -70 393 -60 q 446 -85 428 -81 q 486 -90 464 -90 q 571 -82 517 -90 l 590 -240 q 518 -253 556 -250 q 463 -257 481 -257 q 369 -240 410 -257 q 294 -197 328 -224 q 232 -136 260 -169 q 176 -69 204 -103 q 119 -7 149 -36 q 56 42 90 22 l 111 185 q 209 156 164 164 q 308 149 254 149 z "},"ɀ":{"ha":694,"x_min":49,"x_max":708,"o":"m 646 592 q 602 543 629 574 q 542 474 575 513 q 472 390 508 435 q 399 300 435 346 q 330 210 363 254 q 272 126 297 165 q 366 74 325 108 q 444 3 407 39 q 517 -58 481 -32 q 597 -85 553 -85 q 689 -76 644 -85 l 708 -240 q 635 -253 674 -250 q 581 -257 597 -257 q 489 -238 529 -257 q 413 -190 449 -219 q 345 -128 378 -161 q 276 -67 313 -96 q 195 -19 239 -37 q 94 0 151 0 l 49 0 l 49 122 q 119 230 78 172 q 205 346 160 288 q 294 459 250 404 q 376 558 339 514 l 65 558 l 65 731 l 646 731 l 646 592 z "},"Ɂ":{"ha":704,"x_min":3,"x_max":658,"o":"m 364 0 l 147 0 l 147 275 q 160 364 147 325 q 192 433 172 403 q 238 487 213 463 q 290 532 264 511 q 346 572 319 554 q 392 609 372 590 q 424 649 413 628 q 436 701 436 671 q 399 772 436 750 q 301 793 363 793 q 238 788 271 793 q 175 774 206 782 q 117 755 144 765 q 72 735 90 744 l 3 910 q 60 936 26 922 q 134 960 94 950 q 217 978 174 971 q 304 985 260 985 q 566 914 474 985 q 658 718 658 843 q 648 630 658 668 q 620 563 638 592 q 579 510 603 533 q 529 467 556 488 q 470 422 500 443 q 417 375 440 400 q 378 319 393 350 q 364 244 364 288 l 364 0 z "},"ɂ":{"ha":625,"x_min":10,"x_max":583,"o":"m 342 0 l 135 0 l 135 160 q 147 238 135 204 q 177 298 158 272 q 220 343 196 324 q 268 379 244 363 q 309 408 289 394 q 345 437 329 422 q 370 469 361 451 q 379 508 379 486 q 358 554 379 536 q 279 572 338 572 q 172 558 228 572 q 74 521 115 543 l 10 685 q 53 704 25 693 q 119 726 82 715 q 197 743 156 736 q 281 750 239 750 q 506 688 428 750 q 583 521 583 626 q 576 448 583 479 q 554 393 568 417 q 523 351 540 369 q 485 319 506 333 q 433 283 458 300 q 387 245 407 265 q 354 201 367 225 q 342 143 342 176 l 342 0 z "},"Ƀ":{"ha":933,"x_min":14,"x_max":871,"o":"m 432 -12 q 274 -8 353 -12 q 111 15 196 -3 l 111 235 l 14 235 l 14 357 l 111 357 l 111 949 q 257 967 178 961 q 404 974 336 974 q 573 960 496 974 q 706 915 650 947 q 792 831 761 883 q 824 703 824 779 q 713 521 824 588 q 838 426 804 486 q 871 292 871 367 q 760 64 871 140 q 432 -12 650 -12 m 322 422 l 322 357 l 453 357 l 453 235 l 322 235 l 322 168 q 374 164 346 165 q 435 163 401 163 q 523 169 483 163 q 591 190 563 175 q 635 231 619 206 q 651 296 651 257 q 601 393 651 364 q 458 422 551 422 l 322 422 m 322 585 l 428 585 q 571 610 528 585 q 614 693 614 636 q 569 775 614 751 q 439 799 525 799 q 379 798 411 799 q 322 794 347 797 l 322 585 z "},"Ʉ":{"ha":1040,"x_min":14,"x_max":1026,"o":"m 14 607 l 126 607 l 126 963 l 343 963 l 343 607 l 697 607 l 697 963 l 914 963 l 914 607 l 1026 607 l 1026 454 l 914 454 l 914 364 q 890 208 914 279 q 818 87 867 138 q 694 8 769 36 q 517 -19 619 -19 q 342 9 415 -19 q 220 88 268 38 q 149 209 172 139 q 126 364 126 279 l 126 454 l 14 454 l 14 607 m 519 168 q 648 217 599 168 q 697 382 697 265 l 697 454 l 343 454 l 343 382 q 356 283 343 324 q 392 216 369 242 q 448 179 415 190 q 519 168 481 168 z "},"Ʌ":{"ha":1003,"x_min":14,"x_max":989,"o":"m 606 963 q 717 710 663 842 q 822 452 772 579 q 915 208 872 325 q 989 0 957 92 l 750 0 q 690 180 722 83 q 623 372 657 276 q 556 556 589 468 q 497 707 524 643 q 437 556 469 643 q 371 372 404 468 q 305 180 338 276 q 244 0 272 83 l 14 0 q 87 208 44 92 q 179 453 129 325 q 285 711 229 581 q 397 963 340 842 l 606 963 z "},"Ɇ":{"ha":842,"x_min":111,"x_max":824,"o":"m 428 0 l 375 -140 l 257 -99 l 294 0 l 111 0 l 111 963 l 658 963 l 703 1078 l 824 1038 l 653 592 l 719 592 l 719 414 l 586 414 l 497 182 l 800 182 l 800 0 l 428 0 m 328 592 l 518 592 l 590 781 l 328 781 l 328 592 m 328 182 l 363 182 l 451 414 l 328 414 l 328 182 z "},"ɇ":{"ha":829,"x_min":63,"x_max":767,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 281 725 219 700 q 408 750 343 750 q 483 744 451 750 l 518 853 l 628 818 l 594 718 q 722 592 678 678 q 767 375 767 506 q 765 338 767 357 q 763 301 764 318 l 460 301 l 417 168 q 500 158 451 158 q 609 169 557 158 q 696 194 661 179 l 724 26 q 681 10 707 18 q 621 -5 654 1 q 549 -15 588 -11 q 472 -19 511 -19 q 413 -17 440 -19 q 358 -8 385 -14 l 321 -125 l 214 -89 l 249 19 q 108 155 154 64 q 63 360 63 246 m 381 429 l 431 582 q 421 583 425 582 q 411 583 417 583 q 349 570 375 583 q 304 535 322 557 q 276 485 286 513 q 261 429 265 458 l 381 429 m 585 429 q 572 491 582 460 q 539 546 561 522 l 501 429 l 585 429 m 265 301 q 278 249 268 274 q 308 207 289 225 l 339 301 l 265 301 z "},"Ɉ":{"ha":764,"x_min":14,"x_max":750,"o":"m 638 585 l 750 585 l 750 432 l 638 432 l 638 324 q 622 190 638 253 q 566 81 606 128 q 459 8 526 35 q 289 -19 392 -19 q 126 3 194 -19 q 14 57 58 26 l 86 225 q 172 183 126 201 q 272 165 218 165 q 386 204 351 165 q 421 335 421 243 l 421 432 l 253 432 l 253 585 l 421 585 l 421 963 l 638 963 l 638 585 z "},"ɉ":{"ha":415,"x_min":-97,"x_max":401,"o":"m -21 454 l 100 454 l 100 731 l 307 731 l 307 454 l 401 454 l 401 325 l 307 325 l 307 26 q 236 -187 307 -118 q 32 -257 165 -257 q -26 -253 13 -257 q -97 -237 -64 -249 l -69 -69 q -31 -79 -49 -76 q 13 -82 -14 -82 q 81 -53 61 -82 q 100 32 100 -24 l 100 325 l -21 325 l -21 454 m 326 942 q 290 852 326 885 q 203 819 253 819 q 116 852 153 819 q 79 942 79 885 q 116 1031 79 999 q 203 1064 153 1064 q 290 1031 253 1064 q 326 942 326 999 z "},"Ɋ":{"ha":1128,"x_min":69,"x_max":1197,"o":"m 803 89 q 689 10 756 39 q 535 -19 622 -19 q 357 13 442 -19 q 208 108 272 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 733 953 647 985 q 883 857 819 921 q 983 699 946 793 q 1019 482 1019 606 l 1019 29 q 1036 -56 1019 -26 q 1096 -85 1053 -85 q 1135 -83 1122 -85 q 1169 -74 1149 -81 l 1197 -242 q 1130 -256 1164 -253 q 1076 -260 1096 -260 q 868 -199 933 -260 q 803 7 803 -137 l 803 89 m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 738 252 671 171 q 804 482 804 333 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 z "},"ɋ":{"ha":839,"x_min":63,"x_max":908,"o":"m 274 360 q 421 161 274 161 q 484 169 453 161 q 535 190 515 178 l 535 564 q 496 569 519 567 q 444 571 472 571 q 317 513 360 571 q 274 360 274 456 m 742 15 q 754 -58 742 -29 q 807 -86 767 -86 q 844 -83 826 -86 q 879 -76 861 -81 l 908 -236 q 871 -246 892 -242 q 830 -252 850 -250 q 792 -256 810 -254 q 765 -257 775 -257 q 592 -203 650 -257 q 535 -24 535 -149 l 535 18 q 463 -6 500 3 q 382 -14 425 -14 q 144 88 226 -14 q 63 365 63 190 q 88 520 63 450 q 163 641 114 590 q 282 719 211 692 q 443 747 353 747 q 522 744 481 747 q 602 735 563 740 q 678 722 642 729 q 742 706 714 714 l 742 15 z "},"Ɍ":{"ha":942,"x_min":14,"x_max":914,"o":"m 14 524 l 126 524 l 126 949 q 273 968 197 963 q 408 974 349 974 q 740 897 625 974 q 856 657 856 819 q 809 492 856 556 q 675 393 763 429 q 736 310 704 357 q 799 213 768 264 q 860 108 831 163 q 914 0 889 53 l 671 0 q 617 96 644 47 q 562 190 590 144 q 506 277 533 236 q 450 351 478 318 l 343 351 l 343 0 l 126 0 l 126 351 l 14 351 l 14 524 m 421 789 q 378 788 397 789 q 343 785 360 786 l 343 524 l 404 524 q 579 554 526 524 q 632 658 632 585 q 578 759 632 729 q 421 789 525 789 z "},"ɍ":{"ha":594,"x_min":14,"x_max":583,"o":"m 549 547 q 483 562 521 554 q 403 569 446 569 q 356 566 383 569 q 315 558 329 563 l 315 385 l 492 385 l 492 256 l 315 256 l 315 0 l 108 0 l 108 256 l 14 256 l 14 385 l 108 385 l 108 692 q 240 728 164 711 q 408 746 315 746 q 449 744 425 746 q 496 738 472 742 q 543 730 519 735 q 583 718 567 725 l 549 547 z "},"Ɏ":{"ha":946,"x_min":14,"x_max":932,"o":"m 14 800 l 106 800 q 63 881 83 840 q 21 963 42 922 l 265 963 q 302 883 282 924 q 343 800 322 842 l 613 800 q 656 883 635 842 q 693 963 676 924 l 925 963 q 883 881 904 922 q 839 800 861 840 l 932 800 l 932 647 l 754 647 q 670 503 714 574 q 582 361 626 432 l 582 0 l 365 0 l 365 358 q 276 501 319 429 q 190 647 232 572 l 14 647 l 14 800 m 478 532 q 507 588 493 560 q 536 647 521 617 l 418 647 q 448 588 433 617 q 478 532 463 560 z "},"ɏ":{"ha":782,"x_min":14,"x_max":768,"o":"m 640 375 q 563 171 603 269 q 478 -24 522 72 q 419 -130 449 -86 q 356 -202 390 -174 q 277 -244 321 -231 q 175 -257 233 -257 q 85 -248 126 -257 q 18 -228 44 -239 l 54 -62 q 111 -78 86 -74 q 164 -82 136 -82 q 249 -52 219 -82 q 300 31 279 -22 q 224 191 263 106 q 146 375 185 276 l 14 375 l 14 504 l 99 504 q 61 614 79 557 q 25 731 43 671 l 242 731 q 269 625 253 683 q 304 504 285 567 l 488 504 q 519 625 504 567 q 546 731 533 683 l 757 731 q 722 615 739 672 q 686 504 704 558 l 768 504 l 768 375 l 640 375 m 400 208 q 426 284 413 242 q 453 375 439 326 l 343 375 q 372 284 358 326 q 400 208 386 242 z "},"ʒ":{"ha":715,"x_min":7,"x_max":660,"o":"m 172 319 q 221 376 194 344 q 273 439 247 407 q 324 502 299 471 q 368 558 349 533 l 43 558 l 43 731 l 631 731 l 631 589 q 590 538 614 567 q 539 476 567 508 q 481 407 511 443 q 421 333 451 371 q 515 295 471 319 q 590 235 558 271 q 641 153 622 200 q 660 49 660 107 q 562 -181 660 -104 q 292 -257 464 -257 q 213 -253 253 -257 q 134 -241 172 -249 q 63 -223 96 -233 q 7 -201 31 -212 l 53 -36 q 103 -54 75 -46 q 160 -68 131 -62 q 220 -76 190 -74 q 278 -79 250 -79 q 408 -43 364 -79 q 451 57 451 -7 q 399 164 451 129 q 247 199 346 199 l 172 199 l 172 319 z "},"̑":{"ha":542,"x_min":46,"x_max":496,"o":"m 271 1050 q 360 1035 318 1050 q 431 992 401 1019 q 478 923 461 964 q 496 831 496 882 l 496 819 l 356 819 q 328 898 351 878 q 271 918 304 918 q 214 898 238 918 q 186 819 190 878 l 46 819 l 46 831 q 63 923 46 882 q 110 992 81 964 q 181 1035 140 1019 q 271 1050 222 1050 z "},"Ѐ":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 392 1332 l 589 1107 l 494 1022 l 265 1215 l 392 1332 z "},"Ё":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 278 1072 q 203 1101 235 1072 q 171 1178 171 1129 q 203 1255 171 1226 q 278 1283 235 1283 q 353 1255 321 1283 q 385 1178 385 1226 q 353 1101 385 1129 q 278 1072 321 1072 m 588 1072 q 513 1101 544 1072 q 481 1178 481 1129 q 513 1255 481 1226 q 588 1283 544 1283 q 663 1255 631 1283 q 694 1178 694 1226 q 663 1101 694 1129 q 588 1072 631 1072 z "},"Ђ":{"ha":1131,"x_min":28,"x_max":1068,"o":"m 825 963 l 825 778 l 507 778 l 507 596 q 541 599 521 597 q 581 603 561 601 q 621 606 601 604 q 654 607 640 607 q 845 585 767 607 q 974 522 924 564 q 1046 422 1024 481 q 1068 288 1068 363 q 1042 153 1068 210 q 972 61 1017 97 q 869 8 928 25 q 742 -10 810 -10 q 690 -8 719 -10 q 638 -1 661 -6 l 644 160 q 708 156 671 156 q 821 182 779 156 q 863 285 863 208 q 811 393 863 360 q 642 426 760 426 q 610 426 628 426 q 573 424 592 425 q 537 421 554 422 q 507 418 519 419 l 507 0 l 290 0 l 290 778 l 28 778 l 28 963 l 825 963 z "},"Ѓ":{"ha":824,"x_min":111,"x_max":768,"o":"m 328 0 l 111 0 l 111 963 l 768 963 l 768 779 l 328 779 l 328 0 m 621 1215 l 392 1022 l 297 1107 l 494 1332 l 621 1215 z "},"Є":{"ha":953,"x_min":69,"x_max":890,"o":"m 69 482 q 107 706 69 611 q 210 863 144 801 q 363 956 275 925 q 551 986 450 986 q 718 967 635 986 q 881 907 801 949 l 817 738 q 710 777 778 757 q 560 797 643 797 q 383 745 447 797 q 303 581 319 693 l 701 581 l 701 397 l 299 397 q 381 227 315 285 q 560 169 447 169 q 644 176 606 169 q 716 194 683 183 q 775 216 749 204 q 821 236 801 228 l 890 63 q 731 1 811 22 q 556 -19 651 -19 q 367 9 456 -19 q 212 99 278 38 q 108 254 146 160 q 69 482 69 349 z "},"Ѕ":{"ha":808,"x_min":51,"x_max":753,"o":"m 374 165 q 449 173 419 165 q 497 194 479 181 q 522 225 515 207 q 529 265 529 243 q 485 344 529 313 q 332 411 440 375 q 238 449 285 428 q 153 503 190 471 q 92 583 115 536 q 68 696 68 629 q 93 816 68 763 q 164 907 118 869 q 275 965 210 944 q 422 985 340 985 q 590 964 519 985 q 707 918 661 943 l 644 747 q 555 784 604 768 q 436 800 506 800 q 324 778 358 800 q 290 713 290 757 q 303 668 290 686 q 338 635 315 650 q 391 609 361 621 q 457 585 421 597 q 588 530 532 557 q 680 467 643 503 q 735 382 717 431 q 753 264 753 333 q 658 55 753 129 q 374 -19 564 -19 q 258 -12 310 -19 q 167 7 207 -4 q 99 31 128 18 q 51 54 71 43 l 113 226 q 219 184 156 203 q 374 165 282 165 z "},"І":{"ha":439,"x_min":111,"x_max":328,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 z "},"Ї":{"ha":439,"x_min":-39,"x_max":485,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 68 1058 q -7 1087 25 1058 q -39 1164 -39 1115 q -7 1241 -39 1213 q 68 1269 25 1269 q 143 1241 111 1269 q 175 1164 175 1213 q 143 1087 175 1115 q 68 1058 111 1058 m 378 1058 q 303 1087 335 1058 q 271 1164 271 1115 q 303 1241 271 1213 q 378 1269 335 1269 q 453 1241 421 1269 q 485 1164 485 1213 q 453 1087 485 1115 q 378 1058 421 1058 z "},"Ј":{"ha":735,"x_min":14,"x_max":638,"o":"m 638 324 q 622 190 638 253 q 566 81 606 128 q 459 8 526 35 q 289 -19 392 -19 q 126 3 194 -19 q 14 57 58 26 l 86 225 q 172 183 126 201 q 272 165 218 165 q 386 204 351 165 q 421 335 421 243 l 421 963 l 638 963 l 638 324 z "},"Љ":{"ha":1569,"x_min":28,"x_max":1507,"o":"m 985 963 l 985 621 l 1056 621 q 1247 604 1163 621 q 1388 550 1331 588 q 1476 453 1446 513 q 1507 307 1507 393 q 1391 69 1507 147 q 1060 -10 1275 -10 q 923 -3 1003 -10 q 768 22 843 4 l 768 779 l 532 779 q 522 592 528 686 q 499 411 515 499 q 453 247 483 324 q 372 112 424 169 q 242 19 319 54 q 51 -19 164 -15 l 28 169 q 182 220 128 181 q 264 342 236 260 q 313 604 299 443 q 328 963 328 765 l 985 963 m 1071 175 q 1153 181 1114 175 q 1222 201 1192 186 q 1269 240 1251 215 q 1288 306 1288 265 q 1271 374 1288 347 q 1224 415 1254 400 q 1149 436 1193 431 q 1049 442 1104 442 l 985 442 l 985 178 q 1022 176 1000 176 q 1071 175 1043 175 z "},"Њ":{"ha":1493,"x_min":111,"x_max":1431,"o":"m 692 963 l 908 963 l 908 621 l 979 621 q 1170 604 1086 621 q 1312 550 1254 588 q 1400 453 1369 513 q 1431 307 1431 393 q 1315 69 1431 147 q 983 -10 1199 -10 q 847 -3 926 -10 q 692 22 767 4 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 m 994 175 q 1076 181 1038 175 q 1145 201 1115 186 q 1193 240 1175 215 q 1211 306 1211 265 q 1194 374 1211 347 q 1147 415 1178 400 q 1072 436 1117 431 q 972 442 1028 442 l 908 442 l 908 178 q 945 176 924 176 q 994 175 967 175 z "},"Ћ":{"ha":1071,"x_min":28,"x_max":1015,"o":"m 825 963 l 825 778 l 507 778 l 507 596 q 574 603 539 600 q 638 607 608 607 q 819 583 746 607 q 935 517 892 560 q 997 413 979 474 q 1015 276 1015 351 l 1015 0 l 799 0 l 799 276 q 760 388 799 351 q 625 424 721 424 q 564 421 596 424 q 507 415 532 418 l 507 0 l 290 0 l 290 778 l 28 778 l 28 963 l 825 963 z "},"Ќ":{"ha":950,"x_min":111,"x_max":936,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 730 292 622 424 q 936 0 838 160 l 679 0 m 736 1215 l 507 1022 l 413 1107 l 610 1332 l 736 1215 z "},"Ѝ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 111 0 l 111 963 l 326 963 l 326 394 q 433 551 376 469 q 548 708 490 632 q 661 850 606 783 q 763 963 717 917 l 939 963 l 939 0 l 725 0 l 725 631 q 494 326 603 488 q 293 0 386 165 l 111 0 m 481 1332 l 678 1107 l 583 1022 l 354 1215 l 481 1332 z "},"Ў":{"ha":906,"x_min":28,"x_max":892,"o":"m 624 282 q 539 131 583 190 q 447 39 494 72 q 351 -7 400 6 q 253 -19 303 -19 q 155 -10 206 -19 q 60 15 104 -1 l 99 189 q 233 164 167 164 q 316 183 276 164 q 392 267 356 203 q 283 449 335 356 q 184 634 231 543 q 98 809 138 725 q 28 963 58 893 l 268 963 q 317 847 290 908 q 375 719 344 785 q 437 587 406 653 q 497 458 468 521 q 582 708 542 581 q 660 963 622 836 l 892 963 q 821 763 856 856 q 753 586 786 669 q 687 428 719 503 q 624 282 654 353 m 485 1043 q 399 1056 440 1043 q 325 1095 358 1069 q 270 1158 292 1121 q 244 1242 249 1194 l 388 1279 q 424 1204 399 1226 q 485 1182 450 1182 q 547 1202 521 1182 q 583 1278 572 1222 l 725 1240 q 699 1156 721 1193 q 645 1094 678 1119 q 571 1056 613 1069 q 485 1043 529 1043 z "},"Џ":{"ha":1014,"x_min":111,"x_max":903,"o":"m 328 183 l 686 183 l 686 963 l 903 963 l 903 0 l 613 0 l 613 -257 l 404 -257 l 404 0 l 111 0 l 111 963 l 328 963 l 328 183 z "},"А":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 z "},"Б":{"ha":903,"x_min":111,"x_max":840,"o":"m 318 779 l 318 621 l 389 621 q 580 604 496 621 q 722 550 664 588 q 810 453 779 513 q 840 307 840 393 q 724 69 840 147 q 393 -10 608 -10 q 260 -3 335 -10 q 111 22 186 4 l 111 963 l 750 963 l 750 779 l 318 779 m 404 175 q 486 181 447 175 q 555 201 525 186 q 603 240 585 215 q 621 306 621 265 q 604 374 621 347 q 557 415 588 400 q 482 436 526 431 q 382 442 438 442 l 318 442 l 318 178 q 355 176 333 176 q 404 175 376 175 z "},"В":{"ha":933,"x_min":111,"x_max":871,"o":"m 432 -12 q 274 -8 353 -12 q 111 15 196 -3 l 111 949 q 257 967 178 961 q 404 974 336 974 q 573 960 496 974 q 706 915 650 947 q 792 831 761 883 q 824 703 824 779 q 713 521 824 588 q 838 426 804 486 q 871 292 871 367 q 760 64 871 140 q 432 -12 650 -12 m 322 419 l 322 171 q 374 167 346 168 q 435 165 401 165 q 592 193 532 165 q 651 296 651 221 q 601 391 651 363 q 458 419 551 419 l 322 419 m 322 585 l 428 585 q 571 610 528 585 q 614 693 614 636 q 569 775 614 751 q 439 799 525 799 q 379 798 411 799 q 322 794 347 797 l 322 585 z "},"Г":{"ha":824,"x_min":111,"x_max":768,"o":"m 328 0 l 111 0 l 111 963 l 768 963 l 768 779 l 328 779 l 328 0 z "},"Д":{"ha":1142,"x_min":28,"x_max":1114,"o":"m 28 183 l 167 183 q 247 360 218 272 q 291 538 276 447 q 309 724 306 628 q 313 925 313 819 l 313 963 l 949 963 l 949 183 l 1114 183 l 1114 -257 l 906 -257 l 906 0 l 236 0 l 236 -257 l 28 -257 l 28 183 m 517 779 q 507 625 514 704 q 486 469 500 546 q 449 319 472 392 q 392 183 426 246 l 738 183 l 738 779 l 517 779 z "},"Е":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 z "},"Ж":{"ha":1365,"x_min":14,"x_max":1351,"o":"m 14 0 q 100 142 54 71 q 194 278 146 213 q 292 402 242 344 q 394 506 343 460 q 286 622 336 565 q 191 735 236 679 q 103 847 146 790 q 15 963 60 903 l 276 963 q 355 856 318 904 q 427 761 392 807 q 499 671 463 715 q 576 576 535 626 l 576 963 l 788 963 l 788 576 q 867 674 829 628 q 942 767 906 721 q 1014 860 978 813 q 1088 963 1050 908 l 1347 963 q 1253 840 1297 897 q 1165 729 1210 783 q 1074 621 1121 675 q 972 507 1028 567 q 1178 273 1085 403 q 1351 0 1271 143 l 1110 0 q 1029 121 1067 65 q 954 228 992 176 q 876 328 917 279 q 788 431 836 378 l 788 0 l 576 0 l 576 431 q 486 322 526 372 q 409 222 446 272 q 335 119 372 172 q 254 0 297 65 l 14 0 z "},"З":{"ha":847,"x_min":35,"x_max":785,"o":"m 197 588 l 343 588 q 413 593 381 588 q 470 613 446 599 q 508 649 494 626 q 522 704 522 671 q 485 775 522 751 q 379 799 447 799 q 246 781 303 799 q 138 735 189 764 l 68 906 q 202 962 124 940 q 381 983 281 983 q 525 966 458 983 q 640 915 592 949 q 716 828 689 881 q 743 707 743 776 q 715 602 743 654 q 628 514 686 550 q 688 475 660 497 q 738 424 717 453 q 772 358 760 394 q 785 275 785 321 q 676 51 785 121 q 372 -19 567 -19 q 276 -12 324 -19 q 184 5 228 -6 q 102 29 140 15 q 35 58 64 43 l 99 228 q 147 209 118 219 q 210 189 175 199 q 282 172 244 179 q 357 165 319 165 q 505 192 449 165 q 561 283 561 218 q 543 349 561 324 q 494 387 525 374 q 420 405 463 400 q 328 410 378 410 l 197 410 l 197 588 z "},"И":{"ha":1050,"x_min":111,"x_max":939,"o":"m 111 0 l 111 963 l 326 963 l 326 394 q 433 551 376 469 q 548 708 490 632 q 661 850 606 783 q 763 963 717 917 l 939 963 l 939 0 l 725 0 l 725 631 q 494 326 603 488 q 293 0 386 165 l 111 0 z "},"Й":{"ha":1050,"x_min":111,"x_max":939,"o":"m 111 0 l 111 963 l 326 963 l 326 394 q 433 551 376 469 q 548 708 490 632 q 661 850 606 783 q 763 963 717 917 l 939 963 l 939 0 l 725 0 l 725 631 q 494 326 603 488 q 293 0 386 165 l 111 0 m 542 1047 q 456 1060 497 1047 q 382 1099 415 1074 q 327 1162 349 1125 q 301 1246 306 1199 l 444 1283 q 481 1208 456 1231 q 542 1186 507 1186 q 603 1206 578 1186 q 640 1282 629 1226 l 782 1244 q 756 1160 778 1197 q 702 1099 735 1124 q 628 1060 669 1074 q 542 1047 586 1047 z "},"К":{"ha":950,"x_min":111,"x_max":936,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 730 292 622 424 q 936 0 838 160 l 679 0 z "},"Л":{"ha":1096,"x_min":28,"x_max":985,"o":"m 532 779 q 522 592 528 686 q 499 411 515 499 q 453 247 483 324 q 372 113 424 171 q 242 19 319 54 q 51 -19 164 -15 l 28 169 q 182 220 128 181 q 264 342 236 260 q 313 603 299 443 q 328 963 328 764 l 985 963 l 985 0 l 768 0 l 768 779 l 532 779 z "},"М":{"ha":1246,"x_min":83,"x_max":1163,"o":"m 367 963 q 424 849 392 917 q 492 703 457 782 q 563 543 528 625 q 628 389 597 461 q 693 543 658 461 q 763 703 728 625 q 831 849 799 782 q 889 963 864 917 l 1086 963 q 1112 748 1100 867 q 1133 501 1124 629 q 1149 243 1142 372 q 1163 0 1157 114 l 951 0 q 940 306 947 140 q 919 639 933 471 q 864 510 894 581 q 803 368 833 439 q 746 233 774 297 q 699 122 718 168 l 547 122 q 500 233 528 168 q 442 368 472 297 q 382 510 413 439 q 326 639 351 581 q 306 306 313 471 q 294 0 299 140 l 83 0 q 97 243 89 114 q 113 501 104 372 q 134 748 122 629 q 160 963 146 867 l 367 963 z "},"Н":{"ha":1019,"x_min":111,"x_max":908,"o":"m 692 963 l 908 963 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"О":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 z "},"П":{"ha":1014,"x_min":111,"x_max":903,"o":"m 903 963 l 903 0 l 686 0 l 686 779 l 328 779 l 328 0 l 111 0 l 111 963 l 903 963 z "},"Р":{"ha":894,"x_min":111,"x_max":846,"o":"m 400 974 q 731 898 615 974 q 846 650 846 822 q 729 399 846 476 q 396 322 613 322 l 328 322 l 328 0 l 111 0 l 111 949 q 261 968 182 963 q 400 974 340 974 m 414 789 q 367 788 390 789 q 328 785 344 786 l 328 507 l 396 507 q 565 538 508 507 q 622 651 622 568 q 608 718 622 692 q 566 760 593 744 q 500 783 539 776 q 414 789 461 789 z "},"С":{"ha":900,"x_min":69,"x_max":872,"o":"m 550 -19 q 192 111 315 -19 q 69 482 69 242 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 743 3 826 25 q 550 -19 660 -19 z "},"Т":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 0 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 z "},"У":{"ha":906,"x_min":28,"x_max":892,"o":"m 624 282 q 539 131 583 190 q 447 39 494 72 q 351 -7 400 6 q 253 -19 303 -19 q 155 -10 206 -19 q 60 15 104 -1 l 99 189 q 233 164 167 164 q 316 183 276 164 q 392 267 356 203 q 283 449 335 356 q 184 634 231 543 q 98 809 138 725 q 28 963 58 893 l 268 963 q 317 847 290 908 q 375 719 344 785 q 437 587 406 653 q 497 458 468 521 q 582 708 542 581 q 660 963 622 836 l 892 963 q 821 763 856 856 q 753 586 786 669 q 687 428 719 503 q 624 282 654 353 z "},"Ф":{"ha":1208,"x_min":64,"x_max":1144,"o":"m 710 294 q 806 317 765 299 q 874 364 847 335 q 915 431 901 393 q 929 513 929 469 q 916 594 929 556 q 876 662 903 632 q 807 711 849 692 q 710 736 765 731 l 710 294 m 710 0 l 499 0 l 499 114 q 306 154 388 119 q 170 244 224 189 q 90 367 117 299 q 64 510 64 436 q 90 651 64 582 q 170 777 117 721 q 306 871 224 833 q 499 917 388 908 l 499 1025 l 710 1025 l 710 917 q 903 871 821 908 q 1038 777 985 833 q 1118 651 1092 721 q 1144 510 1144 582 q 1118 367 1144 436 q 1038 244 1092 299 q 903 154 985 189 q 710 114 821 119 l 710 0 m 499 736 q 401 711 443 731 q 333 662 360 692 q 292 594 306 632 q 279 513 279 556 q 293 431 279 469 q 334 364 307 393 q 402 317 361 335 q 499 294 443 299 l 499 736 z "},"Х":{"ha":938,"x_min":14,"x_max":924,"o":"m 664 0 q 576 163 624 81 q 465 332 528 246 q 416 263 446 307 q 356 168 386 218 q 300 72 326 118 q 261 0 274 26 l 14 0 q 156 236 75 113 q 338 499 238 360 l 28 963 l 290 963 l 478 663 l 661 963 l 908 963 l 603 496 q 799 216 719 344 q 924 0 878 88 l 664 0 z "},"Ц":{"ha":1097,"x_min":111,"x_max":1069,"o":"m 903 183 l 1069 183 l 1069 -257 l 861 -257 l 861 0 l 111 0 l 111 963 l 328 963 l 328 183 l 686 183 l 686 963 l 903 963 l 903 183 z "},"Ч":{"ha":944,"x_min":56,"x_max":833,"o":"m 272 679 q 286 587 272 622 q 326 531 300 551 q 388 502 351 510 q 467 494 424 494 q 538 497 500 494 q 617 506 576 500 l 617 963 l 833 963 l 833 0 l 617 0 l 617 322 q 525 314 569 317 q 440 311 481 311 q 281 327 353 311 q 160 384 210 343 q 83 494 110 425 q 56 668 56 563 l 56 963 l 272 963 l 272 679 z "},"Ш":{"ha":1417,"x_min":111,"x_max":1306,"o":"m 1306 0 l 111 0 l 111 963 l 328 963 l 328 183 l 600 183 l 600 963 l 817 963 l 817 183 l 1089 183 l 1089 963 l 1306 963 l 1306 0 z "},"Щ":{"ha":1500,"x_min":111,"x_max":1472,"o":"m 111 963 l 328 963 l 328 183 l 600 183 l 600 963 l 817 963 l 817 183 l 1089 183 l 1089 963 l 1306 963 l 1306 183 l 1472 183 l 1472 -257 l 1264 -257 l 1264 0 l 111 0 l 111 963 z "},"Ъ":{"ha":1074,"x_min":28,"x_max":1011,"o":"m 1011 315 q 892 70 1011 153 q 557 -12 772 -12 q 420 -4 497 -12 q 268 22 343 4 l 268 779 l 28 779 l 28 963 l 485 963 l 485 643 q 517 644 503 644 q 547 644 532 644 q 897 564 782 644 q 1011 315 1011 483 m 528 461 q 508 461 521 461 q 485 460 496 461 l 485 172 q 519 171 500 171 q 567 171 539 171 q 650 178 610 171 q 721 201 690 185 q 769 246 751 218 q 788 315 788 274 q 769 386 788 358 q 717 431 751 414 q 635 454 683 447 q 528 461 588 461 z "},"Ы":{"ha":1288,"x_min":111,"x_max":1176,"o":"m 839 315 q 808 174 839 235 q 719 71 776 113 q 578 8 661 29 q 394 -12 496 -12 q 262 -4 336 -12 q 111 22 188 4 l 111 963 l 328 963 l 328 643 q 356 644 343 644 q 385 644 369 644 q 725 564 611 644 q 839 315 839 483 m 960 963 l 1176 963 l 1176 0 l 960 0 l 960 963 m 371 461 q 351 461 364 461 q 328 460 339 461 l 328 172 q 363 171 343 171 q 410 171 382 171 q 490 178 453 171 q 556 201 528 185 q 601 246 585 218 q 617 315 617 274 q 553 431 617 400 q 371 461 490 461 z "},"Ь":{"ha":915,"x_min":111,"x_max":853,"o":"m 853 315 q 733 71 853 154 q 400 -12 614 -12 q 263 -4 340 -12 q 111 22 186 4 l 111 963 l 328 963 l 328 643 q 360 644 346 644 q 390 644 375 644 q 739 564 625 644 q 853 315 853 483 m 371 461 q 351 461 364 461 q 328 460 339 461 l 328 172 q 363 171 343 171 q 410 171 382 171 q 493 178 453 171 q 564 201 533 185 q 613 246 594 218 q 631 315 631 274 q 613 386 631 358 q 560 431 594 414 q 478 454 526 447 q 371 461 431 461 z "},"Э":{"ha":946,"x_min":56,"x_max":876,"o":"m 876 482 q 838 254 876 349 q 734 99 800 160 q 579 9 668 38 q 390 -19 490 -19 q 215 1 294 -19 q 56 63 135 22 l 125 236 q 171 216 144 228 q 230 194 197 204 q 302 176 263 183 q 386 169 342 169 q 564 227 497 169 q 647 397 631 285 l 244 397 l 244 581 l 643 581 q 562 744 626 692 q 386 797 497 797 q 236 777 304 797 q 129 738 168 757 l 65 907 q 228 967 144 949 q 394 986 313 986 q 583 956 496 986 q 736 863 671 925 q 839 706 801 801 q 876 482 876 611 z "},"Ю":{"ha":1501,"x_min":111,"x_max":1432,"o":"m 967 986 q 1146 953 1061 986 q 1294 858 1231 921 q 1394 700 1357 794 q 1432 482 1432 606 q 1395 265 1432 358 q 1294 108 1358 171 q 1147 13 1231 44 q 967 -19 1063 -19 q 800 8 879 -19 q 658 89 721 35 q 556 224 596 143 q 504 410 515 304 l 328 410 l 328 0 l 111 0 l 111 963 l 328 963 l 328 593 l 508 593 q 567 763 525 689 q 671 886 610 836 q 808 961 732 936 q 967 986 883 986 m 967 169 q 1145 253 1082 169 q 1208 482 1208 336 q 1145 713 1208 628 q 967 797 1082 797 q 787 713 851 797 q 722 482 722 628 q 787 253 722 336 q 967 169 851 169 z "},"Я":{"ha":957,"x_min":56,"x_max":846,"o":"m 544 786 q 465 780 503 786 q 397 759 426 774 q 350 719 368 744 q 332 654 332 693 q 384 553 332 581 q 539 525 436 525 l 629 525 l 629 785 q 593 786 613 786 q 544 786 574 786 m 554 972 q 691 965 613 972 q 846 942 769 958 l 846 0 l 629 0 l 629 346 l 563 346 q 528 346 544 346 q 488 349 511 346 q 387 192 442 286 q 285 0 332 99 l 56 0 q 109 113 81 57 q 167 218 138 168 q 224 310 196 268 q 275 385 251 353 q 215 422 244 399 q 161 476 185 444 q 123 552 138 508 q 108 653 108 596 q 140 792 108 732 q 228 892 171 851 q 369 952 286 932 q 554 972 451 972 z "},"а":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 z "},"б":{"ha":835,"x_min":63,"x_max":772,"o":"m 735 901 q 638 886 683 890 q 543 874 592 882 q 460 853 501 867 q 383 815 418 839 q 321 753 347 790 q 283 663 294 717 q 458 706 374 706 q 582 683 525 706 q 681 617 639 661 q 748 506 724 572 q 772 353 772 440 q 744 189 772 258 q 669 73 717 119 q 558 3 621 26 q 422 -19 494 -19 q 146 98 229 -19 q 63 443 63 215 q 92 698 63 593 q 179 873 121 803 q 324 983 238 943 q 524 1047 410 1024 q 616 1062 569 1057 q 711 1078 663 1067 l 735 901 m 279 493 q 276 449 276 474 q 275 404 275 424 q 309 219 275 282 q 424 157 343 157 q 528 210 492 157 q 564 351 564 263 q 556 419 564 386 q 529 476 547 451 q 485 517 511 501 q 422 532 458 532 q 347 524 386 532 q 279 493 307 515 z "},"в":{"ha":831,"x_min":97,"x_max":768,"o":"m 304 153 q 356 148 324 150 q 417 146 389 146 q 525 163 486 146 q 564 226 564 181 q 528 288 564 271 q 425 306 493 306 l 304 306 l 304 153 m 421 444 q 504 458 472 444 q 536 515 536 471 q 500 572 536 557 q 406 588 464 588 q 355 585 386 588 q 304 581 324 583 l 304 444 l 421 444 m 414 -14 q 331 -11 375 -14 q 243 -3 286 -8 q 162 8 200 1 q 97 19 124 14 l 97 719 q 162 730 124 725 q 243 739 200 735 q 331 745 286 743 q 414 747 375 747 q 566 729 504 747 q 666 682 628 711 q 721 617 704 653 q 738 544 738 581 q 714 456 738 496 q 654 397 690 415 q 694 374 674 389 q 731 337 714 358 q 758 285 747 315 q 768 217 768 256 q 751 131 768 172 q 692 57 733 89 q 582 6 650 25 q 414 -14 514 -14 z "},"г":{"ha":629,"x_min":97,"x_max":615,"o":"m 615 561 l 304 561 l 304 0 l 97 0 l 97 731 l 615 731 l 615 561 z "},"д":{"ha":942,"x_min":28,"x_max":914,"o":"m 28 169 l 118 169 q 178 287 157 217 q 209 435 200 357 q 219 592 218 514 q 221 731 221 669 l 790 731 l 790 169 l 914 169 l 914 -208 l 738 -208 l 738 0 l 204 0 l 204 -208 l 28 -208 l 28 169 m 583 169 l 583 561 l 414 561 q 408 460 411 513 q 395 358 404 408 q 371 258 386 307 q 331 169 356 210 l 583 169 z "},"е":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 z "},"ж":{"ha":1179,"x_min":14,"x_max":1165,"o":"m 14 0 q 157 207 83 113 q 314 390 231 301 q 155 567 226 481 q 28 731 83 654 l 269 731 q 356 612 306 679 q 489 442 407 544 l 489 731 l 690 731 l 690 442 q 825 612 775 543 q 911 731 875 681 l 1150 731 q 1029 567 1099 651 q 867 392 960 483 q 956 292 917 339 q 1031 200 996 246 q 1099 105 1067 154 q 1165 0 1131 56 l 935 0 q 690 331 831 157 l 690 0 l 489 0 l 489 331 q 354 153 418 236 q 244 0 290 69 l 14 0 z "},"з":{"ha":688,"x_min":42,"x_max":639,"o":"m 63 707 q 175 736 111 725 q 314 747 239 747 q 425 737 371 747 q 522 702 479 726 q 590 638 564 678 q 615 539 615 599 q 590 447 615 485 q 519 383 565 408 q 610 314 581 357 q 639 204 639 271 q 613 99 639 142 q 542 31 586 57 q 440 -8 497 4 q 322 -19 383 -19 q 247 -16 286 -19 q 172 -6 208 -12 q 101 10 135 0 q 42 31 68 19 l 79 192 q 169 165 108 181 q 306 150 229 150 q 431 219 431 150 q 421 258 431 243 q 395 281 411 272 q 358 292 379 289 q 317 294 338 294 l 154 294 l 154 442 l 318 442 q 388 462 368 442 q 408 508 408 482 q 385 556 408 535 q 301 578 363 578 q 186 567 240 578 q 99 546 132 556 l 63 707 z "},"и":{"ha":860,"x_min":97,"x_max":763,"o":"m 763 731 l 763 0 l 554 0 q 556 138 554 69 q 558 265 557 207 q 562 367 560 324 q 564 432 564 411 q 483 317 524 375 q 406 202 443 258 q 337 94 369 146 q 279 0 304 43 l 97 0 l 97 731 l 304 731 q 303 598 304 661 q 301 483 303 535 q 299 394 300 432 q 297 335 297 356 q 451 554 381 457 q 588 731 521 651 l 763 731 z "},"й":{"ha":860,"x_min":97,"x_max":763,"o":"m 763 731 l 763 0 l 554 0 q 556 138 554 69 q 558 265 557 207 q 562 367 560 324 q 564 432 564 411 q 483 317 524 375 q 406 202 443 258 q 337 94 369 146 q 279 0 304 43 l 97 0 l 97 731 l 304 731 q 303 598 304 661 q 301 483 303 535 q 299 394 300 432 q 297 335 297 356 q 451 554 381 457 q 588 731 521 651 l 763 731 m 433 831 q 348 844 389 831 q 274 883 307 857 q 219 945 240 908 q 193 1029 197 982 l 336 1067 q 373 992 347 1014 q 433 969 399 969 q 495 990 469 969 q 532 1065 521 1010 l 674 1028 q 648 944 669 981 q 594 882 626 907 q 519 844 561 857 q 433 831 478 831 z "},"к":{"ha":814,"x_min":97,"x_max":800,"o":"m 304 475 q 369 539 335 504 q 435 608 403 574 q 496 674 467 642 q 547 731 525 706 l 799 731 q 730 658 771 701 q 643 569 689 615 q 551 476 597 522 q 463 394 504 431 q 551 315 504 363 q 644 214 599 268 q 730 104 689 160 q 800 0 771 49 l 564 0 q 507 78 539 38 q 440 159 475 119 q 370 233 406 199 q 304 293 335 268 l 304 0 l 97 0 l 97 731 l 304 731 l 304 475 z "},"л":{"ha":871,"x_min":14,"x_max":774,"o":"m 425 561 q 422 476 424 521 q 414 385 419 431 q 399 297 408 340 q 376 217 390 254 q 334 134 360 172 q 269 65 308 96 q 173 15 229 35 q 42 -12 117 -6 l 14 160 q 124 199 85 174 q 182 265 163 225 q 206 346 197 300 q 219 442 215 392 q 224 546 224 493 q 225 647 225 599 l 225 731 l 774 731 l 774 0 l 567 0 l 567 561 l 425 561 z "},"м":{"ha":1057,"x_min":83,"x_max":974,"o":"m 303 421 q 297 315 300 372 q 292 201 294 258 q 288 91 290 143 q 285 0 286 39 l 83 0 q 92 172 86 76 q 106 367 99 268 q 123 561 114 467 q 140 731 132 656 l 313 731 q 422 529 372 633 q 528 300 472 425 q 642 547 586 433 q 742 731 697 660 l 917 731 q 935 561 926 656 q 952 367 944 467 q 965 172 960 268 q 974 0 971 76 l 768 0 q 760 215 765 108 q 751 422 756 322 l 599 86 l 456 86 l 303 421 z "},"н":{"ha":824,"x_min":97,"x_max":726,"o":"m 726 0 l 519 0 l 519 289 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 519 458 l 519 731 l 726 731 l 726 0 z "},"о":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 z "},"п":{"ha":824,"x_min":97,"x_max":726,"o":"m 726 731 l 726 0 l 519 0 l 519 558 l 304 558 l 304 0 l 97 0 l 97 731 l 726 731 z "},"р":{"ha":839,"x_min":97,"x_max":776,"o":"m 565 360 q 522 513 565 456 q 394 571 479 571 q 343 569 367 571 q 304 564 319 567 l 304 190 q 355 169 324 178 q 418 161 386 161 q 565 360 565 161 m 776 365 q 756 211 776 281 q 694 92 735 142 q 594 14 654 42 q 457 -14 535 -14 q 376 -6 414 -14 q 304 18 339 3 l 304 -257 l 97 -257 l 97 706 q 161 722 125 714 q 237 735 197 729 q 317 744 276 740 q 396 747 358 747 q 557 720 486 747 q 676 644 628 693 q 751 524 725 594 q 776 365 776 453 z "},"с":{"ha":694,"x_min":63,"x_max":653,"o":"m 63 365 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 563 -8 617 3 q 443 -19 508 -19 q 271 10 343 -19 q 152 92 199 40 q 84 213 106 143 q 63 365 63 283 z "},"т":{"ha":729,"x_min":28,"x_max":701,"o":"m 701 561 l 468 561 l 468 0 l 261 0 l 261 561 l 28 561 l 28 731 l 701 731 l 701 561 z "},"у":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 z "},"ф":{"ha":1103,"x_min":63,"x_max":1040,"o":"m 450 551 q 319 500 367 544 q 271 360 271 456 q 317 225 271 268 q 450 172 363 182 l 450 551 m 651 172 q 715 182 683 172 q 773 213 747 192 q 815 271 799 235 q 831 361 831 307 q 815 451 831 415 q 773 509 799 488 q 715 540 747 531 q 651 551 683 550 l 651 172 m 651 -257 l 450 -257 l 450 -3 q 281 35 354 4 q 160 114 208 65 q 87 226 111 163 q 63 363 63 290 q 85 493 63 432 q 156 602 108 554 q 276 681 203 650 q 450 724 350 713 l 450 1043 l 651 1078 l 651 724 q 800 692 729 717 q 924 622 871 667 q 1009 513 978 578 q 1040 361 1040 449 q 1009 207 1040 272 q 925 97 978 142 q 801 28 872 53 q 651 -3 731 4 l 651 -257 z "},"х":{"ha":769,"x_min":14,"x_max":756,"o":"m 388 508 l 532 731 l 746 731 l 496 379 q 647 176 579 275 q 756 0 715 78 l 533 0 q 506 52 522 21 q 468 117 489 83 q 424 185 447 151 q 379 247 401 219 q 337 189 358 221 q 296 124 315 157 q 258 60 276 92 q 225 0 239 28 l 14 0 q 60 82 31 35 q 123 180 89 129 q 194 281 157 231 q 268 376 232 332 q 143 553 206 464 q 19 731 81 643 l 243 731 l 388 508 z "},"ц":{"ha":878,"x_min":97,"x_max":850,"o":"m 726 169 l 850 169 l 850 -208 l 674 -208 l 674 0 l 97 0 l 97 731 l 304 731 l 304 169 l 519 169 l 519 731 l 726 731 l 726 169 z "},"ч":{"ha":789,"x_min":63,"x_max":692,"o":"m 269 731 l 269 494 q 303 421 269 442 q 399 400 338 400 q 438 402 411 400 q 485 407 464 404 l 485 731 l 692 731 l 692 0 l 485 0 l 485 240 q 424 233 457 236 q 375 231 392 231 q 247 244 304 231 q 148 287 189 257 q 85 367 107 317 q 63 493 63 418 l 63 731 l 269 731 z "},"ш":{"ha":1194,"x_min":97,"x_max":1097,"o":"m 97 0 l 97 731 l 304 731 l 304 169 l 494 169 l 494 731 l 701 731 l 701 169 l 890 169 l 890 731 l 1097 731 l 1097 0 l 97 0 z "},"щ":{"ha":1249,"x_min":97,"x_max":1221,"o":"m 1044 0 l 97 0 l 97 731 l 304 731 l 304 169 l 494 169 l 494 731 l 701 731 l 701 169 l 890 169 l 890 731 l 1097 731 l 1097 169 l 1221 169 l 1221 -208 l 1044 -208 l 1044 0 z "},"ъ":{"ha":888,"x_min":28,"x_max":839,"o":"m 511 144 q 601 166 568 144 q 633 236 633 188 q 622 278 633 261 q 592 306 611 296 q 547 321 572 317 q 492 325 521 325 q 446 322 471 325 q 408 317 421 319 l 408 150 q 453 146 425 147 q 511 144 481 144 m 408 471 q 459 480 428 476 q 531 483 490 483 q 653 468 597 483 q 751 422 710 453 q 815 342 792 390 q 839 231 839 294 q 817 120 839 167 q 753 44 794 74 q 653 -1 711 14 q 525 -15 596 -15 q 357 -6 433 -15 q 201 22 281 3 l 201 561 l 28 561 l 28 731 l 408 731 l 408 471 z "},"ы":{"ha":1144,"x_min":97,"x_max":1047,"o":"m 1047 0 l 840 0 l 840 731 l 1047 731 l 1047 0 m 407 144 q 497 166 464 144 q 529 236 529 188 q 518 278 529 261 q 488 306 507 296 q 442 321 468 317 q 388 325 417 325 q 342 322 367 325 q 304 317 317 319 l 304 150 q 349 146 321 147 q 407 144 376 144 m 304 471 q 355 480 324 476 q 426 483 386 483 q 547 468 490 483 q 644 422 603 453 q 710 342 686 390 q 735 231 735 294 q 713 120 735 167 q 649 44 690 74 q 549 -1 607 14 q 421 -15 492 -15 q 253 -6 329 -15 q 97 22 176 3 l 97 731 l 304 731 l 304 471 z "},"ь":{"ha":783,"x_min":97,"x_max":735,"o":"m 407 144 q 497 166 464 144 q 529 236 529 188 q 518 278 529 261 q 488 306 507 296 q 442 321 468 317 q 388 325 417 325 q 342 322 367 325 q 304 317 317 319 l 304 150 q 349 146 321 147 q 407 144 376 144 m 304 471 q 355 480 324 476 q 426 483 386 483 q 548 468 492 483 q 646 422 604 453 q 711 342 688 390 q 735 231 735 294 q 713 120 735 167 q 649 44 690 74 q 549 -1 607 14 q 421 -15 492 -15 q 253 -6 329 -15 q 97 22 176 3 l 97 731 l 304 731 l 304 471 z "},"э":{"ha":724,"x_min":40,"x_max":675,"o":"m 675 369 q 647 204 675 276 q 570 83 619 132 q 452 9 521 35 q 300 -17 383 -17 q 170 -7 231 -17 q 40 29 110 3 l 79 192 q 174 167 119 178 q 276 156 228 156 q 343 163 311 156 q 401 186 375 169 q 444 230 426 203 q 467 296 461 257 l 189 296 l 189 444 l 465 444 q 405 551 454 522 q 285 581 356 581 q 190 572 232 581 q 101 549 147 563 l 63 708 q 183 740 125 731 q 296 750 242 750 q 450 724 381 750 q 569 649 519 699 q 647 529 619 600 q 675 369 675 458 z "},"ю":{"ha":1211,"x_min":97,"x_max":1149,"o":"m 799 -19 q 674 2 732 -19 q 570 63 615 24 q 495 160 525 103 q 454 289 465 218 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 457 458 q 500 579 469 525 q 576 672 531 633 q 677 730 621 710 q 799 750 733 750 q 938 723 874 750 q 1049 646 1001 696 q 1122 525 1096 596 q 1149 367 1149 454 q 1122 208 1149 279 q 1049 85 1096 136 q 938 8 1001 35 q 799 -19 874 -19 m 799 572 q 697 516 735 572 q 660 367 660 460 q 697 216 660 274 q 799 158 735 158 q 900 216 863 158 q 938 367 938 274 q 900 516 938 460 q 799 572 863 572 z "},"я":{"ha":811,"x_min":42,"x_max":714,"o":"m 400 260 q 321 128 356 194 q 254 0 286 63 l 42 0 q 124 165 82 90 q 204 294 165 240 q 111 373 146 325 q 76 493 76 421 q 165 681 76 615 q 408 746 253 746 q 485 743 443 746 q 569 735 528 740 q 649 723 611 729 q 714 710 688 717 l 714 0 l 507 0 l 507 260 l 400 260 m 507 582 q 464 585 493 583 q 414 588 435 588 q 310 562 338 588 q 282 496 282 536 q 293 453 282 471 q 322 426 304 436 q 363 411 340 415 q 407 407 385 407 l 507 407 l 507 582 z "},"ѐ":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 361 1110 l 558 885 l 464 800 l 235 993 l 361 1110 z "},"ё":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 258 836 q 183 865 215 836 q 151 942 151 893 q 183 1019 151 990 q 258 1047 215 1047 q 333 1019 301 1047 q 365 942 365 990 q 333 865 365 893 q 258 836 301 836 m 568 836 q 493 865 525 836 q 461 942 461 893 q 493 1019 461 990 q 568 1047 525 1047 q 643 1019 611 1047 q 675 942 675 990 q 643 865 675 893 q 568 836 611 836 z "},"ђ":{"ha":832,"x_min":25,"x_max":742,"o":"m 25 957 l 111 957 l 111 1044 l 318 1078 l 318 957 l 517 957 l 517 828 l 318 828 l 318 707 q 372 720 339 714 q 435 726 404 726 q 579 703 521 726 q 673 637 638 679 q 724 535 708 594 q 742 404 740 476 l 742 18 q 674 -191 742 -125 q 481 -257 607 -257 q 426 -253 461 -257 q 357 -239 390 -250 l 385 -71 q 420 -80 406 -78 q 461 -82 435 -82 q 518 -56 501 -82 q 535 24 535 -29 l 535 367 q 509 508 535 467 q 414 550 483 550 q 362 545 386 550 q 318 535 338 540 l 318 0 l 111 0 l 111 828 l 25 828 l 25 957 z "},"ѓ":{"ha":629,"x_min":97,"x_max":615,"o":"m 615 561 l 304 561 l 304 0 l 97 0 l 97 731 l 615 731 l 615 561 m 529 993 l 300 800 l 206 885 l 403 1110 l 529 993 z "},"є":{"ha":724,"x_min":49,"x_max":683,"o":"m 49 369 q 76 529 49 458 q 154 649 104 600 q 274 724 204 699 q 428 750 343 750 q 540 740 482 750 q 661 708 599 731 l 622 549 q 534 572 576 563 q 439 581 492 581 q 319 551 368 581 q 258 444 269 522 l 535 444 l 535 296 l 257 296 q 280 229 263 256 q 323 186 297 203 q 381 163 349 169 q 447 156 413 156 q 550 167 496 156 q 644 192 604 178 l 683 29 q 553 -7 613 3 q 424 -17 494 -17 q 272 9 340 -17 q 153 83 203 35 q 76 204 104 132 q 49 369 49 276 z "},"ѕ":{"ha":674,"x_min":54,"x_max":617,"o":"m 307 149 q 388 160 364 149 q 411 203 411 171 q 381 247 411 228 q 288 289 350 265 q 199 326 239 307 q 132 373 160 346 q 89 438 104 400 q 74 528 74 475 q 150 690 74 631 q 360 750 226 750 q 488 738 426 750 q 585 713 549 726 l 549 551 q 470 574 513 564 q 375 583 428 583 q 278 529 278 583 q 282 507 278 517 q 299 488 286 497 q 333 469 311 479 q 388 446 354 458 q 500 397 456 421 q 570 344 544 372 q 606 281 596 315 q 617 200 617 246 q 535 36 617 92 q 306 -19 454 -19 q 144 -3 208 -19 q 54 25 79 14 l 89 193 q 197 160 142 172 q 307 149 253 149 z "},"і":{"ha":401,"x_min":76,"x_max":324,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 324 942 q 287 852 324 885 q 200 819 250 819 q 113 852 150 819 q 76 942 76 885 q 113 1031 76 999 q 200 1064 150 1064 q 287 1031 250 1064 q 324 942 324 999 z "},"ї":{"ha":401,"x_min":-67,"x_max":457,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 0 m 40 836 q -35 865 -3 836 q -67 942 -67 893 q -35 1019 -67 990 q 40 1047 -3 1047 q 115 1019 83 1047 q 147 942 147 990 q 115 865 147 893 q 40 836 83 836 m 350 836 q 275 865 307 836 q 243 942 243 893 q 275 1019 243 990 q 350 1047 307 1047 q 425 1019 393 1047 q 457 942 457 990 q 425 865 457 893 q 350 836 393 836 z "},"ј":{"ha":401,"x_min":-100,"x_max":324,"o":"m 29 -257 q -28 -253 10 -257 q -100 -237 -67 -249 l -72 -69 q -34 -79 -51 -76 q 10 -82 -17 -82 q 78 -53 58 -82 q 97 32 97 -24 l 97 731 l 304 731 l 304 26 q 233 -187 304 -118 q 29 -257 163 -257 m 324 942 q 287 852 324 885 q 200 819 250 819 q 113 852 150 819 q 76 942 76 885 q 113 1031 76 999 q 200 1064 150 1064 q 287 1031 250 1064 q 324 942 324 999 z "},"љ":{"ha":1253,"x_min":14,"x_max":1204,"o":"m 425 561 q 422 476 424 521 q 414 385 419 431 q 399 297 408 340 q 376 217 390 254 q 334 134 360 172 q 269 65 308 96 q 173 15 229 35 q 42 -12 117 -6 l 14 160 q 124 199 85 174 q 182 265 163 225 q 206 346 197 300 q 219 442 215 392 q 224 546 224 493 q 225 647 225 599 l 225 731 l 774 731 l 774 457 q 824 466 793 463 q 896 469 856 469 q 1011 456 956 469 q 1110 415 1067 443 q 1178 340 1153 386 q 1204 231 1204 294 q 1182 120 1204 167 q 1118 44 1160 74 q 1019 -1 1076 14 q 890 -15 961 -15 q 722 -6 799 -15 q 567 22 646 3 l 567 561 l 425 561 m 876 144 q 966 166 933 144 q 999 236 999 188 q 988 278 999 261 q 957 306 976 296 q 912 321 938 317 q 857 325 886 325 q 811 322 836 325 q 774 317 786 319 l 774 150 q 818 146 790 147 q 876 144 846 144 z "},"њ":{"ha":1206,"x_min":97,"x_max":1157,"o":"m 726 457 q 777 466 746 463 q 849 469 808 469 q 964 456 908 469 q 1063 415 1019 443 q 1131 340 1106 386 q 1157 231 1157 294 q 1135 120 1157 167 q 1071 44 1113 74 q 972 -1 1029 14 q 843 -15 914 -15 q 675 -6 751 -15 q 519 22 599 3 l 519 289 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 519 458 l 519 731 l 726 731 l 726 457 m 829 144 q 919 166 886 144 q 951 236 951 188 q 940 278 951 261 q 910 306 929 296 q 865 321 890 317 q 810 325 839 325 q 764 322 789 325 q 726 317 739 319 l 726 150 q 771 146 743 147 q 829 144 799 144 z "},"ћ":{"ha":832,"x_min":25,"x_max":742,"o":"m 25 957 l 111 957 l 111 1044 l 318 1078 l 318 957 l 517 957 l 517 828 l 318 828 l 318 707 q 372 720 339 714 q 435 726 404 726 q 583 702 524 726 q 677 633 642 678 q 727 528 713 589 q 742 392 742 467 l 742 0 l 535 0 l 535 367 q 509 508 535 467 q 414 550 483 550 q 362 545 386 550 q 318 535 338 540 l 318 0 l 111 0 l 111 828 l 25 828 l 25 957 z "},"ќ":{"ha":814,"x_min":97,"x_max":800,"o":"m 304 475 q 369 539 335 504 q 435 608 403 574 q 496 674 467 642 q 547 731 525 706 l 799 731 q 730 658 771 701 q 643 569 689 615 q 551 476 597 522 q 463 394 504 431 q 551 315 504 363 q 644 214 599 268 q 730 104 689 160 q 800 0 771 49 l 564 0 q 507 78 539 38 q 440 159 475 119 q 370 233 406 199 q 304 293 335 268 l 304 0 l 97 0 l 97 731 l 304 731 l 304 475 m 621 993 l 392 800 l 297 885 l 494 1110 l 621 993 z "},"ѝ":{"ha":860,"x_min":97,"x_max":763,"o":"m 763 731 l 763 0 l 554 0 q 556 138 554 69 q 558 265 557 207 q 562 367 560 324 q 564 432 564 411 q 483 317 524 375 q 406 202 443 258 q 337 94 369 146 q 279 0 304 43 l 97 0 l 97 731 l 304 731 q 303 598 304 661 q 301 483 303 535 q 299 394 300 432 q 297 335 297 356 q 451 554 381 457 q 588 731 521 651 l 763 731 m 332 1110 l 529 885 l 435 800 l 206 993 l 332 1110 z "},"ў":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 378 831 q 292 844 333 831 q 218 883 251 857 q 163 945 185 908 q 138 1029 142 982 l 281 1067 q 317 992 292 1014 q 378 969 343 969 q 440 990 414 969 q 476 1065 465 1010 l 618 1028 q 592 944 614 981 q 538 882 571 907 q 464 844 506 857 q 378 831 422 831 z "},"џ":{"ha":824,"x_min":97,"x_max":726,"o":"m 726 0 l 497 0 l 497 -208 l 321 -208 l 321 0 l 97 0 l 97 731 l 304 731 l 304 169 l 519 169 l 519 731 l 726 731 l 726 0 z "},"Ѣ":{"ha":1038,"x_min":21,"x_max":975,"o":"m 975 315 q 944 174 975 235 q 855 71 913 113 q 715 8 797 29 q 531 -12 632 -12 q 398 -4 472 -12 q 247 22 324 4 l 247 743 l 21 743 l 21 914 l 247 914 l 247 1025 l 464 1025 l 464 914 l 728 914 l 728 743 l 464 743 l 464 643 q 492 644 479 644 q 521 644 506 644 q 861 564 747 644 q 975 315 975 483 m 507 461 q 488 461 500 461 q 464 460 475 461 l 464 172 q 499 171 479 171 q 546 171 518 171 q 626 178 589 171 q 692 201 664 185 q 737 246 721 218 q 753 315 753 274 q 690 431 753 400 q 507 461 626 461 z "},"ѣ":{"ha":883,"x_min":14,"x_max":821,"o":"m 14 731 l 183 731 l 183 1044 l 390 1079 l 390 731 l 657 731 l 657 588 l 390 588 l 390 457 q 441 466 410 463 q 513 469 472 469 q 628 456 572 469 q 726 415 683 443 q 795 340 769 386 q 821 231 821 294 q 799 120 821 167 q 735 44 776 74 q 635 -1 693 14 q 507 -15 578 -15 q 339 -6 415 -15 q 183 22 263 3 l 183 588 l 14 588 l 14 731 m 493 144 q 583 166 550 144 q 615 236 615 188 q 604 278 615 261 q 574 306 593 296 q 528 321 554 317 q 474 325 503 325 q 428 322 453 325 q 390 317 403 319 l 390 150 q 435 146 407 147 q 493 144 463 144 z "},"Ѳ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 704 533 q 799 557 747 533 q 717 730 782 665 q 549 794 653 794 q 378 728 443 794 q 297 550 313 663 q 370 587 335 576 q 438 597 406 597 q 517 588 482 597 q 582 565 551 578 q 642 543 613 553 q 704 533 671 533 m 422 421 q 367 413 396 421 q 303 383 339 404 q 386 228 324 285 q 549 171 449 171 q 710 227 647 171 q 794 382 772 283 q 740 363 767 368 q 689 357 714 357 q 610 367 644 357 q 544 389 575 376 q 485 411 514 401 q 422 421 456 421 z "},"ѳ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 267 11 335 -19 q 154 94 200 42 q 85 217 108 147 q 63 367 63 288 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 576 719 510 750 q 688 635 643 688 q 757 513 733 582 q 781 367 781 443 m 319 343 q 264 328 290 343 q 313 197 272 247 q 422 147 354 147 q 525 190 485 147 q 576 307 565 232 q 530 288 553 293 q 492 282 507 282 q 444 292 468 282 q 399 313 421 301 q 357 333 378 324 q 319 343 336 343 m 517 396 q 576 415 546 396 q 563 475 572 444 q 535 529 553 506 q 489 568 517 553 q 422 583 461 583 q 320 544 360 583 q 268 432 281 504 q 308 451 288 446 q 344 457 329 457 q 392 447 368 457 q 437 426 415 438 q 479 406 458 415 q 517 396 500 396 z "},"Ѵ":{"ha":1099,"x_min":14,"x_max":1126,"o":"m 603 0 l 394 0 q 301 208 346 103 q 211 429 257 314 q 117 676 165 544 q 14 963 68 807 l 249 963 q 313 765 282 857 q 374 589 343 674 q 435 423 404 504 q 501 257 465 342 l 686 778 q 713 843 697 808 q 754 908 728 878 q 822 957 781 938 q 928 976 864 976 q 1031 961 983 976 q 1126 903 1078 946 l 1043 758 q 1007 781 1028 772 q 961 789 986 789 q 915 774 933 789 q 885 732 896 758 l 603 0 z "},"ѵ":{"ha":829,"x_min":14,"x_max":843,"o":"m 468 0 l 296 0 q 152 330 228 142 q 14 731 76 518 l 233 731 q 266 614 247 678 q 305 485 285 550 q 346 358 325 419 q 385 250 367 297 l 494 579 q 525 650 508 619 q 565 701 542 681 q 622 731 589 721 q 700 742 654 742 q 769 735 731 742 q 843 714 807 729 l 800 563 q 765 574 779 572 q 739 576 750 576 q 696 564 714 576 q 665 519 678 551 l 468 0 z "},"Ҋ":{"ha":1149,"x_min":111,"x_max":1094,"o":"m 111 0 l 111 963 l 326 963 l 326 394 q 433 551 376 469 q 548 708 490 632 q 661 850 606 783 q 763 963 717 917 l 939 963 l 939 183 l 1092 183 q 1049 -47 1094 72 q 907 -262 1003 -165 l 767 -174 q 827 -85 804 -125 q 865 0 850 -46 l 725 0 l 725 631 q 494 326 603 488 q 293 0 386 165 l 111 0 m 542 1047 q 456 1060 497 1047 q 382 1099 415 1074 q 327 1162 349 1125 q 301 1246 306 1199 l 444 1283 q 481 1208 456 1231 q 542 1186 507 1186 q 603 1206 578 1186 q 640 1282 629 1226 l 782 1244 q 756 1160 778 1197 q 702 1099 735 1124 q 628 1060 669 1074 q 542 1047 586 1047 z "},"ҋ":{"ha":875,"x_min":69,"x_max":861,"o":"m 735 731 l 735 169 l 860 169 q 849 55 861 111 q 813 -53 836 -1 q 758 -151 790 -106 q 686 -231 725 -196 l 558 -150 q 612 -76 592 -110 q 646 0 632 -43 l 526 0 q 528 138 526 69 q 531 265 529 207 q 534 367 532 324 q 536 432 536 411 q 456 317 496 375 q 378 202 415 258 q 309 94 342 146 q 251 0 276 43 l 69 0 l 69 731 l 276 731 q 276 598 276 661 q 274 483 275 535 q 271 394 272 432 q 269 335 269 356 q 423 554 353 457 q 560 731 493 651 l 735 731 m 408 831 q 323 844 364 831 q 249 883 282 857 q 194 945 215 908 q 168 1029 172 982 l 311 1067 q 348 992 322 1014 q 408 969 374 969 q 470 990 444 969 q 507 1065 496 1010 l 649 1028 q 623 944 644 981 q 569 882 601 907 q 494 844 536 857 q 408 831 453 831 z "},"Ҍ":{"ha":917,"x_min":14,"x_max":854,"o":"m 493 872 l 493 719 l 332 719 l 332 621 l 403 621 q 594 604 510 621 q 735 550 678 588 q 824 453 793 513 q 854 307 854 393 q 738 69 854 147 q 407 -10 622 -10 q 274 -3 349 -10 q 125 22 200 4 l 125 719 l 14 719 l 14 872 l 125 872 l 125 963 l 332 963 l 332 872 l 493 872 m 418 175 q 500 181 461 175 q 569 201 539 186 q 617 240 599 215 q 635 306 635 265 q 618 374 635 347 q 571 415 601 400 q 496 436 540 431 q 396 442 451 442 l 332 442 l 332 178 q 369 176 347 176 q 418 175 390 175 z "},"ҍ":{"ha":786,"x_min":14,"x_max":738,"o":"m 14 676 l 100 676 l 100 758 l 307 758 l 307 676 l 506 676 l 506 547 l 307 547 l 307 457 q 358 466 326 463 q 429 469 389 469 q 544 456 489 469 q 643 415 600 443 q 712 340 686 386 q 738 231 738 294 q 715 120 738 167 q 651 44 693 74 q 552 -1 610 14 q 424 -15 494 -15 q 256 -6 332 -15 q 100 22 179 3 l 100 547 l 14 547 l 14 676 m 410 144 q 499 166 467 144 q 532 236 532 188 q 521 278 532 261 q 490 306 510 296 q 445 321 471 317 q 390 325 419 325 q 344 322 369 325 q 307 317 319 319 l 307 150 q 351 146 324 147 q 410 144 379 144 z "},"Ҏ":{"ha":908,"x_min":111,"x_max":860,"o":"m 414 974 q 744 898 629 974 q 860 650 860 822 q 816 483 860 550 q 697 378 772 417 l 772 251 l 628 172 l 535 329 q 478 324 507 326 q 419 322 450 322 l 328 322 l 328 0 l 111 0 l 111 949 q 187 960 146 956 q 268 968 228 965 q 347 972 308 971 q 414 974 385 974 m 428 789 q 374 788 404 789 q 328 785 344 786 l 328 493 l 400 493 q 420 493 411 493 q 439 494 429 493 l 372 610 l 515 690 l 599 546 q 636 651 636 583 q 622 718 636 692 q 580 760 607 744 q 514 783 553 776 q 428 789 475 789 z "},"ҏ":{"ha":853,"x_min":97,"x_max":790,"o":"m 790 365 q 758 176 790 258 q 663 46 725 94 l 738 -83 l 607 -156 l 524 -10 q 498 -12 511 -11 q 471 -14 485 -14 q 383 -6 428 -14 q 304 18 339 3 l 304 -257 l 97 -257 l 97 706 q 163 722 125 714 q 244 735 201 729 q 329 744 286 740 q 410 747 372 747 q 571 720 500 747 q 690 644 642 693 q 765 524 739 594 q 790 365 790 453 m 579 360 q 536 513 579 456 q 408 571 493 571 q 350 569 381 571 q 304 564 319 567 l 304 176 q 362 156 324 164 q 432 147 400 147 l 433 147 l 354 285 l 483 358 l 557 231 q 579 360 579 279 z "},"Ґ":{"ha":796,"x_min":111,"x_max":768,"o":"m 328 0 l 111 0 l 111 963 l 560 963 l 560 1146 l 768 1146 l 768 779 l 328 779 l 328 0 z "},"ґ":{"ha":643,"x_min":97,"x_max":615,"o":"m 615 561 l 304 561 l 304 0 l 97 0 l 97 731 l 439 731 l 439 903 l 615 903 l 615 561 z "},"Ғ":{"ha":881,"x_min":83,"x_max":853,"o":"m 413 560 l 646 560 l 646 407 l 413 407 l 413 0 l 196 0 l 196 407 l 83 407 l 83 560 l 196 560 l 196 963 l 853 963 l 853 779 l 413 779 l 413 560 z "},"ғ":{"ha":729,"x_min":69,"x_max":701,"o":"m 701 561 l 390 561 l 390 382 l 575 382 l 575 253 l 390 253 l 390 0 l 183 0 l 183 253 l 69 253 l 69 382 l 183 382 l 183 731 l 701 731 l 701 561 z "},"Ҕ":{"ha":939,"x_min":111,"x_max":876,"o":"m 328 599 q 468 607 399 607 q 637 578 561 607 q 766 496 713 550 q 848 363 819 442 q 876 185 876 285 q 849 5 876 86 q 772 -135 822 -76 q 647 -225 721 -193 q 478 -257 572 -257 q 426 -256 443 -257 q 390 -251 408 -254 l 394 -86 q 417 -89 406 -87 q 454 -90 429 -90 q 552 -69 511 -90 q 619 -12 593 -49 q 658 76 646 25 q 671 185 671 126 q 652 304 671 257 q 600 380 633 351 q 520 419 567 408 q 418 431 474 431 q 372 430 394 431 q 328 428 350 429 l 328 0 l 111 0 l 111 963 l 757 963 l 757 779 l 328 779 l 328 599 z "},"ҕ":{"ha":790,"x_min":97,"x_max":742,"o":"m 650 561 l 304 561 l 304 438 q 359 444 329 442 q 413 446 389 446 q 546 424 485 446 q 650 358 607 403 q 717 247 693 314 q 742 86 742 179 q 717 -71 742 -6 q 649 -178 693 -136 q 546 -239 606 -219 q 414 -258 486 -258 q 333 -254 375 -258 l 344 -99 q 378 -101 361 -100 q 410 -101 394 -101 q 519 -52 485 -101 q 554 82 554 -3 q 542 181 554 142 q 506 243 529 219 q 449 276 482 267 q 375 286 415 286 q 358 285 368 286 q 337 284 347 285 q 317 282 326 283 q 304 281 308 281 l 304 0 l 97 0 l 97 731 l 650 731 l 650 561 z "},"Җ":{"ha":1419,"x_min":14,"x_max":1392,"o":"m 14 0 q 100 142 54 71 q 194 278 146 213 q 292 402 242 344 q 394 506 343 460 q 286 622 336 565 q 191 735 236 679 q 103 847 146 790 q 15 963 60 903 l 276 963 q 355 856 318 904 q 427 761 392 807 q 499 671 463 715 q 576 576 535 626 l 576 963 l 788 963 l 788 576 q 867 674 829 628 q 942 767 906 721 q 1014 860 978 813 q 1088 963 1050 908 l 1347 963 q 1253 840 1297 897 q 1165 729 1210 783 q 1074 621 1121 675 q 972 507 1028 567 q 1108 363 1044 440 q 1229 199 1171 285 l 1392 199 l 1392 -242 l 1183 -242 l 1183 0 l 1110 0 q 1029 121 1067 65 q 954 228 992 176 q 876 328 917 279 q 788 431 836 378 l 788 0 l 576 0 l 576 431 q 486 322 526 372 q 409 222 446 272 q 335 119 372 172 q 254 0 297 65 l 14 0 z "},"җ":{"ha":1213,"x_min":14,"x_max":1185,"o":"m 14 0 q 157 207 83 113 q 314 390 231 301 q 155 567 226 481 q 28 731 83 654 l 269 731 q 356 612 306 679 q 489 442 407 544 l 489 731 l 690 731 l 690 442 q 825 612 775 543 q 911 731 875 681 l 1150 731 q 1029 567 1099 651 q 867 392 960 483 q 969 276 925 329 q 1054 169 1014 224 l 1185 169 l 1185 -201 l 1008 -201 l 1008 0 l 935 0 q 690 331 831 157 l 690 0 l 489 0 l 489 331 q 354 153 418 236 q 244 0 290 69 l 14 0 z "},"Ҙ":{"ha":847,"x_min":35,"x_max":785,"o":"m 197 588 l 343 588 q 413 593 381 588 q 470 613 446 599 q 508 649 494 626 q 522 704 522 671 q 485 775 522 751 q 379 799 447 799 q 246 781 303 799 q 138 735 189 764 l 68 906 q 202 962 124 940 q 381 983 281 983 q 525 966 458 983 q 640 915 592 949 q 716 828 689 881 q 743 707 743 776 q 715 602 743 654 q 628 514 686 550 q 688 475 660 497 q 738 424 717 453 q 772 358 760 394 q 785 275 785 321 q 706 72 785 142 q 479 -14 626 3 q 460 -56 467 -36 q 521 -108 504 -78 q 538 -171 538 -139 q 485 -272 538 -237 q 346 -307 432 -307 q 285 -302 315 -307 q 224 -289 254 -297 l 249 -168 q 284 -177 258 -171 q 335 -183 310 -183 q 369 -176 354 -183 q 385 -149 383 -168 q 372 -118 386 -132 q 325 -97 357 -104 l 308 -93 q 322 -58 314 -78 q 339 -18 329 -37 q 169 8 250 -14 q 35 58 88 31 l 99 228 q 147 209 118 219 q 210 189 175 199 q 282 172 244 179 q 357 165 319 165 q 505 192 449 165 q 561 283 561 218 q 543 349 561 324 q 494 387 525 374 q 420 405 463 400 q 328 410 378 410 l 197 410 l 197 588 z "},"ҙ":{"ha":688,"x_min":42,"x_max":639,"o":"m 63 707 q 175 736 111 725 q 314 747 239 747 q 425 737 371 747 q 522 702 479 726 q 590 638 564 678 q 615 539 615 599 q 590 447 615 485 q 519 383 565 408 q 610 314 581 357 q 639 204 639 271 q 622 117 639 154 q 574 53 604 79 q 502 10 543 26 q 414 -12 461 -6 q 403 -35 408 -24 q 394 -56 397 -47 q 456 -108 439 -78 q 472 -171 472 -139 q 419 -272 472 -237 q 281 -307 367 -307 q 219 -302 250 -307 q 158 -289 189 -297 l 183 -168 q 219 -177 193 -171 q 269 -183 244 -183 q 303 -176 289 -183 q 319 -149 318 -168 q 306 -118 321 -132 q 260 -97 292 -104 l 243 -93 q 257 -58 249 -78 q 274 -18 265 -37 q 148 -1 210 -14 q 42 31 86 11 l 79 192 q 169 165 108 181 q 306 150 229 150 q 431 219 431 150 q 421 258 431 243 q 395 281 411 272 q 358 292 379 289 q 317 294 338 294 l 154 294 l 154 442 l 318 442 q 388 462 368 442 q 408 508 408 482 q 385 556 408 535 q 301 578 363 578 q 186 567 240 578 q 99 546 132 556 l 63 707 z "},"Қ":{"ha":1024,"x_min":111,"x_max":996,"o":"m 788 -257 l 788 0 l 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 663 368 586 453 q 813 183 739 283 l 996 183 l 996 -257 l 788 -257 z "},"қ":{"ha":842,"x_min":97,"x_max":814,"o":"m 304 475 q 369 539 335 504 q 435 608 403 574 q 496 674 467 642 q 547 731 525 706 l 799 731 q 730 658 771 701 q 643 569 689 615 q 551 476 597 522 q 463 394 504 431 q 569 296 513 356 q 679 169 626 236 l 814 169 l 814 -201 l 638 -201 l 638 0 l 564 0 q 507 78 539 38 q 440 159 475 119 q 370 233 406 199 q 304 293 335 268 l 304 0 l 97 0 l 97 731 l 304 731 l 304 475 z "},"Ҝ":{"ha":1089,"x_min":111,"x_max":1075,"o":"m 529 788 l 529 590 q 606 681 571 638 q 674 769 640 725 q 740 860 707 813 q 810 963 774 907 l 1067 963 q 978 838 1021 894 q 894 730 936 782 q 804 627 851 678 q 701 519 757 576 q 903 293 814 421 q 1075 0 993 165 l 818 0 q 760 106 794 47 q 688 222 726 164 q 608 331 649 279 q 529 419 567 383 l 529 221 l 394 221 l 394 425 l 328 425 l 328 0 l 111 0 l 111 963 l 328 963 l 328 581 l 394 581 l 394 788 l 529 788 z "},"ҝ":{"ha":947,"x_min":97,"x_max":933,"o":"m 467 610 l 467 456 q 578 594 526 526 q 676 731 629 661 l 922 731 q 852 644 890 689 q 773 555 814 599 q 693 471 732 511 q 622 400 654 431 q 709 310 664 360 q 796 206 754 260 q 873 99 838 153 q 933 0 908 46 l 696 0 q 649 75 675 33 q 592 160 622 117 q 531 244 563 203 q 467 317 499 285 l 467 161 l 360 161 l 360 325 l 304 325 l 304 0 l 97 0 l 97 731 l 304 731 l 304 443 l 360 443 l 360 610 l 467 610 z "},"Ҟ":{"ha":983,"x_min":13,"x_max":969,"o":"m 693 0 q 624 98 664 47 q 538 198 585 149 q 442 294 492 247 q 342 379 392 340 l 342 0 l 125 0 l 125 775 l 13 775 l 13 914 l 125 914 l 125 1025 l 342 1025 l 342 914 l 461 914 l 461 775 l 342 775 l 342 571 q 438 665 388 615 q 537 767 488 715 q 631 868 586 818 q 713 963 676 918 l 969 963 q 864 834 915 894 q 759 717 813 774 q 647 606 706 661 q 521 492 589 550 q 744 278 636 396 q 950 0 851 160 l 693 0 z "},"ҟ":{"ha":842,"x_min":3,"x_max":828,"o":"m 3 731 l 100 731 l 100 793 l 307 793 l 307 731 l 411 731 l 411 629 l 307 629 l 307 429 q 449 576 376 497 q 582 731 522 656 l 828 731 q 656 535 742 624 q 486 372 571 447 q 575 286 528 332 q 667 192 622 240 q 749 95 711 144 q 811 0 786 46 l 574 0 q 520 74 551 36 q 453 149 489 113 q 379 219 417 185 q 307 283 342 254 l 307 0 l 100 0 l 100 629 l 3 629 l 3 731 z "},"Ҡ":{"ha":1107,"x_min":28,"x_max":1093,"o":"m 28 963 l 485 963 l 485 599 q 655 784 569 688 q 814 963 740 881 l 1071 963 q 873 738 972 846 q 664 519 774 629 q 887 292 779 424 q 1093 0 994 160 l 836 0 q 767 102 807 47 q 681 212 728 157 q 585 317 635 267 q 485 407 535 368 l 485 0 l 268 0 l 268 779 l 28 779 l 28 963 z "},"ҡ":{"ha":913,"x_min":28,"x_max":899,"o":"m 28 731 l 408 731 l 408 457 q 472 527 439 490 q 535 601 504 564 q 593 671 565 638 q 642 731 621 704 l 888 731 q 818 649 857 693 q 738 560 779 604 q 657 473 696 515 q 588 400 618 431 q 674 310 629 360 q 761 206 719 260 q 838 99 803 153 q 899 0 874 46 l 661 0 q 610 78 639 36 q 547 163 581 121 q 478 243 514 204 q 408 311 443 282 l 408 0 l 201 0 l 201 578 l 28 578 l 28 731 z "},"Ң":{"ha":1121,"x_min":111,"x_max":1093,"o":"m 692 963 l 908 963 l 908 183 l 1093 183 l 1093 -257 l 885 -257 l 885 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"ң":{"ha":882,"x_min":97,"x_max":854,"o":"m 726 169 l 854 169 l 854 -201 l 678 -201 l 678 0 l 519 0 l 519 289 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 519 458 l 519 731 l 726 731 l 726 169 z "},"Ҥ":{"ha":1163,"x_min":111,"x_max":1149,"o":"m 692 963 l 1149 963 l 1149 779 l 908 779 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"ҥ":{"ha":907,"x_min":97,"x_max":893,"o":"m 893 578 l 726 578 l 726 0 l 519 0 l 519 289 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 519 458 l 519 731 l 893 731 l 893 578 z "},"Ҧ":{"ha":1540,"x_min":111,"x_max":1478,"o":"m 903 963 l 903 596 q 987 604 944 601 q 1069 607 1029 607 q 1238 578 1163 607 q 1367 496 1314 550 q 1449 363 1421 442 q 1478 185 1478 285 q 1451 5 1478 86 q 1373 -135 1424 -76 q 1248 -225 1322 -193 q 1079 -257 1174 -257 q 1027 -256 1044 -257 q 992 -251 1010 -254 l 996 -86 q 1019 -89 1007 -87 q 1056 -90 1031 -90 q 1153 -69 1113 -90 q 1221 -12 1194 -49 q 1260 76 1247 25 q 1272 185 1272 126 q 1253 304 1272 257 q 1201 380 1235 351 q 1122 419 1168 408 q 1019 431 1075 431 q 961 429 990 431 q 903 425 932 428 l 903 0 l 686 0 l 686 779 l 328 779 l 328 0 l 111 0 l 111 963 l 903 963 z "},"ҧ":{"ha":1213,"x_min":97,"x_max":1164,"o":"m 726 0 l 519 0 l 519 558 l 304 558 l 304 0 l 97 0 l 97 731 l 726 731 l 726 438 q 781 444 751 442 q 835 446 811 446 q 968 424 907 446 q 1072 358 1029 403 q 1140 247 1115 314 q 1164 86 1164 179 q 1140 -71 1164 -6 q 1072 -178 1115 -136 q 968 -239 1028 -219 q 836 -258 908 -258 q 756 -254 797 -258 l 767 -99 q 800 -101 783 -100 q 832 -101 817 -101 q 942 -52 907 -101 q 976 82 976 -3 q 964 181 976 142 q 928 243 951 219 q 871 276 904 267 q 797 286 838 286 q 780 285 790 286 q 759 284 769 285 q 740 282 749 283 q 726 281 731 281 l 726 0 z "},"Ҩ":{"ha":1111,"x_min":69,"x_max":1063,"o":"m 69 483 q 97 667 69 576 q 188 828 125 757 q 351 942 250 899 q 597 985 451 985 q 704 973 649 985 q 804 942 760 961 l 753 769 q 682 794 722 785 q 601 803 642 803 q 455 778 514 803 q 360 708 396 753 q 310 599 325 663 q 294 457 294 535 q 300 365 294 408 q 322 288 306 322 q 367 227 338 253 q 444 188 396 201 q 435 255 438 221 q 433 325 433 289 q 456 476 433 408 q 520 592 478 544 q 626 667 563 640 q 771 693 689 693 q 901 669 846 693 q 992 603 956 646 q 1045 503 1028 561 q 1063 379 1063 446 q 1045 262 1063 319 q 990 154 1028 204 q 894 66 953 104 q 754 7 836 28 q 872 -53 803 -33 q 1031 -82 942 -72 l 1003 -257 q 701 -173 817 -239 q 521 -10 585 -107 q 305 43 392 -1 q 166 156 218 88 q 92 308 114 224 q 69 483 69 393 m 856 372 q 830 472 856 438 q 763 507 804 507 q 721 498 742 507 q 683 466 700 489 q 656 404 667 443 q 646 306 646 365 q 649 234 646 267 q 657 174 651 201 q 753 199 715 181 q 815 244 792 218 q 847 303 838 271 q 856 372 856 336 z "},"ҩ":{"ha":879,"x_min":63,"x_max":838,"o":"m 438 750 q 538 741 492 750 q 626 713 583 732 l 586 558 q 526 577 558 569 q 454 585 494 585 q 352 566 393 585 q 286 516 311 547 q 251 445 261 485 q 240 364 240 406 q 271 224 240 281 q 368 144 301 168 q 363 182 364 164 q 361 219 361 200 q 425 438 361 367 q 613 510 489 510 q 783 450 728 510 q 838 283 838 390 q 825 198 838 240 q 785 118 813 156 q 716 51 758 81 q 614 6 674 22 q 698 -30 647 -15 q 825 -53 749 -44 l 800 -208 q 657 -188 718 -204 q 550 -146 596 -172 q 471 -85 504 -119 q 411 -11 438 -51 q 150 97 238 1 q 63 367 63 193 q 85 506 63 438 q 153 629 107 575 q 271 717 200 683 q 438 750 342 750 m 526 215 q 528 172 526 192 q 533 133 529 153 q 608 157 581 140 q 651 195 636 174 q 672 240 667 217 q 676 282 676 263 q 656 342 676 322 q 608 361 635 361 q 549 331 571 361 q 526 215 526 300 z "},"Ҫ":{"ha":900,"x_min":69,"x_max":872,"o":"m 600 -18 q 590 -39 594 -29 q 583 -56 586 -49 q 644 -108 628 -78 q 661 -171 661 -139 q 608 -272 661 -237 q 469 -307 556 -307 q 408 -302 439 -307 q 347 -289 378 -297 l 372 -168 q 408 -177 382 -171 q 458 -183 433 -183 q 492 -176 478 -183 q 508 -149 507 -168 q 495 -118 510 -132 q 449 -97 481 -104 l 432 -93 q 447 -55 438 -76 q 464 -14 456 -33 q 169 137 269 10 q 69 482 69 264 q 107 695 69 601 q 210 853 144 789 q 365 951 275 918 q 561 985 456 985 q 672 976 622 985 q 760 955 722 967 q 822 931 797 943 q 858 911 847 918 l 796 736 q 692 776 751 760 q 558 793 633 793 q 460 776 508 793 q 376 723 413 760 q 317 628 339 686 q 294 486 294 569 q 309 362 294 419 q 356 263 324 304 q 442 197 389 221 q 569 172 494 172 q 654 178 617 172 q 721 191 692 183 q 772 208 750 199 q 813 226 794 218 l 872 53 q 762 8 832 28 q 600 -18 692 -12 z "},"ҫ":{"ha":694,"x_min":63,"x_max":653,"o":"m 456 -56 q 517 -108 500 -78 q 533 -171 533 -139 q 481 -272 533 -237 q 342 -307 428 -307 q 281 -302 311 -307 q 219 -289 250 -297 l 244 -168 q 280 -177 254 -171 q 331 -183 306 -183 q 365 -176 350 -183 q 381 -149 379 -168 q 367 -118 382 -132 q 321 -97 353 -104 l 304 -93 q 319 -52 310 -75 q 339 -10 329 -29 q 215 38 267 4 q 128 122 163 72 q 78 233 94 171 q 63 365 63 296 q 88 515 63 444 q 163 637 114 585 q 281 719 211 689 q 439 750 350 750 q 546 740 497 750 q 640 710 594 729 l 597 544 q 533 564 568 556 q 456 572 499 572 q 319 515 364 572 q 274 365 274 458 q 316 213 274 267 q 464 158 358 158 q 544 165 501 158 q 624 188 588 172 l 653 18 q 574 -6 621 4 q 472 -18 528 -15 q 463 -39 467 -29 q 456 -56 458 -49 z "},"Ҭ":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 183 l 707 183 l 707 -257 l 499 -257 l 499 0 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 z "},"ҭ":{"ha":701,"x_min":14,"x_max":688,"o":"m 688 561 l 454 561 l 454 169 l 589 169 l 589 -201 l 413 -201 l 413 0 l 247 0 l 247 561 l 14 561 l 14 731 l 688 731 l 688 561 z "},"Ү":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 z "},"ү":{"ha":763,"x_min":14,"x_max":749,"o":"m 749 722 q 624 360 690 524 q 486 51 558 197 l 486 -257 l 279 -257 l 279 57 q 139 364 208 203 q 14 722 69 525 l 235 722 q 266 597 249 661 q 303 469 283 532 q 344 349 324 407 q 383 240 364 290 q 422 349 401 290 q 461 469 442 407 q 498 597 481 532 q 528 722 515 661 l 749 722 z "},"Ұ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 756 676 836 815 q 586 397 675 538 l 751 397 l 751 244 l 568 244 l 568 0 l 351 0 l 351 244 l 169 244 l 169 397 l 331 397 q 163 676 243 536 q 7 963 82 815 l 258 963 q 354 764 303 863 q 464 567 406 665 z "},"ұ":{"ha":763,"x_min":14,"x_max":749,"o":"m 749 722 q 642 405 699 550 q 524 129 586 260 l 646 129 l 646 0 l 486 0 l 486 -257 l 279 -257 l 279 0 l 114 0 l 114 129 l 243 129 q 122 404 181 260 q 14 722 63 549 l 235 722 q 266 597 249 661 q 303 469 283 532 q 344 349 324 407 q 383 240 364 290 q 422 349 401 290 q 461 469 442 407 q 498 597 481 532 q 528 722 515 661 l 749 722 z "},"Ҳ":{"ha":994,"x_min":14,"x_max":967,"o":"m 664 0 q 576 163 624 81 q 465 332 528 246 q 416 263 446 307 q 356 168 386 218 q 300 72 326 118 q 261 0 274 26 l 14 0 q 156 236 75 113 q 338 497 238 360 l 28 963 l 290 963 l 478 661 l 661 963 l 908 963 l 603 494 q 722 331 669 408 q 818 183 775 253 l 967 183 l 967 -257 l 758 -257 l 758 0 l 664 0 z "},"ҳ":{"ha":815,"x_min":14,"x_max":788,"o":"m 388 511 l 529 731 l 746 731 l 497 379 q 579 272 540 325 q 651 169 618 219 l 788 169 l 788 -201 l 611 -201 l 611 0 l 531 0 q 503 51 519 21 q 466 116 486 82 q 424 183 446 150 q 379 244 401 217 q 338 187 358 218 q 297 123 317 156 q 260 59 278 90 q 228 0 242 28 l 14 0 q 59 82 31 35 q 122 180 88 129 q 194 281 157 231 q 267 376 231 332 q 142 553 204 464 q 19 731 81 643 l 246 731 l 388 511 z "},"Ҵ":{"ha":1304,"x_min":28,"x_max":1263,"o":"m 1096 183 l 1263 183 l 1263 -257 l 1054 -257 l 1054 0 l 276 0 l 276 778 l 28 778 l 28 963 l 742 963 l 742 778 l 493 778 l 493 183 l 879 183 l 879 963 l 1096 963 l 1096 183 z "},"ҵ":{"ha":968,"x_min":14,"x_max":940,"o":"m 817 169 l 940 169 l 940 -208 l 764 -208 l 764 0 l 160 0 l 160 560 l 14 560 l 14 731 l 513 731 l 513 560 l 367 560 l 367 169 l 610 169 l 610 731 l 817 731 l 817 169 z "},"Ҷ":{"ha":1006,"x_min":69,"x_max":964,"o":"m 286 679 q 300 587 286 622 q 340 531 314 551 q 401 502 365 510 q 481 494 438 494 q 552 497 514 494 q 631 506 590 500 l 631 963 l 847 963 l 847 183 l 964 183 l 964 -257 l 756 -257 l 756 0 l 631 0 l 631 322 q 539 314 583 317 q 454 311 494 311 q 295 327 367 311 q 174 384 224 343 q 97 494 124 425 q 69 668 69 563 l 69 963 l 286 963 l 286 679 z "},"ҷ":{"ha":818,"x_min":42,"x_max":804,"o":"m 249 731 l 249 494 q 283 421 249 442 q 378 400 317 400 q 417 402 390 400 q 464 407 443 404 l 464 731 l 671 731 l 671 169 l 804 169 l 804 -201 l 628 -201 l 628 0 l 464 0 l 464 240 q 403 233 436 236 q 354 231 371 231 q 226 244 283 231 q 127 287 168 257 q 64 367 86 317 q 42 493 42 418 l 42 731 l 249 731 z "},"Ҹ":{"ha":944,"x_min":69,"x_max":833,"o":"m 532 657 l 532 496 q 577 500 556 497 q 617 506 599 503 l 617 963 l 833 963 l 833 0 l 617 0 l 617 321 q 532 313 579 315 l 532 149 l 397 149 l 397 313 q 233 347 297 319 q 133 421 169 375 q 83 529 97 467 q 69 668 69 592 l 69 963 l 286 963 l 286 668 q 309 556 286 597 q 397 501 332 515 l 397 657 l 532 657 z "},"ҹ":{"ha":781,"x_min":42,"x_max":711,"o":"m 443 519 l 443 401 q 476 403 461 403 q 504 407 492 404 l 504 731 l 711 731 l 711 0 l 504 0 l 504 240 q 474 236 489 238 q 443 233 458 235 l 443 115 l 336 115 l 336 231 q 210 248 265 233 q 118 294 156 263 q 61 374 81 325 q 42 493 42 422 l 42 731 l 249 731 l 249 494 q 268 431 249 451 q 336 403 288 410 l 336 519 l 443 519 z "},"Һ":{"ha":972,"x_min":111,"x_max":889,"o":"m 672 294 q 663 372 672 339 q 631 426 654 404 q 570 458 608 447 q 472 468 532 468 q 397 465 436 468 q 328 457 357 463 l 328 0 l 111 0 l 111 963 l 328 963 l 328 642 q 403 649 363 647 q 488 651 444 651 q 688 626 610 651 q 811 555 767 601 q 872 442 856 508 q 889 294 889 376 l 889 0 l 672 0 l 672 294 z "},"һ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 0 l 97 1044 l 304 1078 l 304 728 q 358 741 325 735 q 421 747 390 747 q 569 723 510 747 q 663 654 628 699 q 713 549 699 610 q 728 413 728 488 l 728 0 l 521 0 l 521 388 q 495 529 521 488 q 400 571 469 571 q 348 566 372 571 q 304 556 324 561 l 304 0 l 97 0 z "},"Ҽ":{"ha":1222,"x_min":14,"x_max":1153,"o":"m 506 414 q 533 299 513 346 q 587 222 553 251 q 671 180 621 193 q 789 167 721 167 q 867 174 831 167 q 937 190 904 181 q 995 210 969 200 q 1039 229 1021 221 l 1094 60 q 1047 36 1078 50 q 975 10 1017 22 q 882 -12 933 -3 q 775 -21 831 -21 q 559 14 650 -21 q 408 109 468 49 q 316 252 347 169 q 279 432 285 335 q 168 456 217 440 q 85 499 119 472 q 32 567 50 526 q 14 665 14 608 q 19 720 14 689 q 31 774 24 751 l 194 751 q 189 716 190 732 q 188 693 188 700 q 207 640 188 664 q 288 604 226 615 q 342 770 303 699 q 438 889 381 842 q 569 960 496 936 q 729 983 643 983 q 903 953 825 983 q 1036 862 981 922 q 1122 711 1092 801 q 1153 501 1153 621 q 1149 458 1153 486 q 1143 414 1146 429 l 506 414 m 928 592 q 868 745 919 690 q 728 800 817 800 q 637 783 675 800 q 573 738 599 767 q 533 672 547 710 q 513 592 518 635 l 928 592 z "},"ҽ":{"ha":983,"x_min":14,"x_max":921,"o":"m 176 546 q 189 494 176 515 q 244 461 201 474 q 292 588 258 533 q 372 678 326 642 q 473 732 418 714 q 585 750 528 750 q 831 655 740 750 q 921 375 921 560 q 919 335 921 357 q 917 297 918 314 l 447 297 q 507 196 454 233 q 649 158 560 158 q 760 169 706 158 q 850 194 815 179 l 878 26 q 833 10 861 18 q 772 -5 806 1 q 699 -15 738 -11 q 621 -19 660 -19 q 460 6 529 -19 q 342 76 390 31 q 268 182 294 121 q 236 315 242 243 q 66 386 118 333 q 14 550 14 439 q 17 588 14 567 q 26 633 19 610 l 183 614 q 177 574 178 594 q 176 546 176 553 m 721 439 q 712 490 719 465 q 688 535 704 515 q 648 567 672 554 q 588 579 624 579 q 528 567 553 579 q 486 536 503 556 q 460 491 469 517 q 447 439 451 465 l 721 439 z "},"Ҿ":{"ha":1222,"x_min":14,"x_max":1153,"o":"m 506 414 q 533 299 513 346 q 587 222 553 251 q 671 180 621 193 q 789 167 721 167 q 867 174 831 167 q 937 190 904 181 q 995 210 969 200 q 1039 229 1021 221 l 1094 60 q 1053 40 1079 51 q 994 16 1028 28 q 917 -5 960 4 q 828 -18 875 -14 l 828 -257 l 619 -257 l 619 -4 q 473 56 535 15 q 369 153 411 96 q 306 281 328 210 q 279 432 283 351 q 168 456 217 440 q 85 499 119 472 q 32 567 50 526 q 14 665 14 608 q 19 720 14 689 q 31 774 24 751 l 194 751 q 189 716 190 732 q 188 693 188 700 q 207 640 188 664 q 288 604 226 615 q 342 770 303 699 q 438 889 381 842 q 569 960 496 936 q 729 983 643 983 q 903 953 825 983 q 1036 862 981 922 q 1122 711 1092 801 q 1153 501 1153 621 q 1149 458 1153 486 q 1143 414 1146 429 l 506 414 m 928 592 q 868 745 919 690 q 728 800 817 800 q 637 783 675 800 q 573 738 599 767 q 533 672 547 710 q 513 592 518 635 l 928 592 z "},"ҿ":{"ha":983,"x_min":14,"x_max":921,"o":"m 514 -10 q 315 106 382 18 q 236 315 247 193 q 66 386 118 333 q 14 550 14 439 q 17 588 14 567 q 26 633 19 610 l 183 614 q 177 574 178 594 q 176 546 176 553 q 189 494 176 515 q 244 461 201 474 q 292 588 258 533 q 372 678 326 642 q 473 732 418 714 q 585 750 528 750 q 831 655 740 750 q 921 375 921 560 q 919 335 921 357 q 917 297 918 314 l 447 297 q 507 196 454 233 q 649 158 560 158 q 760 169 706 158 q 850 194 815 179 l 878 26 q 801 1 853 13 q 690 -15 750 -10 l 690 -208 l 514 -208 l 514 -10 m 721 439 q 712 490 719 465 q 688 535 704 515 q 648 567 672 554 q 588 579 624 579 q 528 567 553 579 q 486 536 503 556 q 460 491 469 517 q 447 439 451 465 l 721 439 z "},"Ӏ":{"ha":439,"x_min":111,"x_max":328,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 z "},"Ӂ":{"ha":1365,"x_min":14,"x_max":1351,"o":"m 14 0 q 100 142 54 71 q 194 278 146 213 q 292 402 242 344 q 394 506 343 460 q 286 622 336 565 q 191 735 236 679 q 103 847 146 790 q 15 963 60 903 l 276 963 q 355 856 318 904 q 427 761 392 807 q 499 671 463 715 q 576 576 535 626 l 576 963 l 788 963 l 788 576 q 867 674 829 628 q 942 767 906 721 q 1014 860 978 813 q 1088 963 1050 908 l 1347 963 q 1253 840 1297 897 q 1165 729 1210 783 q 1074 621 1121 675 q 972 507 1028 567 q 1178 273 1085 403 q 1351 0 1271 143 l 1110 0 q 1029 121 1067 65 q 954 228 992 176 q 876 328 917 279 q 788 431 836 378 l 788 0 l 576 0 l 576 431 q 486 322 526 372 q 409 222 446 272 q 335 119 372 172 q 254 0 297 65 l 14 0 m 681 1043 q 595 1056 636 1043 q 521 1095 554 1069 q 466 1158 488 1121 q 440 1242 444 1194 l 583 1279 q 620 1204 594 1226 q 681 1182 646 1182 q 742 1202 717 1182 q 779 1278 768 1222 l 921 1240 q 895 1156 917 1193 q 841 1094 874 1119 q 767 1056 808 1069 q 681 1043 725 1043 z "},"ӂ":{"ha":1179,"x_min":14,"x_max":1165,"o":"m 14 0 q 157 207 83 113 q 314 390 231 301 q 155 567 226 481 q 28 731 83 654 l 269 731 q 356 612 306 679 q 489 442 407 544 l 489 731 l 690 731 l 690 442 q 825 612 775 543 q 911 731 875 681 l 1150 731 q 1029 567 1099 651 q 867 392 960 483 q 956 292 917 339 q 1031 200 996 246 q 1099 105 1067 154 q 1165 0 1131 56 l 935 0 q 690 331 831 157 l 690 0 l 489 0 l 489 331 q 354 153 418 236 q 244 0 290 69 l 14 0 m 588 831 q 502 844 543 831 q 428 883 461 857 q 373 945 394 908 q 347 1029 351 982 l 490 1067 q 527 992 501 1014 q 588 969 553 969 q 649 990 624 969 q 686 1065 675 1010 l 828 1028 q 802 944 824 981 q 748 882 781 907 q 674 844 715 857 q 588 831 632 831 z "},"Ӄ":{"ha":976,"x_min":111,"x_max":907,"o":"m 497 -257 q 445 -256 463 -257 q 410 -251 428 -254 l 414 -86 q 437 -89 425 -87 q 474 -90 449 -90 q 568 -70 528 -90 q 635 -17 608 -50 q 676 60 663 17 q 689 150 689 104 q 666 265 689 218 q 605 342 643 313 q 515 384 567 371 q 408 397 464 397 q 328 393 367 397 l 328 0 l 111 0 l 111 963 l 328 963 l 328 571 l 650 963 l 907 963 q 741 765 829 871 q 561 563 653 660 q 694 513 633 547 q 800 428 756 479 q 869 308 844 378 q 894 153 894 239 q 869 -9 894 65 q 793 -139 843 -83 q 669 -226 743 -194 q 497 -257 594 -257 z "},"ӄ":{"ha":797,"x_min":97,"x_max":758,"o":"m 304 0 l 97 0 l 97 731 l 304 731 l 304 438 q 360 505 328 464 q 424 589 392 546 q 487 670 457 632 q 535 731 517 708 l 758 731 q 704 665 736 704 q 637 583 672 625 q 567 499 601 540 q 506 426 532 457 q 682 324 615 406 q 749 86 749 242 q 724 -71 749 -6 q 656 -178 700 -136 q 553 -239 613 -219 q 421 -258 493 -258 q 340 -254 382 -258 l 351 -99 q 385 -101 368 -100 q 417 -101 401 -101 q 526 -52 492 -101 q 561 82 561 -3 q 547 176 561 138 q 508 240 533 215 q 449 275 483 264 q 375 286 415 286 q 341 285 363 286 q 304 283 319 285 l 304 0 z "},"Ӆ":{"ha":1153,"x_min":14,"x_max":1126,"o":"m 518 779 q 508 592 514 686 q 485 411 501 499 q 440 247 469 324 q 358 112 410 169 q 228 19 306 54 q 38 -19 150 -15 l 14 169 q 168 220 114 181 q 250 342 222 260 q 299 604 285 443 q 314 963 314 765 l 971 963 l 971 183 l 1124 183 q 1081 -47 1126 72 q 939 -262 1035 -165 l 799 -174 q 859 -85 836 -125 q 897 0 882 -46 l 754 0 l 754 779 l 518 779 z "},"ӆ":{"ha":938,"x_min":14,"x_max":910,"o":"m 425 561 q 422 476 424 521 q 414 385 419 431 q 399 297 408 340 q 376 217 390 254 q 334 134 360 172 q 269 65 308 96 q 173 15 229 35 q 42 -12 117 -6 l 14 160 q 124 199 85 174 q 182 265 163 225 q 206 346 197 300 q 219 442 215 392 q 224 546 224 493 q 225 647 225 599 l 225 731 l 774 731 l 774 169 l 908 169 q 897 55 910 111 q 862 -53 885 -1 q 806 -151 839 -106 q 735 -231 774 -196 l 607 -150 q 660 -76 640 -110 q 694 0 681 -43 l 567 0 l 567 561 l 425 561 z "},"Ӈ":{"ha":1019,"x_min":111,"x_max":908,"o":"m 692 963 l 908 963 l 908 24 q 844 -190 908 -121 q 638 -260 781 -260 q 584 -256 618 -260 q 517 -242 550 -253 l 544 -74 q 578 -83 565 -81 q 618 -85 592 -85 q 676 -56 661 -85 q 692 29 692 -26 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"ӈ":{"ha":833,"x_min":97,"x_max":736,"o":"m 529 289 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 529 458 l 529 731 l 736 731 l 736 18 q 669 -190 736 -124 q 475 -257 601 -257 q 420 -253 456 -257 q 351 -239 385 -250 l 379 -71 q 415 -80 400 -78 q 456 -82 429 -82 q 513 -56 496 -82 q 529 24 529 -29 l 529 289 z "},"Ӊ":{"ha":1092,"x_min":111,"x_max":1065,"o":"m 692 963 l 908 963 l 908 183 l 1063 183 q 1019 -47 1065 72 q 878 -262 974 -165 l 738 -174 q 798 -85 775 -125 q 836 0 821 -46 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"ӊ":{"ha":871,"x_min":97,"x_max":843,"o":"m 726 169 l 842 169 q 831 55 843 111 q 795 -53 818 -1 q 740 -151 772 -106 q 668 -231 707 -196 l 540 -150 q 594 -76 574 -110 q 628 0 614 -43 l 519 0 l 519 289 l 304 289 l 304 0 l 97 0 l 97 731 l 304 731 l 304 458 l 519 458 l 519 731 l 726 731 l 726 169 z "},"Ӌ":{"ha":944,"x_min":56,"x_max":833,"o":"m 272 679 q 286 587 272 622 q 326 531 300 551 q 388 502 351 510 q 467 494 424 494 q 538 497 500 494 q 617 506 576 500 l 617 963 l 833 963 l 833 0 l 657 0 l 657 -257 l 449 -257 l 449 142 l 617 142 l 617 322 q 525 314 569 317 q 440 311 481 311 q 281 327 353 311 q 160 384 210 343 q 83 494 110 425 q 56 668 56 563 l 56 963 l 272 963 l 272 679 z "},"ӌ":{"ha":789,"x_min":63,"x_max":692,"o":"m 269 731 l 269 526 q 303 453 269 474 q 399 432 338 432 q 438 434 411 432 q 485 439 464 436 l 485 731 l 692 731 l 692 0 l 525 0 l 525 -201 l 349 -201 l 349 163 l 485 163 l 485 272 q 424 265 457 268 q 375 263 392 263 q 247 276 304 263 q 148 319 189 289 q 85 399 107 349 q 63 525 63 450 l 63 731 l 269 731 z "},"Ӎ":{"ha":1322,"x_min":83,"x_max":1310,"o":"m 367 963 q 424 849 392 917 q 492 703 457 782 q 563 543 528 625 q 628 389 597 461 q 693 543 658 461 q 763 703 728 625 q 831 849 799 782 q 889 963 864 917 l 1086 963 q 1107 791 1097 885 q 1125 596 1117 697 q 1140 390 1133 494 q 1153 183 1147 285 l 1307 183 q 1264 -47 1310 72 q 1122 -262 1218 -165 l 982 -174 q 1042 -85 1019 -125 q 1081 0 1065 -46 l 951 0 q 940 306 947 140 q 919 639 933 471 q 864 510 894 581 q 803 368 833 439 q 746 233 774 297 q 699 122 718 168 l 547 122 q 500 233 528 168 q 442 368 472 297 q 382 510 413 439 q 326 639 351 581 q 306 306 313 471 q 294 0 299 140 l 83 0 q 97 243 89 114 q 113 501 104 372 q 134 748 122 629 q 160 963 146 867 l 367 963 z "},"ӎ":{"ha":1103,"x_min":69,"x_max":1089,"o":"m 289 421 q 283 315 286 372 q 278 201 281 258 q 274 91 276 143 q 271 0 272 39 l 69 0 q 78 172 72 76 q 92 367 85 268 q 109 561 100 467 q 126 731 118 656 l 299 731 q 408 529 358 633 q 514 300 458 425 q 628 547 572 433 q 728 731 683 660 l 903 731 q 917 606 910 674 q 930 464 924 538 q 942 315 936 390 q 951 169 947 240 l 1088 169 q 1076 55 1089 111 q 1041 -53 1064 -1 q 985 -151 1018 -106 q 914 -231 953 -196 l 786 -150 q 840 -76 819 -110 q 874 0 860 -43 l 754 0 q 747 215 751 108 q 738 422 742 322 l 585 86 l 442 86 l 289 421 z "},"ӏ":{"ha":401,"x_min":97,"x_max":304,"o":"m 97 963 l 304 963 l 304 0 l 97 0 l 97 963 z "},"Ӑ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 493 1043 q 408 1056 449 1043 q 333 1095 367 1069 q 278 1158 300 1121 q 253 1242 257 1194 l 396 1279 q 433 1204 407 1226 q 493 1182 458 1182 q 555 1202 529 1182 q 592 1278 581 1222 l 733 1240 q 708 1156 729 1193 q 653 1094 686 1119 q 579 1056 621 1069 q 493 1043 538 1043 z "},"ӑ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 385 831 q 299 844 340 831 q 225 883 258 857 q 170 945 192 908 q 144 1029 149 982 l 288 1067 q 324 992 299 1014 q 385 969 350 969 q 447 990 421 969 q 483 1065 472 1010 l 625 1028 q 599 944 621 981 q 545 882 578 907 q 471 844 513 857 q 385 831 429 831 z "},"Ӓ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 336 1058 q 261 1087 293 1058 q 229 1164 229 1115 q 261 1241 229 1213 q 336 1269 293 1269 q 411 1241 379 1269 q 443 1164 443 1213 q 411 1087 443 1115 q 336 1058 379 1058 m 646 1058 q 571 1087 603 1058 q 539 1164 539 1115 q 571 1241 539 1213 q 646 1269 603 1269 q 721 1241 689 1269 q 753 1164 753 1213 q 721 1087 753 1115 q 646 1058 689 1058 z "},"ӓ":{"ha":768,"x_min":49,"x_max":678,"o":"m 376 144 q 435 146 407 144 q 479 150 463 147 l 479 307 q 442 313 467 310 q 396 315 417 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 360 750 q 513 729 451 750 q 610 669 574 708 q 663 575 647 631 q 678 451 678 519 l 678 21 q 554 -2 633 11 q 363 -15 475 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 461 q 447 546 479 514 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 214 836 q 139 865 171 836 q 107 942 107 893 q 139 1019 107 990 q 214 1047 171 1047 q 289 1019 257 1047 q 321 942 321 990 q 289 865 321 893 q 214 836 257 836 m 524 836 q 449 865 481 836 q 417 942 417 893 q 449 1019 417 990 q 524 1047 481 1047 q 599 1019 567 1047 q 631 942 631 990 q 599 865 631 893 q 524 836 567 836 z "},"Ӕ":{"ha":1381,"x_min":14,"x_max":1332,"o":"m 681 228 l 375 228 q 311 114 346 175 q 251 0 276 53 l 14 0 q 329 542 183 304 q 606 963 475 781 l 1300 963 l 1300 781 l 890 781 l 890 592 l 1251 592 l 1251 414 l 890 414 l 890 182 l 1332 182 l 1332 0 l 681 0 l 681 228 m 681 753 q 631 676 658 721 q 573 584 603 632 q 515 488 543 536 q 463 400 486 439 l 681 400 l 681 753 z "},"ӕ":{"ha":1214,"x_min":49,"x_max":1151,"o":"m 360 750 q 438 744 403 750 q 499 727 472 739 q 549 697 526 715 q 590 651 571 678 q 697 727 638 704 q 825 750 757 750 q 960 726 900 750 q 1063 654 1019 701 q 1128 537 1106 607 q 1151 375 1151 467 q 1150 335 1151 357 q 1147 297 1149 314 l 678 297 q 738 196 685 233 q 879 158 790 158 q 991 169 936 158 q 1081 194 1046 179 l 1108 26 q 1064 10 1092 18 q 1002 -5 1036 1 q 929 -15 968 -11 q 851 -19 890 -19 q 708 -1 769 -19 q 604 46 647 17 q 363 -15 500 -15 q 234 -3 292 -15 q 135 38 176 10 q 71 113 93 67 q 49 225 49 158 q 74 333 49 289 q 143 404 100 378 q 242 442 186 431 q 357 454 297 454 q 428 451 397 454 q 479 442 460 447 l 479 465 q 447 548 479 518 q 336 578 415 578 q 232 570 283 578 q 143 549 181 563 l 117 715 q 162 727 135 721 q 221 738 189 733 q 288 747 253 743 q 360 750 324 750 m 376 144 q 455 149 419 144 q 517 165 490 154 q 490 247 497 215 q 482 310 483 278 q 436 314 463 313 q 396 315 410 315 q 341 312 367 315 q 296 299 315 308 q 265 272 276 289 q 254 231 254 256 q 287 163 254 182 q 376 144 319 144 m 950 439 q 941 490 949 465 q 917 535 933 515 q 877 567 901 554 q 817 579 853 579 q 757 567 782 579 q 715 536 732 556 q 690 491 699 517 q 676 439 681 465 l 950 439 z "},"Ӗ":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 m 443 1043 q 358 1056 399 1043 q 283 1095 317 1069 q 228 1158 250 1121 q 203 1242 207 1194 l 346 1279 q 383 1204 357 1226 q 443 1182 408 1182 q 505 1202 479 1182 q 542 1278 531 1222 l 683 1240 q 658 1156 679 1193 q 603 1094 636 1119 q 529 1056 571 1069 q 443 1043 488 1043 z "},"ӗ":{"ha":811,"x_min":63,"x_max":749,"o":"m 63 360 q 92 530 63 457 q 171 651 122 603 q 283 725 219 700 q 413 750 346 750 q 658 655 568 750 q 749 375 749 560 q 747 335 749 357 q 744 297 746 314 l 275 297 q 335 196 282 233 q 476 158 388 158 q 588 169 533 158 q 678 194 643 179 l 706 26 q 661 10 689 18 q 599 -5 633 1 q 526 -15 565 -11 q 449 -19 488 -19 q 277 10 350 -19 q 156 90 204 39 q 85 210 108 140 q 63 360 63 279 m 549 439 q 540 490 547 465 q 516 535 532 515 q 476 567 500 554 q 415 579 451 579 q 356 567 381 579 q 314 536 331 556 q 288 491 297 517 q 275 439 279 465 l 549 439 m 422 831 q 337 844 378 831 q 263 883 296 857 q 208 945 229 908 q 182 1029 186 982 l 325 1067 q 362 992 336 1014 q 422 969 388 969 q 484 990 458 969 q 521 1065 510 1010 l 663 1028 q 637 944 658 981 q 583 882 615 907 q 508 844 550 857 q 422 831 467 831 z "},"Ә":{"ha":1014,"x_min":69,"x_max":944,"o":"m 717 550 q 690 665 710 618 q 635 742 669 713 q 551 784 601 771 q 433 797 501 797 q 355 790 392 797 q 285 774 318 783 q 227 753 253 764 q 183 735 201 743 l 128 904 q 175 928 144 914 q 247 954 206 942 q 340 976 289 967 q 447 985 390 985 q 674 947 579 985 q 828 841 768 908 q 917 683 889 774 q 944 486 944 592 q 911 265 944 360 q 817 106 878 169 q 674 12 757 43 q 493 -19 592 -19 q 319 11 397 -19 q 186 102 242 42 q 100 253 131 163 q 69 463 69 343 q 73 506 69 478 q 79 550 76 535 l 717 550 m 294 372 q 354 219 303 274 q 494 164 406 164 q 585 181 547 164 q 649 226 624 197 q 690 292 675 254 q 710 372 704 329 l 294 372 z "},"ә":{"ha":811,"x_min":63,"x_max":749,"o":"m 749 371 q 719 201 749 274 q 640 78 689 128 q 528 5 592 29 q 399 -19 465 -19 q 153 75 243 -19 q 63 356 63 169 q 64 395 63 374 q 67 433 65 417 l 536 433 q 476 535 529 497 q 335 572 424 572 q 222 562 276 572 q 133 536 168 551 l 106 704 q 150 721 122 713 q 212 735 178 729 q 285 746 246 742 q 363 750 324 750 q 534 721 461 750 q 655 641 607 692 q 726 521 703 590 q 749 371 749 451 m 263 292 q 272 240 264 265 q 294 195 279 215 q 335 163 310 175 q 396 151 360 151 q 456 163 431 151 q 497 194 481 175 q 523 239 514 214 q 536 292 532 264 l 263 292 z "},"Ӛ":{"ha":1014,"x_min":69,"x_max":944,"o":"m 717 550 q 690 665 710 618 q 635 742 669 713 q 551 784 601 771 q 433 797 501 797 q 355 790 392 797 q 285 774 318 783 q 227 753 253 764 q 183 735 201 743 l 128 904 q 175 928 144 914 q 247 954 206 942 q 340 976 289 967 q 447 985 390 985 q 674 947 579 985 q 828 841 768 908 q 917 683 889 774 q 944 486 944 592 q 911 265 944 360 q 817 106 878 169 q 674 12 757 43 q 493 -19 592 -19 q 319 11 397 -19 q 186 102 242 42 q 100 253 131 163 q 69 463 69 343 q 73 506 69 478 q 79 550 76 535 l 717 550 m 294 372 q 354 219 303 274 q 494 164 406 164 q 585 181 547 164 q 649 226 624 197 q 690 292 675 254 q 710 372 704 329 l 294 372 m 329 1058 q 254 1087 286 1058 q 222 1164 222 1115 q 254 1241 222 1213 q 329 1269 286 1269 q 404 1241 372 1269 q 436 1164 436 1213 q 404 1087 436 1115 q 329 1058 372 1058 m 639 1058 q 564 1087 596 1058 q 532 1164 532 1115 q 564 1241 532 1213 q 639 1269 596 1269 q 714 1241 682 1269 q 746 1164 746 1213 q 714 1087 746 1115 q 639 1058 682 1058 z "},"ӛ":{"ha":811,"x_min":63,"x_max":749,"o":"m 749 371 q 719 201 749 274 q 640 78 689 128 q 528 5 592 29 q 399 -19 465 -19 q 153 75 243 -19 q 63 356 63 169 q 64 395 63 374 q 67 433 65 417 l 536 433 q 476 535 529 497 q 335 572 424 572 q 222 562 276 572 q 133 536 168 551 l 106 704 q 150 721 122 713 q 212 735 178 729 q 285 746 246 742 q 363 750 324 750 q 534 721 461 750 q 655 641 607 692 q 726 521 703 590 q 749 371 749 451 m 263 292 q 272 240 264 265 q 294 195 279 215 q 335 163 310 175 q 396 151 360 151 q 456 163 431 151 q 497 194 481 175 q 523 239 514 214 q 536 292 532 264 l 263 292 m 244 836 q 169 865 201 836 q 138 942 138 893 q 169 1019 138 990 q 244 1047 201 1047 q 319 1019 288 1047 q 351 942 351 990 q 319 865 351 893 q 244 836 288 836 m 554 836 q 479 865 511 836 q 447 942 447 893 q 479 1019 447 990 q 554 1047 511 1047 q 629 1019 597 1047 q 661 942 661 990 q 629 865 661 893 q 554 836 597 836 z "},"Ӝ":{"ha":1365,"x_min":14,"x_max":1351,"o":"m 14 0 q 100 142 54 71 q 194 278 146 213 q 292 402 242 344 q 394 506 343 460 q 286 622 336 565 q 191 735 236 679 q 103 847 146 790 q 15 963 60 903 l 276 963 q 355 856 318 904 q 427 761 392 807 q 499 671 463 715 q 576 576 535 626 l 576 963 l 788 963 l 788 576 q 867 674 829 628 q 942 767 906 721 q 1014 860 978 813 q 1088 963 1050 908 l 1347 963 q 1253 840 1297 897 q 1165 729 1210 783 q 1074 621 1121 675 q 972 507 1028 567 q 1178 273 1085 403 q 1351 0 1271 143 l 1110 0 q 1029 121 1067 65 q 954 228 992 176 q 876 328 917 279 q 788 431 836 378 l 788 0 l 576 0 l 576 431 q 486 322 526 372 q 409 222 446 272 q 335 119 372 172 q 254 0 297 65 l 14 0 m 528 1058 q 453 1087 485 1058 q 421 1164 421 1115 q 453 1241 421 1213 q 528 1269 485 1269 q 603 1241 571 1269 q 635 1164 635 1213 q 603 1087 635 1115 q 528 1058 571 1058 m 838 1058 q 763 1087 794 1058 q 731 1164 731 1115 q 763 1241 731 1213 q 838 1269 794 1269 q 913 1241 881 1269 q 944 1164 944 1213 q 913 1087 944 1115 q 838 1058 881 1058 z "},"ӝ":{"ha":1179,"x_min":14,"x_max":1165,"o":"m 14 0 q 157 207 83 113 q 314 390 231 301 q 155 567 226 481 q 28 731 83 654 l 269 731 q 356 612 306 679 q 489 442 407 544 l 489 731 l 690 731 l 690 442 q 825 612 775 543 q 911 731 875 681 l 1150 731 q 1029 567 1099 651 q 867 392 960 483 q 956 292 917 339 q 1031 200 996 246 q 1099 105 1067 154 q 1165 0 1131 56 l 935 0 q 690 331 831 157 l 690 0 l 489 0 l 489 331 q 354 153 418 236 q 244 0 290 69 l 14 0 m 435 836 q 360 865 392 836 q 328 942 328 893 q 360 1019 328 990 q 435 1047 392 1047 q 510 1019 478 1047 q 542 942 542 990 q 510 865 542 893 q 435 836 478 836 m 744 836 q 669 865 701 836 q 638 942 638 893 q 669 1019 638 990 q 744 1047 701 1047 q 819 1019 788 1047 q 851 942 851 990 q 819 865 851 893 q 744 836 788 836 z "},"Ӟ":{"ha":847,"x_min":35,"x_max":785,"o":"m 197 588 l 343 588 q 413 593 381 588 q 470 613 446 599 q 508 649 494 626 q 522 704 522 671 q 485 775 522 751 q 379 799 447 799 q 246 781 303 799 q 138 735 189 764 l 68 906 q 202 962 124 940 q 381 983 281 983 q 525 966 458 983 q 640 915 592 949 q 716 828 689 881 q 743 707 743 776 q 715 602 743 654 q 628 514 686 550 q 688 475 660 497 q 738 424 717 453 q 772 358 760 394 q 785 275 785 321 q 676 51 785 121 q 372 -19 567 -19 q 276 -12 324 -19 q 184 5 228 -6 q 102 29 140 15 q 35 58 64 43 l 99 228 q 147 209 118 219 q 210 189 175 199 q 282 172 244 179 q 357 165 319 165 q 505 192 449 165 q 561 283 561 218 q 543 349 561 324 q 494 387 525 374 q 420 405 463 400 q 328 410 378 410 l 197 410 l 197 588 m 233 1076 q 158 1105 190 1076 q 126 1182 126 1133 q 158 1259 126 1231 q 233 1288 190 1288 q 308 1259 276 1288 q 340 1182 340 1231 q 308 1105 340 1133 q 233 1076 276 1076 m 543 1076 q 468 1105 500 1076 q 436 1182 436 1133 q 468 1259 436 1231 q 543 1288 500 1288 q 618 1259 586 1288 q 650 1182 650 1231 q 618 1105 650 1133 q 543 1076 586 1076 z "},"ӟ":{"ha":688,"x_min":42,"x_max":639,"o":"m 63 707 q 175 736 111 725 q 314 747 239 747 q 425 737 371 747 q 522 702 479 726 q 590 638 564 678 q 615 539 615 599 q 590 447 615 485 q 519 383 565 408 q 610 314 581 357 q 639 204 639 271 q 613 99 639 142 q 542 31 586 57 q 440 -8 497 4 q 322 -19 383 -19 q 247 -16 286 -19 q 172 -6 208 -12 q 101 10 135 0 q 42 31 68 19 l 79 192 q 169 165 108 181 q 306 150 229 150 q 431 219 431 150 q 421 258 431 243 q 395 281 411 272 q 358 292 379 289 q 317 294 338 294 l 154 294 l 154 442 l 318 442 q 388 462 368 442 q 408 508 408 482 q 385 556 408 535 q 301 578 363 578 q 186 567 240 578 q 99 546 132 556 l 63 707 m 164 836 q 89 865 121 836 q 57 942 57 893 q 89 1019 57 990 q 164 1047 121 1047 q 239 1019 207 1047 q 271 942 271 990 q 239 865 271 893 q 164 836 207 836 m 474 836 q 399 865 431 836 q 367 942 367 893 q 399 1019 367 990 q 474 1047 431 1047 q 549 1019 517 1047 q 581 942 581 990 q 549 865 581 893 q 474 836 517 836 z "},"Ӡ":{"ha":853,"x_min":28,"x_max":776,"o":"m 247 544 q 303 602 274 571 q 364 665 333 633 q 422 727 394 697 q 471 782 450 757 l 78 782 l 78 963 l 751 963 l 751 833 q 706 779 735 813 q 642 708 676 746 q 571 632 607 671 q 503 560 535 593 q 714 465 651 533 q 776 285 776 397 q 747 148 776 206 q 662 53 717 90 q 530 -3 607 15 q 360 -21 453 -21 q 250 -12 301 -21 q 156 10 199 -3 q 80 37 113 22 q 28 63 47 51 l 92 235 q 208 188 138 211 q 358 164 278 164 q 501 192 450 164 q 553 288 553 221 q 535 354 553 328 q 487 397 518 381 q 412 419 456 413 q 315 425 368 425 l 247 425 l 247 544 z "},"ӡ":{"ha":715,"x_min":7,"x_max":660,"o":"m 172 319 q 221 376 194 344 q 273 439 247 407 q 324 502 299 471 q 368 558 349 533 l 43 558 l 43 731 l 631 731 l 631 589 q 590 538 614 567 q 539 476 567 508 q 481 407 511 443 q 421 333 451 371 q 515 295 471 319 q 590 235 558 271 q 641 153 622 200 q 660 49 660 107 q 562 -181 660 -104 q 292 -257 464 -257 q 213 -253 253 -257 q 134 -241 172 -249 q 63 -223 96 -233 q 7 -201 31 -212 l 53 -36 q 103 -54 75 -46 q 160 -68 131 -62 q 220 -76 190 -74 q 278 -79 250 -79 q 408 -43 364 -79 q 451 57 451 -7 q 399 164 451 129 q 247 199 346 199 l 172 199 l 172 319 z "},"Ӣ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 111 0 l 111 963 l 326 963 l 326 394 q 433 551 376 469 q 548 708 490 632 q 661 850 606 783 q 763 963 717 917 l 939 963 l 939 0 l 725 0 l 725 631 q 494 326 603 488 q 293 0 386 165 l 111 0 m 326 1219 l 774 1219 l 774 1078 l 326 1078 l 326 1219 z "},"ӣ":{"ha":860,"x_min":97,"x_max":763,"o":"m 763 731 l 763 0 l 554 0 q 556 138 554 69 q 558 265 557 207 q 562 367 560 324 q 564 432 564 411 q 483 317 524 375 q 406 202 443 258 q 337 94 369 146 q 279 0 304 43 l 97 0 l 97 731 l 304 731 q 303 598 304 661 q 301 483 303 535 q 299 394 300 432 q 297 335 297 356 q 451 554 381 457 q 588 731 521 651 l 763 731 m 206 1007 l 653 1007 l 653 865 l 206 865 l 206 1007 z "},"Ӥ":{"ha":1050,"x_min":111,"x_max":939,"o":"m 111 0 l 111 963 l 326 963 l 326 394 q 433 551 376 469 q 548 708 490 632 q 661 850 606 783 q 763 963 717 917 l 939 963 l 939 0 l 725 0 l 725 631 q 494 326 603 488 q 293 0 386 165 l 111 0 m 386 1058 q 311 1087 343 1058 q 279 1164 279 1115 q 311 1241 279 1213 q 386 1269 343 1269 q 461 1241 429 1269 q 493 1164 493 1213 q 461 1087 493 1115 q 386 1058 429 1058 m 696 1058 q 621 1087 653 1058 q 589 1164 589 1115 q 621 1241 589 1213 q 696 1269 653 1269 q 771 1241 739 1269 q 803 1164 803 1213 q 771 1087 803 1115 q 696 1058 739 1058 z "},"ӥ":{"ha":860,"x_min":97,"x_max":763,"o":"m 763 731 l 763 0 l 554 0 q 556 138 554 69 q 558 265 557 207 q 562 367 560 324 q 564 432 564 411 q 483 317 524 375 q 406 202 443 258 q 337 94 369 146 q 279 0 304 43 l 97 0 l 97 731 l 304 731 q 303 598 304 661 q 301 483 303 535 q 299 394 300 432 q 297 335 297 356 q 451 554 381 457 q 588 731 521 651 l 763 731 m 286 836 q 211 865 243 836 q 179 942 179 893 q 211 1019 179 990 q 286 1047 243 1047 q 361 1019 329 1047 q 393 942 393 990 q 361 865 393 893 q 286 836 329 836 m 596 836 q 521 865 553 836 q 489 942 489 893 q 521 1019 489 990 q 596 1047 553 1047 q 671 1019 639 1047 q 703 942 703 990 q 671 865 703 893 q 596 836 639 836 z "},"Ӧ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 399 1058 q 324 1087 356 1058 q 292 1164 292 1115 q 324 1241 292 1213 q 399 1269 356 1269 q 474 1241 442 1269 q 506 1164 506 1213 q 474 1087 506 1115 q 399 1058 442 1058 m 708 1058 q 633 1087 665 1058 q 601 1164 601 1115 q 633 1241 601 1213 q 708 1269 665 1269 q 783 1241 751 1269 q 815 1164 815 1213 q 783 1087 815 1115 q 708 1058 751 1058 z "},"ӧ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 271 836 q 196 865 228 836 q 164 942 164 893 q 196 1019 164 990 q 271 1047 228 1047 q 346 1019 314 1047 q 378 942 378 990 q 346 865 378 893 q 271 836 314 836 m 581 836 q 506 865 538 836 q 474 942 474 893 q 506 1019 474 990 q 581 1047 538 1047 q 656 1019 624 1047 q 688 942 688 990 q 656 865 688 893 q 581 836 624 836 z "},"Ө":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 549 794 q 380 730 444 794 q 299 557 315 665 l 799 557 q 717 730 782 665 q 549 794 653 794 m 549 171 q 717 233 653 171 q 797 404 781 296 l 299 404 q 380 233 315 296 q 549 171 444 171 z "},"ө":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 267 11 335 -19 q 154 94 200 42 q 85 217 108 147 q 63 367 63 288 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 576 719 510 750 q 688 635 643 688 q 757 513 733 582 q 781 367 781 443 m 422 147 q 524 188 485 147 q 575 304 564 229 l 268 304 q 320 190 281 233 q 422 147 360 147 m 422 583 q 319 544 360 583 q 267 429 279 504 l 575 429 q 558 485 569 457 q 529 534 547 513 q 485 569 511 556 q 422 583 458 583 z "},"Ӫ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 549 794 q 380 730 444 794 q 299 557 315 665 l 799 557 q 717 730 782 665 q 549 794 653 794 m 549 171 q 717 233 653 171 q 797 404 781 296 l 299 404 q 380 233 315 296 q 549 171 444 171 m 399 1058 q 324 1087 356 1058 q 292 1164 292 1115 q 324 1241 292 1213 q 399 1269 356 1269 q 474 1241 442 1269 q 506 1164 506 1213 q 474 1087 506 1115 q 399 1058 442 1058 m 708 1058 q 633 1087 665 1058 q 601 1164 601 1115 q 633 1241 601 1213 q 708 1269 665 1269 q 783 1241 751 1269 q 815 1164 815 1213 q 783 1087 815 1115 q 708 1058 751 1058 z "},"ӫ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 267 11 335 -19 q 154 94 200 42 q 85 217 108 147 q 63 367 63 288 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 576 719 510 750 q 688 635 643 688 q 757 513 733 582 q 781 367 781 443 m 422 147 q 524 188 485 147 q 575 304 564 229 l 268 304 q 320 190 281 233 q 422 147 360 147 m 422 583 q 319 544 360 583 q 267 429 279 504 l 575 429 q 558 485 569 457 q 529 534 547 513 q 485 569 511 556 q 422 583 458 583 m 257 836 q 182 865 214 836 q 150 942 150 893 q 182 1019 150 990 q 257 1047 214 1047 q 332 1019 300 1047 q 364 942 364 990 q 332 865 364 893 q 257 836 300 836 m 567 836 q 492 865 524 836 q 460 942 460 893 q 492 1019 460 990 q 567 1047 524 1047 q 642 1019 610 1047 q 674 942 674 990 q 642 865 674 893 q 567 836 610 836 z "},"Ӭ":{"ha":946,"x_min":56,"x_max":876,"o":"m 876 482 q 838 254 876 349 q 734 99 800 160 q 579 9 668 38 q 390 -19 490 -19 q 215 1 294 -19 q 56 63 135 22 l 125 236 q 171 216 144 228 q 230 194 197 204 q 302 176 263 183 q 386 169 342 169 q 564 227 497 169 q 647 397 631 285 l 244 397 l 244 581 l 643 581 q 562 744 626 692 q 386 797 497 797 q 236 777 304 797 q 129 738 168 757 l 65 907 q 228 967 144 949 q 394 986 313 986 q 583 956 496 986 q 736 863 671 925 q 839 706 801 801 q 876 482 876 611 m 275 1058 q 200 1087 232 1058 q 168 1164 168 1115 q 200 1241 168 1213 q 275 1269 232 1269 q 350 1241 318 1269 q 382 1164 382 1213 q 350 1087 382 1115 q 275 1058 318 1058 m 585 1058 q 510 1087 542 1058 q 478 1164 478 1115 q 510 1241 478 1213 q 585 1269 542 1269 q 660 1241 628 1269 q 692 1164 692 1213 q 660 1087 692 1115 q 585 1058 628 1058 z "},"ӭ":{"ha":724,"x_min":40,"x_max":675,"o":"m 675 369 q 647 204 675 276 q 570 83 619 132 q 452 9 521 35 q 300 -17 383 -17 q 170 -7 231 -17 q 40 29 110 3 l 79 192 q 174 167 119 178 q 276 156 228 156 q 343 163 311 156 q 401 186 375 169 q 444 230 426 203 q 467 296 461 257 l 189 296 l 189 444 l 465 444 q 405 551 454 522 q 285 581 356 581 q 190 572 232 581 q 101 549 147 563 l 63 708 q 183 740 125 731 q 296 750 242 750 q 450 724 381 750 q 569 649 519 699 q 647 529 619 600 q 675 369 675 458 m 188 836 q 113 865 144 836 q 81 942 81 893 q 113 1019 81 990 q 188 1047 144 1047 q 263 1019 231 1047 q 294 942 294 990 q 263 865 294 893 q 188 836 231 836 m 497 836 q 422 865 454 836 q 390 942 390 893 q 422 1019 390 990 q 497 1047 454 1047 q 572 1019 540 1047 q 604 942 604 990 q 572 865 604 893 q 497 836 540 836 z "},"Ӯ":{"ha":906,"x_min":28,"x_max":892,"o":"m 624 282 q 539 131 583 190 q 447 39 494 72 q 351 -7 400 6 q 253 -19 303 -19 q 155 -10 206 -19 q 60 15 104 -1 l 99 189 q 233 164 167 164 q 316 183 276 164 q 392 267 356 203 q 283 449 335 356 q 184 634 231 543 q 98 809 138 725 q 28 963 58 893 l 268 963 q 317 847 290 908 q 375 719 344 785 q 437 587 406 653 q 497 458 468 521 q 582 708 542 581 q 660 963 622 836 l 892 963 q 821 763 856 856 q 753 586 786 669 q 687 428 719 503 q 624 282 654 353 m 246 1219 l 693 1219 l 693 1078 l 246 1078 l 246 1219 z "},"ӯ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 164 1007 l 611 1007 l 611 865 l 164 865 l 164 1007 z "},"Ӱ":{"ha":906,"x_min":28,"x_max":892,"o":"m 624 282 q 539 131 583 190 q 447 39 494 72 q 351 -7 400 6 q 253 -19 303 -19 q 155 -10 206 -19 q 60 15 104 -1 l 99 189 q 233 164 167 164 q 316 183 276 164 q 392 267 356 203 q 283 449 335 356 q 184 634 231 543 q 98 809 138 725 q 28 963 58 893 l 268 963 q 317 847 290 908 q 375 719 344 785 q 437 587 406 653 q 497 458 468 521 q 582 708 542 581 q 660 963 622 836 l 892 963 q 821 763 856 856 q 753 586 786 669 q 687 428 719 503 q 624 282 654 353 m 319 1058 q 244 1087 276 1058 q 213 1164 213 1115 q 244 1241 213 1213 q 319 1269 276 1269 q 394 1241 363 1269 q 426 1164 426 1213 q 394 1087 426 1115 q 319 1058 363 1058 m 629 1058 q 554 1087 586 1058 q 522 1164 522 1115 q 554 1241 522 1213 q 629 1269 586 1269 q 704 1241 672 1269 q 736 1164 736 1213 q 704 1087 736 1115 q 629 1058 672 1058 z "},"ӱ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 222 836 q 147 865 179 836 q 115 942 115 893 q 147 1019 115 990 q 222 1047 179 1047 q 297 1019 265 1047 q 329 942 329 990 q 297 865 329 893 q 222 836 265 836 m 532 836 q 457 865 489 836 q 425 942 425 893 q 457 1019 425 990 q 532 1047 489 1047 q 607 1019 575 1047 q 639 942 639 990 q 607 865 639 893 q 532 836 575 836 z "},"Ӳ":{"ha":906,"x_min":28,"x_max":892,"o":"m 624 282 q 539 131 583 190 q 447 39 494 72 q 351 -7 400 6 q 253 -19 303 -19 q 155 -10 206 -19 q 60 15 104 -1 l 99 189 q 233 164 167 164 q 316 183 276 164 q 392 267 356 203 q 283 449 335 356 q 184 634 231 543 q 98 809 138 725 q 28 963 58 893 l 268 963 q 317 847 290 908 q 375 719 344 785 q 437 587 406 653 q 497 458 468 521 q 582 708 542 581 q 660 963 622 836 l 892 963 q 821 763 856 856 q 753 586 786 669 q 687 428 719 503 q 624 282 654 353 m 517 1238 l 322 1026 l 229 1097 l 396 1335 l 517 1238 m 797 1238 l 603 1026 l 510 1097 l 676 1335 l 797 1238 z "},"ӳ":{"ha":760,"x_min":7,"x_max":746,"o":"m 746 731 q 615 335 683 519 q 467 -24 547 150 q 408 -130 438 -86 q 344 -202 379 -174 q 266 -244 310 -231 q 164 -257 222 -257 q 74 -248 115 -257 q 7 -228 33 -239 l 43 -62 q 100 -78 75 -74 q 153 -82 125 -82 q 238 -52 208 -82 q 289 31 268 -22 q 147 342 218 169 q 14 731 76 515 l 233 731 q 266 613 247 676 q 306 485 285 550 q 348 360 326 421 q 389 249 369 299 q 426 360 407 299 q 465 485 446 421 q 501 613 483 550 q 532 731 518 676 l 746 731 m 424 1013 l 229 801 l 136 872 l 303 1110 l 424 1013 m 704 1013 l 510 801 l 417 872 l 583 1110 l 704 1013 z "},"Ӵ":{"ha":944,"x_min":56,"x_max":833,"o":"m 272 679 q 286 587 272 622 q 326 531 300 551 q 388 502 351 510 q 467 494 424 494 q 538 497 500 494 q 617 506 576 500 l 617 963 l 833 963 l 833 0 l 617 0 l 617 322 q 525 314 569 317 q 440 311 481 311 q 281 327 353 311 q 160 384 210 343 q 83 494 110 425 q 56 668 56 563 l 56 963 l 272 963 l 272 679 m 292 1058 q 217 1087 249 1058 q 185 1164 185 1115 q 217 1241 185 1213 q 292 1269 249 1269 q 367 1241 335 1269 q 399 1164 399 1213 q 367 1087 399 1115 q 292 1058 335 1058 m 601 1058 q 526 1087 558 1058 q 494 1164 494 1115 q 526 1241 494 1213 q 601 1269 558 1269 q 676 1241 644 1269 q 708 1164 708 1213 q 676 1087 708 1115 q 601 1058 644 1058 z "},"ӵ":{"ha":789,"x_min":63,"x_max":692,"o":"m 269 731 l 269 494 q 303 421 269 442 q 399 400 338 400 q 438 402 411 400 q 485 407 464 404 l 485 731 l 692 731 l 692 0 l 485 0 l 485 240 q 424 233 457 236 q 375 231 392 231 q 247 244 304 231 q 148 287 189 257 q 85 367 107 317 q 63 493 63 418 l 63 731 l 269 731 m 224 836 q 149 865 181 836 q 117 942 117 893 q 149 1019 117 990 q 224 1047 181 1047 q 299 1019 267 1047 q 331 942 331 990 q 299 865 331 893 q 224 836 267 836 m 533 836 q 458 865 490 836 q 426 942 426 893 q 458 1019 426 990 q 533 1047 490 1047 q 608 1019 576 1047 q 640 942 640 990 q 608 865 640 893 q 533 836 576 836 z "},"Ӷ":{"ha":824,"x_min":111,"x_max":768,"o":"m 293 0 l 111 0 l 111 963 l 768 963 l 768 779 l 328 779 l 328 183 l 501 183 l 501 -257 l 293 -257 l 293 0 z "},"ӷ":{"ha":629,"x_min":97,"x_max":615,"o":"m 615 561 l 304 561 l 304 169 l 440 169 l 440 -201 l 264 -201 l 264 0 l 97 0 l 97 731 l 615 731 l 615 561 z "},"Ӹ":{"ha":1288,"x_min":111,"x_max":1176,"o":"m 839 315 q 808 174 839 235 q 719 71 776 113 q 578 8 661 29 q 394 -12 496 -12 q 262 -4 336 -12 q 111 22 188 4 l 111 963 l 328 963 l 328 643 q 356 644 343 644 q 385 644 369 644 q 725 564 611 644 q 839 315 839 483 m 960 963 l 1176 963 l 1176 0 l 960 0 l 960 963 m 371 461 q 351 461 364 461 q 328 460 339 461 l 328 172 q 363 171 343 171 q 410 171 382 171 q 490 178 453 171 q 556 201 528 185 q 601 246 585 218 q 617 315 617 274 q 553 431 617 400 q 371 461 490 461 m 499 1053 q 424 1081 456 1053 q 392 1158 392 1110 q 424 1235 392 1207 q 499 1264 456 1264 q 574 1235 542 1264 q 606 1158 606 1207 q 574 1081 606 1110 q 499 1053 542 1053 m 808 1053 q 733 1081 765 1053 q 701 1158 701 1110 q 733 1235 701 1207 q 808 1264 765 1264 q 883 1235 851 1264 q 915 1158 915 1207 q 883 1081 915 1110 q 808 1053 851 1053 z "},"ӹ":{"ha":1144,"x_min":97,"x_max":1047,"o":"m 1047 0 l 840 0 l 840 731 l 1047 731 l 1047 0 m 407 144 q 497 166 464 144 q 529 236 529 188 q 518 278 529 261 q 488 306 507 296 q 442 321 468 317 q 388 325 417 325 q 342 322 367 325 q 304 317 317 319 l 304 150 q 349 146 321 147 q 407 144 376 144 m 304 471 q 355 480 324 476 q 426 483 386 483 q 547 468 490 483 q 644 422 603 453 q 710 342 686 390 q 735 231 735 294 q 713 120 735 167 q 649 44 690 74 q 549 -1 607 14 q 421 -15 492 -15 q 253 -6 329 -15 q 97 22 176 3 l 97 731 l 304 731 l 304 471 m 425 836 q 350 865 382 836 q 318 942 318 893 q 350 1019 318 990 q 425 1047 382 1047 q 500 1019 468 1047 q 532 942 532 990 q 500 865 532 893 q 425 836 468 836 m 735 836 q 660 865 692 836 q 628 942 628 893 q 660 1019 628 990 q 735 1047 692 1047 q 810 1019 778 1047 q 842 942 842 990 q 810 865 842 893 q 735 836 778 836 z "},"№":{"ha":1557,"x_min":111,"x_max":1529,"o":"m 729 0 q 537 320 636 167 q 325 617 438 474 l 325 0 l 111 0 l 111 963 l 288 963 q 386 852 333 917 q 493 715 439 788 q 599 563 547 642 q 696 408 651 483 l 696 963 l 911 963 l 911 0 l 729 0 m 1529 719 q 1509 611 1529 660 q 1453 528 1489 563 q 1367 474 1417 493 q 1258 456 1317 456 q 1150 474 1200 456 q 1064 528 1100 493 q 1008 611 1028 563 q 988 719 988 660 q 1008 828 988 779 q 1064 912 1028 878 q 1150 965 1100 946 q 1258 983 1200 983 q 1367 965 1317 983 q 1453 912 1417 946 q 1509 828 1489 878 q 1529 719 1529 779 m 1361 719 q 1334 804 1361 772 q 1257 836 1307 836 q 1182 804 1208 836 q 1156 719 1156 772 q 1182 636 1156 668 q 1257 604 1208 604 q 1334 636 1307 604 q 1361 719 1361 668 m 1022 340 l 1494 340 l 1494 169 l 1022 169 l 1022 340 z "},"―":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 0 501 l 1389 501 l 1389 329 l 0 329 l 0 501 z "},"₴":{"ha":789,"x_min":32,"x_max":757,"o":"m 478 674 q 485 713 485 692 q 451 781 485 757 q 353 804 417 804 q 251 789 292 804 q 175 754 211 774 l 113 918 q 219 964 154 943 q 372 985 283 985 q 602 908 521 985 q 683 696 683 831 q 683 684 683 689 q 682 674 682 679 l 757 674 l 757 535 l 596 535 q 510 476 557 503 q 421 424 464 450 l 757 424 l 757 285 l 288 285 q 286 265 286 278 q 320 190 286 221 q 435 160 354 160 q 569 179 517 160 q 660 219 621 199 l 721 54 q 615 6 686 32 q 429 -19 544 -19 q 170 56 253 -19 q 88 264 88 131 l 88 285 l 32 285 l 32 424 l 153 424 q 228 485 186 458 q 314 535 271 511 l 32 535 l 32 674 l 478 674 z "},"₮":{"ha":789,"x_min":17,"x_max":772,"o":"m 772 963 l 772 792 l 503 792 l 503 657 l 615 710 l 672 589 l 503 510 l 503 401 l 615 454 l 675 328 l 503 247 l 503 0 l 286 0 l 286 146 l 185 99 l 125 225 l 286 300 l 286 408 l 182 360 l 125 481 l 286 556 l 286 792 l 17 792 l 17 963 l 772 963 z "},"Α":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 z "},"Β":{"ha":933,"x_min":111,"x_max":871,"o":"m 432 -12 q 274 -8 353 -12 q 111 15 196 -3 l 111 949 q 257 967 178 961 q 404 974 336 974 q 573 960 496 974 q 706 915 650 947 q 792 831 761 883 q 824 703 824 779 q 713 521 824 588 q 838 426 804 486 q 871 292 871 367 q 760 64 871 140 q 432 -12 650 -12 m 322 419 l 322 171 q 374 167 346 168 q 435 165 401 165 q 592 193 532 165 q 651 296 651 221 q 601 391 651 363 q 458 419 551 419 l 322 419 m 322 585 l 428 585 q 571 610 528 585 q 614 693 614 636 q 569 775 614 751 q 439 799 525 799 q 379 798 411 799 q 322 794 347 797 l 322 585 z "},"Γ":{"ha":824,"x_min":111,"x_max":768,"o":"m 328 0 l 111 0 l 111 963 l 768 963 l 768 779 l 328 779 l 328 0 z "},"Δ":{"ha":963,"x_min":14,"x_max":949,"o":"m 14 0 q 108 281 63 153 q 199 523 154 408 q 291 744 244 638 q 390 963 338 851 l 571 963 q 670 744 622 851 q 764 522 718 636 q 855 279 810 407 q 949 0 900 151 l 14 0 m 671 181 q 562 493 611 354 q 478 706 513 632 q 440 614 461 668 q 395 492 419 560 q 344 345 371 424 q 288 181 317 267 l 671 181 z "},"Ε":{"ha":842,"x_min":111,"x_max":793,"o":"m 111 0 l 111 963 l 761 963 l 761 781 l 328 781 l 328 592 l 713 592 l 713 414 l 328 414 l 328 182 l 793 182 l 793 0 l 111 0 z "},"Ζ":{"ha":847,"x_min":49,"x_max":806,"o":"m 790 813 q 685 694 746 767 q 558 535 624 621 q 429 357 493 449 q 315 182 365 265 l 806 182 l 806 0 l 49 0 l 49 129 q 144 287 88 200 q 261 462 200 374 q 385 633 322 550 q 503 781 449 715 l 71 781 l 71 963 l 790 963 l 790 813 z "},"Η":{"ha":1019,"x_min":111,"x_max":908,"o":"m 692 963 l 908 963 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 z "},"Θ":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 m 394 569 l 704 569 l 704 397 l 394 397 l 394 569 z "},"Ι":{"ha":439,"x_min":111,"x_max":328,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 z "},"Κ":{"ha":950,"x_min":111,"x_max":936,"o":"m 679 0 q 610 102 650 47 q 524 212 571 157 q 428 317 478 267 q 328 407 378 368 l 328 0 l 111 0 l 111 963 l 328 963 l 328 599 q 498 784 413 688 q 657 963 583 881 l 914 963 q 716 738 815 846 q 507 519 617 629 q 730 292 622 424 q 936 0 838 160 l 679 0 z "},"Λ":{"ha":1003,"x_min":14,"x_max":989,"o":"m 606 963 q 717 710 663 842 q 822 452 772 579 q 915 208 872 325 q 989 0 957 92 l 750 0 q 690 180 722 83 q 623 372 657 276 q 556 556 589 468 q 497 707 524 643 q 437 556 469 643 q 371 372 404 468 q 305 180 338 276 q 244 0 272 83 l 14 0 q 87 208 44 92 q 179 453 129 325 q 285 711 229 581 q 397 963 340 842 l 606 963 z "},"Μ":{"ha":1246,"x_min":83,"x_max":1163,"o":"m 367 963 q 424 849 392 917 q 492 703 457 782 q 563 543 528 625 q 628 389 597 461 q 693 543 658 461 q 763 703 728 625 q 831 849 799 782 q 889 963 864 917 l 1086 963 q 1112 748 1100 867 q 1133 501 1124 629 q 1149 243 1142 372 q 1163 0 1157 114 l 951 0 q 940 306 947 140 q 919 639 933 471 q 864 510 894 581 q 803 368 833 439 q 746 233 774 297 q 699 122 718 168 l 547 122 q 500 233 528 168 q 442 368 472 297 q 382 510 413 439 q 326 639 351 581 q 306 306 313 471 q 294 0 299 140 l 83 0 q 97 243 89 114 q 113 501 104 372 q 134 748 122 629 q 160 963 146 867 l 367 963 z "},"Ν":{"ha":1050,"x_min":111,"x_max":939,"o":"m 757 0 q 556 326 664 165 q 325 631 447 488 l 325 0 l 111 0 l 111 963 l 288 963 q 389 850 333 917 q 502 708 444 783 q 617 551 560 632 q 724 394 674 469 l 724 963 l 939 963 l 939 0 l 757 0 z "},"Ξ":{"ha":775,"x_min":49,"x_max":726,"o":"m 49 963 l 726 963 l 726 778 l 49 778 l 49 963 m 108 413 l 108 593 l 667 593 l 667 413 l 108 413 m 49 185 l 726 185 l 726 0 l 49 0 l 49 185 z "},"Ο":{"ha":1097,"x_min":69,"x_max":1028,"o":"m 293 482 q 310 354 293 411 q 360 256 328 297 q 440 193 393 215 q 549 171 488 171 q 656 193 608 171 q 737 256 704 215 q 787 354 769 297 q 804 482 804 411 q 787 610 804 553 q 737 709 769 668 q 656 772 704 750 q 549 794 608 794 q 440 772 488 794 q 360 708 393 749 q 310 609 328 667 q 293 482 293 551 m 1028 482 q 991 265 1028 358 q 890 108 954 171 q 738 13 826 44 q 549 -19 650 -19 q 363 13 450 -19 q 210 108 275 44 q 107 265 144 171 q 69 482 69 358 q 108 699 69 606 q 213 857 147 793 q 366 953 279 921 q 549 985 453 985 q 735 953 647 985 q 888 857 822 921 q 990 699 953 793 q 1028 482 1028 606 z "},"Π":{"ha":1014,"x_min":111,"x_max":903,"o":"m 903 963 l 903 0 l 686 0 l 686 779 l 328 779 l 328 0 l 111 0 l 111 963 l 903 963 z "},"Ρ":{"ha":894,"x_min":111,"x_max":846,"o":"m 400 974 q 731 898 615 974 q 846 650 846 822 q 729 399 846 476 q 396 322 613 322 l 328 322 l 328 0 l 111 0 l 111 949 q 261 968 182 963 q 400 974 340 974 m 414 789 q 367 788 390 789 q 328 785 344 786 l 328 507 l 396 507 q 565 538 508 507 q 622 651 622 568 q 608 718 622 692 q 566 760 593 744 q 500 783 539 776 q 414 789 461 789 z "},"Σ":{"ha":826,"x_min":43,"x_max":771,"o":"m 343 486 q 274 575 311 529 q 199 665 236 621 q 126 749 161 708 q 64 822 92 790 l 64 963 l 771 963 l 771 781 l 351 781 q 472 633 410 710 q 588 486 535 557 q 530 422 567 461 q 453 338 493 382 q 375 253 413 294 q 314 182 338 211 l 771 182 l 771 0 l 43 0 l 43 150 q 189 316 110 229 q 343 486 268 403 z "},"Τ":{"ha":853,"x_min":28,"x_max":825,"o":"m 825 963 l 825 778 l 535 778 l 535 0 l 318 0 l 318 778 l 28 778 l 28 963 l 825 963 z "},"Υ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 z "},"Φ":{"ha":1208,"x_min":64,"x_max":1144,"o":"m 710 294 q 806 317 765 299 q 874 364 847 335 q 915 431 901 393 q 929 513 929 469 q 916 594 929 556 q 876 662 903 632 q 807 711 849 692 q 710 736 765 731 l 710 294 m 710 0 l 499 0 l 499 114 q 306 154 388 119 q 170 244 224 189 q 90 367 117 299 q 64 510 64 436 q 90 651 64 582 q 170 777 117 721 q 306 871 224 833 q 499 917 388 908 l 499 1025 l 710 1025 l 710 917 q 903 871 821 908 q 1038 777 985 833 q 1118 651 1092 721 q 1144 510 1144 582 q 1118 367 1144 436 q 1038 244 1092 299 q 903 154 985 189 q 710 114 821 119 l 710 0 m 499 736 q 401 711 443 731 q 333 662 360 692 q 292 594 306 632 q 279 513 279 556 q 293 431 279 469 q 334 364 307 393 q 402 317 361 335 q 499 294 443 299 l 499 736 z "},"Χ":{"ha":938,"x_min":14,"x_max":924,"o":"m 664 0 q 576 163 624 81 q 465 332 528 246 q 416 263 446 307 q 356 168 386 218 q 300 72 326 118 q 261 0 274 26 l 14 0 q 156 236 75 113 q 338 499 238 360 l 28 963 l 290 963 l 478 663 l 661 963 l 908 963 l 603 496 q 799 216 719 344 q 924 0 878 88 l 664 0 z "},"Ψ":{"ha":1174,"x_min":90,"x_max":1083,"o":"m 689 0 l 485 0 l 485 229 q 309 265 383 235 q 186 348 235 296 q 114 472 138 400 q 90 629 90 543 l 90 963 l 300 963 l 300 654 q 346 471 300 529 q 482 404 392 413 l 482 963 l 692 963 l 692 404 q 828 471 782 413 q 874 654 874 529 l 874 963 l 1083 963 l 1083 629 q 1060 472 1083 543 q 988 348 1036 400 q 865 265 939 296 q 689 229 790 235 l 689 0 z "},"Ω":{"ha":1088,"x_min":56,"x_max":1032,"o":"m 544 985 q 730 955 644 985 q 878 867 815 925 q 976 723 940 808 q 1011 528 1011 638 q 867 179 1011 328 l 1032 179 l 1032 0 l 611 0 l 611 161 q 679 228 647 192 q 735 309 711 265 q 774 406 760 353 q 788 521 788 458 q 722 726 788 656 q 544 797 657 797 q 367 726 432 797 q 301 521 301 656 q 315 406 301 458 q 353 309 329 353 q 408 228 376 265 q 476 161 440 192 l 476 0 l 56 0 l 56 179 l 221 179 q 78 528 78 329 q 113 723 78 638 q 211 867 149 808 q 359 955 274 925 q 544 985 444 985 z "},"α":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 z "},"β":{"ha":885,"x_min":97,"x_max":825,"o":"m 756 814 q 728 685 756 739 q 635 596 700 632 q 783 482 740 554 q 825 317 825 410 q 799 165 825 228 q 725 63 772 103 q 612 3 678 22 q 468 -15 546 -15 q 304 15 381 -15 l 304 -258 l 97 -258 l 97 747 q 119 882 97 821 q 182 987 140 943 q 286 1054 224 1031 q 432 1078 349 1078 q 574 1057 514 1078 q 675 1001 635 1036 q 735 917 715 965 q 756 814 756 869 m 304 197 q 454 163 372 163 q 569 201 525 163 q 614 318 614 240 q 573 435 614 390 q 431 479 532 479 l 404 479 l 404 646 l 421 646 q 471 653 447 646 q 512 675 494 660 q 540 717 529 690 q 550 781 550 743 q 521 863 550 828 q 439 897 492 897 q 304 744 304 897 l 304 197 z "},"γ":{"ha":774,"x_min":11,"x_max":746,"o":"m 272 -257 q 222 13 251 -115 q 159 263 193 142 q 88 499 125 383 q 11 731 50 614 l 231 731 q 265 623 246 685 q 303 493 283 561 q 340 356 322 425 q 372 228 358 288 q 419 338 394 275 q 465 470 443 401 q 503 607 486 539 q 532 731 521 675 l 746 731 q 615 335 696 515 q 440 -7 533 156 q 463 -144 453 -81 q 479 -257 472 -208 l 272 -257 z "},"δ":{"ha":843,"x_min":63,"x_max":781,"o":"m 63 339 q 119 533 63 447 q 272 668 175 618 q 201 749 228 704 q 174 857 174 794 q 191 942 174 903 q 243 1013 208 982 q 331 1060 278 1043 q 454 1078 383 1078 q 532 1074 497 1078 q 596 1065 567 1071 q 652 1049 625 1058 q 707 1028 679 1039 l 663 871 q 576 902 621 889 q 467 915 532 915 q 401 901 421 915 q 381 854 381 886 q 400 810 381 831 q 449 769 419 790 q 514 728 479 749 q 581 685 549 707 q 662 619 625 653 q 725 547 699 586 q 766 459 751 507 q 781 351 781 411 q 756 197 781 265 q 683 80 731 128 q 570 6 636 32 q 422 -19 504 -19 q 276 5 342 -19 q 163 75 210 29 q 89 188 115 121 q 63 339 63 254 m 569 354 q 414 579 569 489 q 308 489 343 550 q 274 354 274 428 q 313 208 274 258 q 422 158 351 158 q 531 208 493 158 q 569 354 569 258 z "},"ε":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 z "},"ζ":{"ha":694,"x_min":83,"x_max":701,"o":"m 701 -57 q 679 -165 701 -114 q 624 -265 657 -217 l 449 -206 q 483 -138 471 -165 q 496 -85 496 -111 q 490 -52 496 -67 q 469 -25 485 -37 q 428 -1 454 -12 q 358 21 401 10 q 242 63 293 39 q 155 125 190 88 q 101 215 119 163 q 83 340 83 267 q 117 508 83 428 q 202 660 151 589 q 310 790 253 731 q 413 896 367 850 l 119 896 l 119 1068 l 676 1068 l 676 915 q 567 817 632 875 q 441 686 501 758 q 338 530 381 614 q 294 356 294 446 q 302 298 294 324 q 328 251 310 272 q 378 213 347 229 q 457 182 410 196 q 574 139 526 161 q 649 88 621 117 q 690 24 678 60 q 701 -57 701 -11 z "},"η":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 z "},"θ":{"ha":854,"x_min":67,"x_max":788,"o":"m 788 531 q 692 117 788 253 q 428 -19 596 -19 q 163 117 260 -19 q 67 531 67 253 q 163 942 67 807 q 428 1078 260 1078 q 692 942 596 1078 q 788 531 788 807 m 428 158 q 540 234 503 158 q 579 444 576 310 l 274 444 q 315 234 276 310 q 428 158 353 158 m 428 900 q 315 826 353 900 q 274 617 276 751 l 579 617 q 540 826 576 751 q 428 900 503 900 z "},"ι":{"ha":429,"x_min":94,"x_max":401,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 z "},"κ":{"ha":808,"x_min":97,"x_max":794,"o":"m 304 457 q 367 527 335 490 q 431 601 400 564 q 489 671 461 638 q 538 731 517 704 l 783 731 q 714 649 753 693 q 633 560 675 604 q 553 473 592 515 q 483 400 514 431 q 570 310 525 360 q 657 206 615 260 q 734 99 699 153 q 794 0 769 46 l 557 0 q 506 78 535 36 q 443 163 476 121 q 374 243 410 204 q 304 311 339 282 l 304 0 l 97 0 l 97 731 l 304 731 l 304 457 z "},"λ":{"ha":760,"x_min":15,"x_max":756,"o":"m 535 0 q 503 122 521 54 q 465 260 485 190 q 425 396 444 331 q 388 511 406 461 q 346 396 368 461 q 302 260 324 331 q 261 122 281 190 q 228 0 242 54 l 15 0 q 151 401 78 215 q 294 726 224 588 q 263 802 278 769 q 232 857 249 835 q 193 890 215 879 q 139 901 171 901 q 103 899 121 901 q 63 888 85 896 l 26 1054 q 89 1070 53 1063 q 174 1078 125 1078 q 260 1068 221 1078 q 333 1036 300 1058 q 393 977 365 1014 q 446 888 421 940 q 510 741 478 819 q 572 581 542 663 q 628 418 601 500 q 679 260 656 336 q 722 118 703 185 q 756 0 742 51 l 535 0 z "},"μ":{"ha":825,"x_min":97,"x_max":728,"o":"m 304 731 l 304 339 q 312 251 304 286 q 335 197 319 217 q 375 168 351 176 q 431 160 399 160 q 477 162 453 160 q 521 167 501 164 l 521 731 l 728 731 l 728 25 q 598 -2 674 10 q 435 -14 522 -14 q 361 -7 399 -14 q 297 13 324 0 q 302 -44 300 -15 q 304 -124 304 -72 l 304 -231 l 97 -231 l 97 731 l 304 731 z "},"ν":{"ha":764,"x_min":14,"x_max":750,"o":"m 296 0 q 152 325 225 139 q 14 731 79 511 l 233 731 q 266 613 247 676 q 305 485 285 550 q 345 360 325 421 q 385 249 365 299 q 424 360 403 299 q 465 485 444 421 q 503 613 485 550 q 536 731 522 676 l 750 731 q 612 325 685 511 q 468 0 539 139 l 296 0 z "},"ξ":{"ha":772,"x_min":68,"x_max":694,"o":"m 450 182 q 565 140 518 163 q 641 89 613 117 q 682 25 669 61 q 694 -57 694 -11 q 672 -166 694 -115 q 617 -265 650 -217 l 442 -206 q 476 -138 464 -165 q 489 -85 489 -111 q 461 -24 489 -49 q 351 21 433 0 q 229 63 282 39 q 140 122 176 88 q 86 205 104 157 q 68 318 68 253 q 82 410 68 369 q 121 482 96 450 q 179 537 146 514 q 250 575 213 560 q 150 675 179 617 q 121 806 121 733 q 144 917 121 867 q 212 1003 168 968 q 317 1058 256 1039 q 454 1078 379 1078 q 589 1064 529 1078 q 679 1039 649 1050 l 640 876 q 557 900 596 893 q 474 907 518 907 q 358 870 392 907 q 325 781 325 833 q 372 684 325 713 q 490 656 419 656 l 626 656 l 626 483 l 499 483 q 435 480 472 483 q 363 462 397 476 q 303 417 328 447 q 279 336 279 388 q 291 274 279 299 q 324 232 303 249 q 378 204 346 215 q 450 182 410 193 z "},"ο":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 z "},"π":{"ha":824,"x_min":97,"x_max":726,"o":"m 726 731 l 726 0 l 519 0 l 519 558 l 304 558 l 304 0 l 97 0 l 97 731 l 726 731 z "},"ρ":{"ha":850,"x_min":97,"x_max":788,"o":"m 457 -14 q 369 -4 407 -14 q 304 21 332 6 l 304 -257 l 97 -257 l 97 407 q 120 547 97 483 q 186 654 143 610 q 291 723 229 699 q 431 747 353 747 q 698 645 608 747 q 788 365 788 543 q 765 211 788 281 q 700 92 743 142 q 596 14 657 42 q 457 -14 535 -14 m 304 188 q 353 169 324 176 q 418 161 382 161 q 534 208 492 161 q 576 367 576 254 q 543 522 576 474 q 438 571 510 571 q 387 561 411 571 q 344 531 363 551 q 315 479 326 511 q 304 401 304 447 l 304 188 z "},"ς":{"ha":694,"x_min":63,"x_max":649,"o":"m 315 19 q 212 61 258 36 q 132 127 165 86 q 81 226 99 168 q 63 368 63 285 q 88 520 63 450 q 163 641 114 590 q 281 721 211 692 q 439 750 350 750 q 547 740 497 750 q 642 710 596 729 l 596 544 q 533 564 567 556 q 456 572 499 572 q 319 519 364 572 q 274 374 274 467 q 281 301 274 332 q 303 247 288 269 q 347 207 319 224 q 414 179 374 190 q 526 138 481 160 q 598 87 571 115 q 637 23 625 58 q 649 -57 649 -12 q 626 -165 649 -114 q 571 -265 604 -217 l 396 -206 q 431 -138 418 -165 q 443 -85 443 -111 q 438 -53 443 -68 q 419 -26 433 -39 q 379 -3 404 -14 q 315 19 354 8 z "},"σ":{"ha":876,"x_min":63,"x_max":863,"o":"m 775 335 q 750 192 775 257 q 679 81 725 128 q 568 7 633 33 q 422 -19 503 -19 q 276 8 342 -19 q 163 84 210 35 q 89 203 115 133 q 63 360 63 274 q 91 518 63 449 q 172 635 119 588 q 297 706 224 682 q 460 731 371 731 l 863 731 l 863 558 l 696 558 q 758 450 740 511 q 775 335 775 389 m 567 347 q 547 471 567 415 q 488 558 528 526 l 460 558 q 326 512 378 558 q 274 360 274 465 q 313 211 274 264 q 422 158 351 158 q 530 213 493 158 q 567 347 567 267 z "},"τ":{"ha":671,"x_min":14,"x_max":629,"o":"m 606 4 q 536 -11 572 -6 q 453 -17 500 -17 q 325 6 374 -17 q 249 68 276 28 q 211 166 221 108 q 201 294 201 224 l 201 558 l 14 558 l 14 731 l 629 731 l 629 558 l 408 558 l 408 278 q 425 185 408 213 q 493 158 442 158 q 540 160 519 158 q 588 168 561 163 l 606 4 z "},"υ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 z "},"φ":{"ha":1097,"x_min":63,"x_max":1035,"o":"m 549 750 q 756 722 665 750 q 908 642 846 693 q 1003 520 971 590 q 1035 367 1035 450 q 1010 228 1035 293 q 936 115 985 164 q 815 32 888 65 q 649 -12 743 -1 l 649 -257 l 447 -257 l 447 -12 q 281 32 353 -1 q 161 115 210 65 q 88 228 113 164 q 63 367 63 293 q 94 520 63 450 q 189 642 126 590 q 342 722 251 693 q 549 750 432 750 m 826 367 q 783 503 826 451 q 649 569 739 556 l 649 161 q 783 228 739 175 q 826 367 826 281 m 271 367 q 315 228 271 281 q 447 161 358 175 l 447 569 q 315 503 358 556 q 271 367 271 451 z "},"χ":{"ha":769,"x_min":14,"x_max":756,"o":"m 388 508 l 532 731 l 746 731 l 496 379 q 647 176 579 275 q 756 0 715 78 l 533 0 q 506 52 522 21 q 468 117 489 83 q 424 185 447 151 q 379 247 401 219 q 337 189 358 221 q 296 124 315 157 q 258 60 276 92 q 225 0 239 28 l 14 0 q 60 82 31 35 q 123 180 89 129 q 194 281 157 231 q 268 376 232 332 q 143 553 206 464 q 19 731 81 643 l 243 731 l 388 508 z "},"ψ":{"ha":1131,"x_min":90,"x_max":1040,"o":"m 665 731 l 665 161 q 792 227 749 168 q 836 386 836 286 l 836 731 l 1040 731 l 1040 376 q 1020 235 1040 301 q 956 117 1000 169 q 840 31 911 65 q 665 -14 768 -3 l 665 -257 l 464 -257 l 464 -14 q 290 32 361 -3 q 175 118 219 67 q 110 235 131 169 q 90 376 90 301 l 90 731 l 294 731 l 294 386 q 338 227 294 286 q 464 161 381 168 l 464 731 l 665 731 z "},"ω":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 z "},"Ά":{"ha":1001,"x_min":8,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 253 949 l 143 650 l 8 685 l 83 996 l 253 949 z "},"Έ":{"ha":1038,"x_min":-4,"x_max":989,"o":"m 307 0 l 307 963 l 957 963 l 957 781 l 524 781 l 524 592 l 908 592 l 908 414 l 524 414 l 524 182 l 989 182 l 989 0 l 307 0 m 240 949 l 131 650 l -4 685 l 71 996 l 240 949 z "},"Ή":{"ha":1215,"x_min":-4,"x_max":1104,"o":"m 888 963 l 1104 963 l 1104 0 l 888 0 l 888 408 l 524 408 l 524 0 l 307 0 l 307 963 l 524 963 l 524 594 l 888 594 l 888 963 m 240 949 l 131 650 l -4 685 l 71 996 l 240 949 z "},"Ί":{"ha":635,"x_min":-4,"x_max":524,"o":"m 307 963 l 524 963 l 524 0 l 307 0 l 307 963 m 240 949 l 131 650 l -4 685 l 71 996 l 240 949 z "},"Ϊ":{"ha":439,"x_min":-39,"x_max":485,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 68 1068 q -7 1097 25 1068 q -39 1174 -39 1125 q -7 1251 -39 1222 q 68 1279 25 1279 q 143 1251 111 1279 q 175 1174 175 1222 q 143 1097 175 1125 q 68 1068 111 1068 m 378 1068 q 303 1097 335 1068 q 271 1174 271 1125 q 303 1251 271 1222 q 378 1279 335 1279 q 453 1251 421 1279 q 485 1174 485 1222 q 453 1097 485 1125 q 378 1068 421 1068 z "},"Ό":{"ha":1235,"x_min":-4,"x_max":1165,"o":"m 431 482 q 448 354 431 411 q 498 256 465 297 q 578 193 531 215 q 686 171 625 171 q 794 193 746 171 q 874 256 842 215 q 924 354 907 297 q 942 482 942 411 q 924 610 942 553 q 874 709 907 668 q 794 772 842 750 q 686 794 746 794 q 578 772 625 794 q 498 708 531 749 q 448 609 465 667 q 431 482 431 551 m 1165 482 q 1128 265 1165 358 q 1028 108 1092 171 q 876 13 964 44 q 686 -19 788 -19 q 500 13 588 -19 q 347 108 413 44 q 244 265 282 171 q 207 482 207 358 q 246 699 207 606 q 351 857 285 793 q 503 953 417 921 q 686 985 590 985 q 872 953 785 985 q 1025 857 960 921 q 1128 699 1090 793 q 1165 482 1165 606 m 240 949 l 131 650 l -4 685 l 71 996 l 240 949 z "},"Ύ":{"ha":1196,"x_min":-4,"x_max":1189,"o":"m 742 567 q 853 764 800 665 q 950 963 906 863 l 1189 963 q 1025 661 1110 807 q 846 368 940 515 l 846 0 l 629 0 l 629 365 q 449 660 535 513 q 285 963 364 807 l 536 963 q 632 764 581 863 q 742 567 683 665 m 240 949 l 131 650 l -4 685 l 71 996 l 240 949 z "},"Ϋ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 294 1068 q 219 1097 251 1068 q 188 1174 188 1125 q 219 1251 188 1222 q 294 1279 251 1279 q 369 1251 338 1279 q 401 1174 401 1222 q 369 1097 401 1125 q 294 1068 338 1068 m 604 1068 q 529 1097 561 1068 q 497 1174 497 1125 q 529 1251 497 1222 q 604 1279 561 1279 q 679 1251 647 1279 q 711 1174 711 1222 q 679 1097 711 1125 q 604 1068 647 1068 z "},"Ώ":{"ha":1210,"x_min":-4,"x_max":1154,"o":"m 667 985 q 852 955 767 985 q 1000 867 938 925 q 1098 723 1063 808 q 1133 528 1133 638 q 989 179 1133 328 l 1154 179 l 1154 0 l 733 0 l 733 161 q 801 228 769 192 q 858 309 833 265 q 896 406 882 353 q 910 521 910 458 q 844 726 910 656 q 667 797 779 797 q 489 726 554 797 q 424 521 424 656 q 438 406 424 458 q 475 309 451 353 q 531 228 499 265 q 599 161 563 192 l 599 0 l 178 0 l 178 179 l 343 179 q 200 528 200 329 q 235 723 200 638 q 333 867 271 808 q 481 955 396 925 q 667 985 567 985 m 240 949 l 131 650 l -4 685 l 71 996 l 240 949 z "},"ά":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 636 1038 l 435 808 l 329 886 l 506 1138 l 636 1038 z "},"έ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 579 1038 l 378 808 l 272 886 l 449 1138 l 579 1038 z "},"ή":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 608 1038 l 407 808 l 301 886 l 478 1138 l 608 1038 z "},"ί":{"ha":429,"x_min":94,"x_max":403,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 403 1038 l 201 808 l 96 886 l 272 1138 l 403 1038 z "},"ϊ":{"ha":429,"x_min":-53,"x_max":471,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 54 836 q -21 865 11 836 q -53 942 -53 893 q -21 1019 -53 990 q 54 1047 11 1047 q 129 1019 97 1047 q 161 942 161 990 q 129 865 161 893 q 54 836 97 836 m 364 836 q 289 865 321 836 q 257 942 257 893 q 289 1019 257 990 q 364 1047 321 1047 q 439 1019 407 1047 q 471 942 471 990 q 439 865 471 893 q 364 836 407 836 z "},"ΐ":{"ha":429,"x_min":-93,"x_max":565,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 113 940 q 82 866 113 893 q 10 839 51 839 q -63 866 -33 839 q -93 940 -93 893 q -63 1016 -93 989 q 10 1043 -33 1043 q 82 1016 51 1043 q 113 940 113 989 m 565 940 q 535 866 565 893 q 463 839 504 839 q 390 866 421 839 q 360 940 360 893 q 390 1016 360 989 q 463 1043 421 1043 q 535 1016 504 1043 q 565 940 565 989 m 374 1074 l 222 796 l 126 842 l 247 1135 l 374 1074 z "},"ό":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 604 1038 l 403 808 l 297 886 l 474 1138 l 604 1038 z "},"ϋ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 257 836 q 182 865 214 836 q 150 942 150 893 q 182 1019 150 990 q 257 1047 214 1047 q 332 1019 300 1047 q 364 942 364 990 q 332 865 364 893 q 257 836 300 836 m 567 836 q 492 865 524 836 q 460 942 460 893 q 492 1019 460 990 q 567 1047 524 1047 q 642 1019 610 1047 q 674 942 674 990 q 642 865 674 893 q 567 836 610 836 z "},"ύ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 618 1038 l 417 808 l 311 886 l 488 1138 l 618 1038 z "},"ΰ":{"ha":824,"x_min":90,"x_max":757,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 304 940 q 274 866 304 893 q 201 839 243 839 q 128 866 158 839 q 99 940 99 893 q 128 1016 99 989 q 201 1043 158 1043 q 274 1016 243 1043 q 304 940 304 989 m 757 940 q 726 866 757 893 q 654 839 696 839 q 582 866 613 839 q 551 940 551 893 q 582 1016 551 989 q 654 1043 613 1043 q 726 1016 696 1043 q 757 940 757 989 m 565 1074 l 414 796 l 318 842 l 439 1135 l 565 1074 z "},"ώ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 763 1038 l 561 808 l 456 886 l 632 1138 l 763 1038 z "},"΄":{"ha":622,"x_min":176,"x_max":483,"o":"m 483 1038 l 282 808 l 176 886 l 353 1138 l 483 1038 z "},"΅":{"ha":854,"x_min":99,"x_max":757,"o":"m 304 940 q 274 866 304 893 q 201 839 243 839 q 128 866 158 839 q 99 940 99 893 q 128 1016 99 989 q 201 1043 158 1043 q 274 1016 243 1043 q 304 940 304 989 m 757 940 q 726 866 757 893 q 654 839 696 839 q 582 866 613 839 q 551 940 551 893 q 582 1016 551 989 q 654 1043 613 1043 q 726 1016 696 1043 q 757 940 757 989 m 565 1074 l 414 796 l 318 842 l 439 1135 l 565 1074 z "},"ἀ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 324 868 q 383 922 357 896 q 428 975 408 947 q 382 1010 400 986 q 364 1063 364 1035 q 392 1128 364 1103 q 463 1154 419 1154 q 538 1127 507 1154 q 568 1049 568 1100 q 517 924 568 986 q 386 808 465 861 l 324 868 z "},"ἁ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 501 808 q 371 924 422 861 q 319 1049 319 986 q 350 1127 319 1100 q 425 1154 381 1154 q 496 1128 468 1154 q 524 1063 524 1103 q 506 1010 524 1035 q 460 975 488 986 q 505 922 479 947 q 564 868 531 896 l 501 808 z "},"ἂ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 586 1151 l 754 885 l 663 818 l 465 1065 l 586 1151 m 176 868 q 235 922 210 896 q 281 975 261 947 q 236 1010 253 986 q 219 1063 219 1035 q 246 1128 219 1103 q 315 1154 272 1154 q 385 1127 360 1154 q 411 1049 411 1100 q 362 923 411 985 q 239 808 313 861 l 176 868 z "},"ἃ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 514 1151 l 682 885 l 590 818 l 393 1065 l 514 1151 m 322 808 q 199 923 249 860 q 150 1049 150 986 q 176 1127 150 1100 q 246 1154 201 1154 q 315 1128 289 1154 q 342 1063 342 1103 q 325 1010 342 1035 q 281 975 308 986 q 326 922 300 947 q 385 868 351 896 l 322 808 z "},"ἄ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 746 1065 l 549 818 l 457 885 l 625 1151 l 746 1065 m 211 868 q 270 922 244 896 q 315 975 296 947 q 271 1010 288 986 q 254 1063 254 1035 q 281 1128 254 1103 q 350 1154 307 1154 q 420 1127 394 1154 q 446 1049 446 1100 q 397 923 446 985 q 274 808 347 861 l 211 868 z "},"ἅ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 731 1065 l 533 818 l 442 885 l 610 1151 l 731 1065 m 350 808 q 227 923 276 860 q 178 1049 178 986 q 203 1127 178 1100 q 274 1154 229 1154 q 343 1128 317 1154 q 369 1063 369 1103 q 353 1010 369 1035 q 308 975 336 986 q 353 922 328 947 q 413 868 379 896 l 350 808 z "},"ἆ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 556 1061 q 544 1107 554 1088 q 517 1139 533 1126 q 482 1157 501 1151 q 444 1163 463 1163 q 406 1157 425 1163 q 372 1139 388 1151 q 345 1107 356 1126 q 333 1061 335 1088 l 226 1061 q 248 1160 229 1119 q 296 1228 267 1201 q 364 1268 325 1256 q 444 1281 403 1281 q 525 1268 486 1281 q 593 1228 564 1256 q 641 1160 622 1201 q 663 1061 660 1119 l 556 1061 m 338 864 q 373 894 354 878 q 406 926 392 911 q 370 957 379 938 q 361 996 361 976 q 381 1046 361 1024 q 442 1068 401 1068 q 500 1048 474 1068 q 526 986 526 1028 q 521 948 526 967 q 500 908 515 929 q 458 861 485 886 q 389 806 432 836 l 338 864 z "},"ἇ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 522 1061 q 510 1107 521 1088 q 484 1139 500 1126 q 449 1157 468 1151 q 411 1163 429 1163 q 373 1157 392 1163 q 338 1139 354 1151 q 312 1107 322 1126 q 300 1061 301 1088 l 193 1061 q 215 1160 196 1119 q 263 1228 233 1201 q 331 1268 292 1256 q 411 1281 369 1281 q 492 1268 453 1281 q 560 1228 531 1256 q 608 1160 589 1201 q 629 1061 626 1119 l 522 1061 m 467 806 q 397 861 424 836 q 356 908 371 886 q 335 948 340 929 q 329 986 329 967 q 356 1048 329 1028 q 414 1068 382 1068 q 474 1046 454 1068 q 494 996 494 1024 q 485 957 494 976 q 450 926 476 938 q 483 894 464 911 q 518 864 501 878 l 467 806 z "},"Ἀ":{"ha":1042,"x_min":19,"x_max":1028,"o":"m 796 0 q 762 103 781 50 q 725 208 743 156 l 350 208 q 313 103 332 156 q 279 0 294 50 l 54 0 q 157 288 108 156 q 252 536 206 419 q 344 758 299 653 q 438 963 389 863 l 644 963 q 738 758 692 863 q 830 536 783 653 q 925 288 876 419 q 1028 0 974 156 l 796 0 m 536 744 q 515 688 529 724 q 483 604 501 651 q 444 500 465 557 q 400 381 422 443 l 674 381 q 631 500 651 443 q 591 604 610 557 q 558 688 572 651 q 536 744 544 724 m 19 707 q 78 760 53 735 q 124 814 104 786 q 78 849 96 825 q 60 901 60 874 q 88 967 60 942 q 158 993 115 993 q 233 966 203 993 q 264 888 264 939 q 213 763 264 825 q 82 647 161 700 l 19 707 z "},"Ἁ":{"ha":1042,"x_min":15,"x_max":1028,"o":"m 796 0 q 762 103 781 50 q 725 208 743 156 l 350 208 q 313 103 332 156 q 279 0 294 50 l 54 0 q 157 288 108 156 q 252 536 206 419 q 344 758 299 653 q 438 963 389 863 l 644 963 q 738 758 692 863 q 830 536 783 653 q 925 288 876 419 q 1028 0 974 156 l 796 0 m 536 744 q 515 688 529 724 q 483 604 501 651 q 444 500 465 557 q 400 381 422 443 l 674 381 q 631 500 651 443 q 591 604 610 557 q 558 688 572 651 q 536 744 544 724 m 197 647 q 67 763 118 700 q 15 888 15 825 q 46 966 15 939 q 121 993 76 993 q 192 967 164 993 q 219 901 219 942 q 201 849 219 874 q 156 814 183 825 q 201 760 175 786 q 260 707 226 735 l 197 647 z "},"Ἂ":{"ha":1347,"x_min":-3,"x_max":1333,"o":"m 1101 0 q 1067 103 1086 50 q 1031 208 1049 156 l 656 208 q 619 103 638 156 q 585 0 600 50 l 360 0 q 463 288 414 156 q 558 536 511 419 q 649 758 604 653 q 743 963 694 863 l 950 963 q 1043 758 997 863 q 1135 536 1089 653 q 1231 288 1182 419 q 1333 0 1279 156 l 1101 0 m 842 744 q 821 688 835 724 q 789 604 807 651 q 749 500 771 557 q 706 381 728 443 l 979 381 q 936 500 957 443 q 897 604 915 557 q 864 688 878 651 q 842 744 850 724 m 407 990 l 575 724 l 483 657 l 286 904 l 407 990 m -3 707 q 56 760 31 735 q 101 814 82 786 q 57 849 74 825 q 40 901 40 874 q 67 967 40 942 q 136 993 93 993 q 206 966 181 993 q 232 888 232 939 q 183 762 232 824 q 60 647 133 700 l -3 707 z "},"Ἃ":{"ha":1306,"x_min":-1,"x_max":1292,"o":"m 1060 0 q 1026 103 1044 50 q 989 208 1007 156 l 614 208 q 577 103 596 156 q 543 0 558 50 l 318 0 q 421 288 372 156 q 516 536 469 419 q 608 758 563 653 q 701 963 653 863 l 908 963 q 1001 758 956 863 q 1094 536 1047 653 q 1189 288 1140 419 q 1292 0 1238 156 l 1060 0 m 800 744 q 779 688 793 724 q 747 604 765 651 q 708 500 729 557 q 664 381 686 443 l 938 381 q 894 500 915 443 q 855 604 874 557 q 822 688 836 651 q 800 744 808 724 m 363 990 l 531 724 l 439 657 l 242 904 l 363 990 m 171 647 q 48 762 97 699 q -1 888 -1 825 q 24 966 -1 939 q 94 993 50 993 q 164 967 138 993 q 190 901 190 942 q 174 849 190 874 q 129 814 157 825 q 174 760 149 786 q 233 707 200 735 l 171 647 z "},"Ἄ":{"ha":1236,"x_min":-10,"x_max":1222,"o":"m 990 0 q 956 103 975 50 q 919 208 938 156 l 544 208 q 508 103 526 156 q 474 0 489 50 l 249 0 q 351 288 303 156 q 447 536 400 419 q 538 758 493 653 q 632 963 583 863 l 839 963 q 932 758 886 863 q 1024 536 978 653 q 1119 288 1071 419 q 1222 0 1168 156 l 990 0 m 731 744 q 710 688 724 724 q 678 604 696 651 q 638 500 660 557 q 594 381 617 443 l 868 381 q 825 500 846 443 q 785 604 804 557 q 753 688 767 651 q 731 744 739 724 m 525 904 l 328 657 l 236 724 l 404 990 l 525 904 m -10 707 q 49 760 24 735 q 94 814 75 786 q 50 849 67 825 q 33 901 33 874 q 60 967 33 942 q 129 993 86 993 q 199 966 174 993 q 225 888 225 939 q 176 762 225 824 q 53 647 126 700 l -10 707 z "},"Ἅ":{"ha":1278,"x_min":13,"x_max":1264,"o":"m 1032 0 q 998 103 1017 50 q 961 208 979 156 l 586 208 q 549 103 568 156 q 515 0 531 50 l 290 0 q 393 288 344 156 q 488 536 442 419 q 580 758 535 653 q 674 963 625 863 l 881 963 q 974 758 928 863 q 1066 536 1019 653 q 1161 288 1113 419 q 1264 0 1210 156 l 1032 0 m 772 744 q 751 688 765 724 q 719 604 738 651 q 680 500 701 557 q 636 381 658 443 l 910 381 q 867 500 888 443 q 827 604 846 557 q 794 688 808 651 q 772 744 781 724 m 565 904 l 368 657 l 276 724 l 444 990 l 565 904 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 z "},"Ἆ":{"ha":1136,"x_min":-11,"x_max":1122,"o":"m 890 0 q 856 103 875 50 q 819 208 838 156 l 444 208 q 408 103 426 156 q 374 0 389 50 l 149 0 q 251 288 203 156 q 347 536 300 419 q 438 758 393 653 q 532 963 483 863 l 739 963 q 832 758 786 863 q 924 536 878 653 q 1019 288 971 419 q 1122 0 1068 156 l 890 0 m 631 744 q 610 688 624 724 q 578 604 596 651 q 538 500 560 557 q 494 381 517 443 l 768 381 q 725 500 746 443 q 685 604 704 557 q 653 688 667 651 q 631 744 639 724 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 z "},"Ἇ":{"ha":1136,"x_min":-11,"x_max":1122,"o":"m 890 0 q 856 103 875 50 q 819 208 838 156 l 444 208 q 408 103 426 156 q 374 0 389 50 l 149 0 q 251 288 203 156 q 347 536 300 419 q 438 758 393 653 q 532 963 483 863 l 739 963 q 832 758 786 863 q 924 536 878 653 q 1019 288 971 419 q 1122 0 1068 156 l 890 0 m 631 744 q 610 688 624 724 q 578 604 596 651 q 538 500 560 557 q 494 381 517 443 l 768 381 q 725 500 746 443 q 685 604 704 557 q 653 688 667 651 q 631 744 639 724 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 z "},"ἐ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 268 868 q 327 922 301 896 q 372 975 353 947 q 326 1010 344 986 q 308 1063 308 1035 q 336 1128 308 1103 q 407 1154 364 1154 q 482 1127 451 1154 q 513 1049 513 1100 q 461 924 513 986 q 331 808 410 861 l 268 868 z "},"ἑ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 438 808 q 307 924 358 861 q 256 1049 256 986 q 286 1127 256 1100 q 361 1154 317 1154 q 432 1128 404 1154 q 460 1063 460 1103 q 442 1010 460 1035 q 396 975 424 986 q 441 922 415 947 q 500 868 467 896 l 438 808 z "},"ἒ":{"ha":715,"x_min":51,"x_max":703,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 535 1151 l 703 885 l 611 818 l 414 1065 l 535 1151 m 125 868 q 184 922 158 896 q 229 975 210 947 q 185 1010 201 986 q 168 1063 168 1035 q 194 1128 168 1103 q 264 1154 221 1154 q 334 1127 308 1154 q 360 1049 360 1100 q 310 923 360 985 q 188 808 261 861 l 125 868 z "},"ἓ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 465 1151 l 633 885 l 542 818 l 344 1065 l 465 1151 m 274 808 q 151 923 200 860 q 101 1049 101 986 q 127 1127 101 1100 q 197 1154 153 1154 q 267 1128 240 1154 q 293 1063 293 1103 q 276 1010 293 1035 q 232 975 260 986 q 277 922 251 947 q 336 868 303 896 l 274 808 z "},"ἔ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 676 1065 l 479 818 l 388 885 l 556 1151 l 676 1065 m 142 868 q 201 922 175 896 q 246 975 226 947 q 201 1010 218 986 q 185 1063 185 1035 q 211 1128 185 1103 q 281 1154 238 1154 q 351 1127 325 1154 q 376 1049 376 1100 q 327 923 376 985 q 204 808 278 861 l 142 868 z "},"ἕ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 675 1065 l 478 818 l 386 885 l 554 1151 l 675 1065 m 294 808 q 172 923 221 860 q 122 1049 122 986 q 148 1127 122 1100 q 218 1154 174 1154 q 288 1128 261 1154 q 314 1063 314 1103 q 297 1010 314 1035 q 253 975 281 986 q 298 922 272 947 q 357 868 324 896 l 294 808 z "},"Ἐ":{"ha":1065,"x_min":6,"x_max":1017,"o":"m 335 0 l 335 963 l 985 963 l 985 781 l 551 781 l 551 592 l 936 592 l 936 414 l 551 414 l 551 182 l 1017 182 l 1017 0 l 335 0 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 z "},"Ἑ":{"ha":1038,"x_min":1,"x_max":989,"o":"m 307 0 l 307 963 l 957 963 l 957 781 l 524 781 l 524 592 l 908 592 l 908 414 l 524 414 l 524 182 l 989 182 l 989 0 l 307 0 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ἒ":{"ha":1382,"x_min":11,"x_max":1333,"o":"m 651 0 l 651 963 l 1301 963 l 1301 781 l 868 781 l 868 592 l 1253 592 l 1253 414 l 868 414 l 868 182 l 1333 182 l 1333 0 l 651 0 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 z "},"Ἓ":{"ha":1339,"x_min":11,"x_max":1290,"o":"m 608 0 l 608 963 l 1258 963 l 1258 781 l 825 781 l 825 592 l 1210 592 l 1210 414 l 825 414 l 825 182 l 1290 182 l 1290 0 l 608 0 m 375 990 l 543 724 l 451 657 l 254 904 l 375 990 m 183 647 q 60 762 110 699 q 11 888 11 825 q 37 966 11 939 q 107 993 63 993 q 176 967 150 993 q 203 901 203 942 q 186 849 203 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ἔ":{"ha":1328,"x_min":4,"x_max":1279,"o":"m 597 0 l 597 963 l 1247 963 l 1247 781 l 814 781 l 814 592 l 1199 592 l 1199 414 l 814 414 l 814 182 l 1279 182 l 1279 0 l 597 0 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 z "},"Ἕ":{"ha":1353,"x_min":4,"x_max":1304,"o":"m 622 0 l 622 963 l 1272 963 l 1272 781 l 839 781 l 839 592 l 1224 592 l 1224 414 l 839 414 l 839 182 l 1304 182 l 1304 0 l 622 0 m 557 904 l 360 657 l 268 724 l 436 990 l 557 904 m 176 647 q 53 762 103 699 q 4 888 4 825 q 30 966 4 939 q 100 993 56 993 q 169 967 143 993 q 196 901 196 942 q 179 849 196 874 q 135 814 163 825 q 180 760 154 786 q 239 707 206 735 l 176 647 z "},"ἠ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 868 q 341 922 315 896 q 386 975 367 947 q 340 1010 358 986 q 322 1063 322 1035 q 350 1128 322 1103 q 421 1154 378 1154 q 496 1127 465 1154 q 526 1049 526 1100 q 475 924 526 986 q 344 808 424 861 l 282 868 z "},"ἡ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 474 808 q 343 924 394 861 q 292 1049 292 986 q 322 1127 292 1100 q 397 1154 353 1154 q 468 1128 440 1154 q 496 1063 496 1103 q 478 1010 496 1035 q 432 975 460 986 q 477 922 451 947 q 536 868 503 896 l 474 808 z "},"ἢ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 528 1151 l 696 885 l 604 818 l 407 1065 l 528 1151 m 118 868 q 177 922 151 896 q 222 975 203 947 q 178 1010 194 986 q 161 1063 161 1035 q 188 1128 161 1103 q 257 1154 214 1154 q 327 1127 301 1154 q 353 1049 353 1100 q 303 923 353 985 q 181 808 254 861 l 118 868 z "},"ἣ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 478 1151 l 646 885 l 554 818 l 357 1065 l 478 1151 m 286 808 q 163 923 213 860 q 114 1049 114 986 q 140 1127 114 1100 q 210 1154 165 1154 q 279 1128 253 1154 q 306 1063 306 1103 q 289 1010 306 1035 q 244 975 272 986 q 290 922 264 947 q 349 868 315 896 l 286 808 z "},"ἤ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 704 1065 l 507 818 l 415 885 l 583 1151 l 704 1065 m 169 868 q 228 922 203 896 q 274 975 254 947 q 229 1010 246 986 q 213 1063 213 1035 q 239 1128 213 1103 q 308 1154 265 1154 q 378 1127 353 1154 q 404 1049 404 1100 q 355 923 404 985 q 232 808 306 861 l 169 868 z "},"ἥ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 693 1065 l 496 818 l 404 885 l 572 1151 l 693 1065 m 313 808 q 190 923 239 860 q 140 1049 140 986 q 166 1127 140 1100 q 236 1154 192 1154 q 306 1128 279 1154 q 332 1063 332 1103 q 315 1010 332 1035 q 271 975 299 986 q 316 922 290 947 q 375 868 342 896 l 313 808 z "},"ἦ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 528 1061 q 516 1107 526 1088 q 490 1139 506 1126 q 454 1157 474 1151 q 417 1163 435 1163 q 378 1157 397 1163 q 344 1139 360 1151 q 317 1107 328 1126 q 306 1061 307 1088 l 199 1061 q 220 1160 201 1119 q 268 1228 239 1201 q 336 1268 297 1256 q 417 1281 375 1281 q 497 1268 458 1281 q 565 1228 536 1256 q 613 1160 594 1201 q 635 1061 632 1119 l 528 1061 m 310 864 q 345 894 326 878 q 378 926 364 911 q 342 957 351 938 q 333 996 333 976 q 353 1046 333 1024 q 414 1068 374 1068 q 472 1048 446 1068 q 499 986 499 1028 q 493 948 499 967 q 472 908 488 929 q 431 861 457 886 q 361 806 404 836 l 310 864 z "},"ἧ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 522 1061 q 510 1107 521 1088 q 484 1139 500 1126 q 449 1157 468 1151 q 411 1163 429 1163 q 373 1157 392 1163 q 338 1139 354 1151 q 312 1107 322 1126 q 300 1061 301 1088 l 193 1061 q 215 1160 196 1119 q 263 1228 233 1201 q 331 1268 292 1256 q 411 1281 369 1281 q 492 1268 453 1281 q 560 1228 531 1256 q 608 1160 589 1201 q 629 1061 626 1119 l 522 1061 m 467 806 q 397 861 424 836 q 356 908 371 886 q 335 948 340 929 q 329 986 329 967 q 356 1048 329 1028 q 414 1068 382 1068 q 474 1046 454 1068 q 494 996 494 1024 q 485 957 494 976 q 450 926 476 938 q 483 894 464 911 q 518 864 501 878 l 467 806 z "},"Ἠ":{"ha":1243,"x_min":6,"x_max":1132,"o":"m 915 963 l 1132 963 l 1132 0 l 915 0 l 915 408 l 551 408 l 551 0 l 335 0 l 335 963 l 551 963 l 551 594 l 915 594 l 915 963 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 z "},"Ἡ":{"ha":1219,"x_min":1,"x_max":1108,"o":"m 892 963 l 1108 963 l 1108 0 l 892 0 l 892 408 l 528 408 l 528 0 l 311 0 l 311 963 l 528 963 l 528 594 l 892 594 l 892 963 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ἢ":{"ha":1560,"x_min":11,"x_max":1449,"o":"m 1232 963 l 1449 963 l 1449 0 l 1232 0 l 1232 408 l 868 408 l 868 0 l 651 0 l 651 963 l 868 963 l 868 594 l 1232 594 l 1232 963 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 z "},"Ἣ":{"ha":1517,"x_min":11,"x_max":1406,"o":"m 1189 963 l 1406 963 l 1406 0 l 1189 0 l 1189 408 l 825 408 l 825 0 l 608 0 l 608 963 l 825 963 l 825 594 l 1189 594 l 1189 963 m 375 990 l 543 724 l 451 657 l 254 904 l 375 990 m 183 647 q 60 762 110 699 q 11 888 11 825 q 37 966 11 939 q 107 993 63 993 q 176 967 150 993 q 203 901 203 942 q 186 849 203 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ἤ":{"ha":1506,"x_min":4,"x_max":1394,"o":"m 1178 963 l 1394 963 l 1394 0 l 1178 0 l 1178 408 l 814 408 l 814 0 l 597 0 l 597 963 l 814 963 l 814 594 l 1178 594 l 1178 963 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 z "},"Ἥ":{"ha":1531,"x_min":4,"x_max":1419,"o":"m 1203 963 l 1419 963 l 1419 0 l 1203 0 l 1203 408 l 839 408 l 839 0 l 622 0 l 622 963 l 839 963 l 839 594 l 1203 594 l 1203 963 m 557 904 l 360 657 l 268 724 l 436 990 l 557 904 m 176 647 q 53 762 103 699 q 4 888 4 825 q 30 966 4 939 q 100 993 56 993 q 169 967 143 993 q 196 901 196 942 q 179 849 196 874 q 135 814 163 825 q 180 760 154 786 q 239 707 206 735 l 176 647 z "},"Ἦ":{"ha":1382,"x_min":-11,"x_max":1271,"o":"m 1054 963 l 1271 963 l 1271 0 l 1054 0 l 1054 408 l 690 408 l 690 0 l 474 0 l 474 963 l 690 963 l 690 594 l 1054 594 l 1054 963 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 z "},"Ἧ":{"ha":1379,"x_min":-11,"x_max":1268,"o":"m 1051 963 l 1268 963 l 1268 0 l 1051 0 l 1051 408 l 688 408 l 688 0 l 471 0 l 471 963 l 688 963 l 688 594 l 1051 594 l 1051 963 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 z "},"ἰ":{"ha":429,"x_min":76,"x_max":401,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 76 868 q 135 922 110 896 q 181 975 161 947 q 135 1010 153 986 q 117 1063 117 1035 q 144 1128 117 1103 q 215 1154 172 1154 q 290 1127 260 1154 q 321 1049 321 1100 q 269 924 321 986 q 139 808 218 861 l 76 868 z "},"ἱ":{"ha":429,"x_min":94,"x_max":401,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 282 808 q 151 924 203 861 q 100 1049 100 986 q 131 1127 100 1100 q 206 1154 161 1154 q 276 1128 249 1154 q 304 1063 304 1103 q 286 1010 304 1035 q 240 975 268 986 q 285 922 260 947 q 344 868 311 896 l 282 808 z "},"ἲ":{"ha":429,"x_min":-90,"x_max":488,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 319 1151 l 488 885 l 396 818 l 199 1065 l 319 1151 m -90 868 q -31 922 -57 896 q 14 975 -6 947 q -31 1010 -14 986 q -47 1063 -47 1035 q -21 1128 -47 1103 q 49 1154 6 1154 q 119 1127 93 1154 q 144 1049 144 1100 q 95 923 144 985 q -28 808 46 861 l -90 868 z "},"ἳ":{"ha":429,"x_min":-74,"x_max":458,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 290 1151 l 458 885 l 367 818 l 169 1065 l 290 1151 m 99 808 q -24 923 25 860 q -74 1049 -74 986 q -48 1127 -74 1100 q 22 1154 -22 1154 q 92 1128 65 1154 q 118 1063 118 1103 q 101 1010 118 1035 q 57 975 85 986 q 102 922 76 947 q 161 868 128 896 l 99 808 z "},"ἴ":{"ha":429,"x_min":-43,"x_max":492,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 492 1065 l 294 818 l 203 885 l 371 1151 l 492 1065 m -43 868 q 16 922 -10 896 q 61 975 42 947 q 17 1010 33 986 q 0 1063 0 1035 q 26 1128 0 1103 q 96 1154 53 1154 q 166 1127 140 1154 q 192 1049 192 1100 q 142 923 192 985 q 19 808 93 861 l -43 868 z "},"ἵ":{"ha":429,"x_min":-56,"x_max":497,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 497 1065 l 300 818 l 208 885 l 376 1151 l 497 1065 m 117 808 q -6 923 43 860 q -56 1049 -56 986 q -30 1127 -56 1100 q 40 1154 -4 1154 q 110 1128 83 1154 q 136 1063 136 1103 q 119 1010 136 1035 q 75 975 103 986 q 120 922 94 947 q 179 868 146 896 l 117 808 z "},"ἶ":{"ha":429,"x_min":-10,"x_max":426,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 319 1061 q 308 1107 318 1088 q 281 1139 297 1126 q 246 1157 265 1151 q 208 1163 226 1163 q 170 1157 189 1163 q 135 1139 151 1151 q 109 1107 119 1126 q 97 1061 99 1088 l -10 1061 q 12 1160 -7 1119 q 60 1228 31 1201 q 128 1268 89 1256 q 208 1281 167 1281 q 289 1268 250 1281 q 357 1228 328 1256 q 405 1160 386 1201 q 426 1061 424 1119 l 319 1061 m 101 864 q 137 894 118 878 q 169 926 156 911 q 134 957 143 938 q 125 996 125 976 q 145 1046 125 1024 q 206 1068 165 1068 q 264 1048 238 1068 q 290 986 290 1028 q 285 948 290 967 q 264 908 279 929 q 222 861 249 886 q 153 806 196 836 l 101 864 z "},"ἷ":{"ha":429,"x_min":-10,"x_max":426,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 319 1061 q 308 1107 318 1088 q 281 1139 297 1126 q 246 1157 265 1151 q 208 1163 226 1163 q 170 1157 189 1163 q 135 1139 151 1151 q 109 1107 119 1126 q 97 1061 99 1088 l -10 1061 q 12 1160 -7 1119 q 60 1228 31 1201 q 128 1268 89 1256 q 208 1281 167 1281 q 289 1268 250 1281 q 357 1228 328 1256 q 405 1160 386 1201 q 426 1061 424 1119 l 319 1061 m 264 806 q 194 861 221 836 q 153 908 168 886 q 132 948 138 929 q 126 986 126 967 q 153 1048 126 1028 q 211 1068 179 1068 q 272 1046 251 1068 q 292 996 292 1024 q 283 957 292 976 q 247 926 274 938 q 280 894 261 911 q 315 864 299 878 l 264 806 z "},"Ἰ":{"ha":657,"x_min":6,"x_max":546,"o":"m 329 963 l 546 963 l 546 0 l 329 0 l 329 963 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 z "},"Ἱ":{"ha":660,"x_min":1,"x_max":549,"o":"m 332 963 l 549 963 l 549 0 l 332 0 l 332 963 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ἲ":{"ha":979,"x_min":11,"x_max":868,"o":"m 651 963 l 868 963 l 868 0 l 651 0 l 651 963 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 z "},"Ἳ":{"ha":936,"x_min":11,"x_max":825,"o":"m 608 963 l 825 963 l 825 0 l 608 0 l 608 963 m 375 990 l 543 724 l 451 657 l 254 904 l 375 990 m 183 647 q 60 762 110 699 q 11 888 11 825 q 37 966 11 939 q 107 993 63 993 q 176 967 150 993 q 203 901 203 942 q 186 849 203 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ἴ":{"ha":925,"x_min":4,"x_max":814,"o":"m 597 963 l 814 963 l 814 0 l 597 0 l 597 963 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 z "},"Ἵ":{"ha":950,"x_min":4,"x_max":839,"o":"m 622 963 l 839 963 l 839 0 l 622 0 l 622 963 m 557 904 l 360 657 l 268 724 l 436 990 l 557 904 m 176 647 q 53 762 103 699 q 4 888 4 825 q 30 966 4 939 q 100 993 56 993 q 169 967 143 993 q 196 901 196 942 q 179 849 196 874 q 135 814 163 825 q 180 760 154 786 q 239 707 206 735 l 176 647 z "},"Ἶ":{"ha":801,"x_min":-11,"x_max":690,"o":"m 474 963 l 690 963 l 690 0 l 474 0 l 474 963 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 z "},"Ἷ":{"ha":799,"x_min":-11,"x_max":688,"o":"m 471 963 l 688 963 l 688 0 l 471 0 l 471 963 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 z "},"ὀ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 310 868 q 369 922 343 896 q 414 975 394 947 q 368 1010 386 986 q 350 1063 350 1035 q 378 1128 350 1103 q 449 1154 406 1154 q 524 1127 493 1154 q 554 1049 554 1100 q 503 924 554 986 q 372 808 451 861 l 310 868 z "},"ὁ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 479 808 q 349 924 400 861 q 297 1049 297 986 q 328 1127 297 1100 q 403 1154 358 1154 q 474 1128 446 1154 q 501 1063 501 1103 q 483 1010 501 1035 q 438 975 465 986 q 483 922 457 947 q 542 868 508 896 l 479 808 z "},"ὂ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 551 1151 l 719 885 l 628 818 l 431 1065 l 551 1151 m 142 868 q 201 922 175 896 q 246 975 226 947 q 201 1010 218 986 q 185 1063 185 1035 q 211 1128 185 1103 q 281 1154 238 1154 q 351 1127 325 1154 q 376 1049 376 1100 q 327 923 376 985 q 204 808 278 861 l 142 868 z "},"ὃ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 503 1151 l 671 885 l 579 818 l 382 1065 l 503 1151 m 311 808 q 188 923 238 860 q 139 1049 139 986 q 165 1127 139 1100 q 235 1154 190 1154 q 304 1128 278 1154 q 331 1063 331 1103 q 314 1010 331 1035 q 269 975 297 986 q 315 922 289 947 q 374 868 340 896 l 311 808 z "},"ὄ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 731 1065 l 533 818 l 442 885 l 610 1151 l 731 1065 m 196 868 q 255 922 229 896 q 300 975 281 947 q 256 1010 272 986 q 239 1063 239 1035 q 265 1128 239 1103 q 335 1154 292 1154 q 405 1127 379 1154 q 431 1049 431 1100 q 381 923 431 985 q 258 808 332 861 l 196 868 z "},"ὅ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 717 1065 l 519 818 l 428 885 l 596 1151 l 717 1065 m 336 808 q 213 923 263 860 q 164 1049 164 986 q 190 1127 164 1100 q 260 1154 215 1154 q 329 1128 303 1154 q 356 1063 356 1103 q 339 1010 356 1035 q 294 975 322 986 q 340 922 314 947 q 399 868 365 896 l 336 808 z "},"Ὀ":{"ha":1249,"x_min":6,"x_max":1179,"o":"m 444 482 q 462 354 444 411 q 512 256 479 297 q 592 193 544 215 q 700 171 639 171 q 808 193 760 171 q 888 256 856 215 q 938 354 921 297 q 956 482 956 411 q 938 610 956 553 q 888 709 921 668 q 808 772 856 750 q 700 794 760 794 q 592 772 639 794 q 512 708 544 749 q 462 609 479 667 q 444 482 444 551 m 1179 482 q 1142 265 1179 358 q 1042 108 1106 171 q 890 13 978 44 q 700 -19 801 -19 q 514 13 601 -19 q 361 108 426 44 q 258 265 296 171 q 221 482 221 358 q 260 699 221 606 q 365 857 299 793 q 517 953 431 921 q 700 985 604 985 q 886 953 799 985 q 1039 857 974 921 q 1142 699 1104 793 q 1179 482 1179 606 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 z "},"Ὁ":{"ha":1290,"x_min":1,"x_max":1221,"o":"m 486 482 q 503 354 486 411 q 553 256 521 297 q 633 193 586 215 q 742 171 681 171 q 849 193 801 171 q 930 256 897 215 q 980 354 963 297 q 997 482 997 411 q 980 610 997 553 q 930 709 963 668 q 849 772 897 750 q 742 794 801 794 q 633 772 681 794 q 553 708 586 749 q 503 609 521 667 q 486 482 486 551 m 1221 482 q 1184 265 1221 358 q 1083 108 1147 171 q 931 13 1019 44 q 742 -19 843 -19 q 556 13 643 -19 q 403 108 468 44 q 300 265 338 171 q 263 482 263 358 q 301 699 263 606 q 406 857 340 793 q 559 953 472 921 q 742 985 646 985 q 928 953 840 985 q 1081 857 1015 921 q 1183 699 1146 793 q 1221 482 1221 606 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"Ὂ":{"ha":1610,"x_min":11,"x_max":1540,"o":"m 806 482 q 823 354 806 411 q 873 256 840 297 q 953 193 906 215 q 1061 171 1000 171 q 1169 193 1121 171 q 1249 256 1217 215 q 1299 354 1282 297 q 1317 482 1317 411 q 1299 610 1317 553 q 1249 709 1282 668 q 1169 772 1217 750 q 1061 794 1121 794 q 953 772 1000 794 q 873 708 906 749 q 823 609 840 667 q 806 482 806 551 m 1540 482 q 1503 265 1540 358 q 1403 108 1467 171 q 1251 13 1339 44 q 1061 -19 1163 -19 q 875 13 963 -19 q 722 108 788 44 q 619 265 657 171 q 582 482 582 358 q 621 699 582 606 q 726 857 660 793 q 878 953 792 921 q 1061 985 965 985 q 1247 953 1160 985 q 1400 857 1335 921 q 1503 699 1465 793 q 1540 482 1540 606 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 z "},"Ὃ":{"ha":1568,"x_min":13,"x_max":1499,"o":"m 764 482 q 781 354 764 411 q 831 256 799 297 q 911 193 864 215 q 1019 171 958 171 q 1127 193 1079 171 q 1208 256 1175 215 q 1258 354 1240 297 q 1275 482 1275 411 q 1258 610 1275 553 q 1208 709 1240 668 q 1127 772 1175 750 q 1019 794 1079 794 q 911 772 958 794 q 831 708 864 749 q 781 609 799 667 q 764 482 764 551 m 1499 482 q 1462 265 1499 358 q 1361 108 1425 171 q 1209 13 1297 44 q 1019 -19 1121 -19 q 833 13 921 -19 q 681 108 746 44 q 578 265 615 171 q 540 482 540 358 q 579 699 540 606 q 684 857 618 793 q 837 953 750 921 q 1019 985 924 985 q 1206 953 1118 985 q 1358 857 1293 921 q 1461 699 1424 793 q 1499 482 1499 606 m 376 990 l 544 724 l 453 657 l 256 904 l 376 990 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 z "},"Ὄ":{"ha":1519,"x_min":4,"x_max":1450,"o":"m 715 482 q 733 354 715 411 q 783 256 750 297 q 863 193 815 215 q 971 171 910 171 q 1078 193 1031 171 q 1159 256 1126 215 q 1209 354 1192 297 q 1226 482 1226 411 q 1209 610 1226 553 q 1159 709 1192 668 q 1078 772 1126 750 q 971 794 1031 794 q 863 772 910 794 q 783 708 815 749 q 733 609 750 667 q 715 482 715 551 m 1450 482 q 1413 265 1450 358 q 1313 108 1376 171 q 1160 13 1249 44 q 971 -19 1072 -19 q 785 13 872 -19 q 632 108 697 44 q 529 265 567 171 q 492 482 492 358 q 531 699 492 606 q 635 857 569 793 q 788 953 701 921 q 971 985 875 985 q 1157 953 1069 985 q 1310 857 1244 921 q 1413 699 1375 793 q 1450 482 1450 606 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 z "},"Ὅ":{"ha":1575,"x_min":26,"x_max":1506,"o":"m 771 482 q 788 354 771 411 q 838 256 806 297 q 918 193 871 215 q 1026 171 965 171 q 1134 193 1086 171 q 1215 256 1182 215 q 1265 354 1247 297 q 1282 482 1282 411 q 1265 610 1282 553 q 1215 709 1247 668 q 1134 772 1182 750 q 1026 794 1086 794 q 918 772 965 794 q 838 708 871 749 q 788 609 806 667 q 771 482 771 551 m 1506 482 q 1469 265 1506 358 q 1368 108 1432 171 q 1216 13 1304 44 q 1026 -19 1128 -19 q 840 13 928 -19 q 688 108 753 44 q 585 265 622 171 q 547 482 547 358 q 586 699 547 606 q 691 857 625 793 q 844 953 757 921 q 1026 985 931 985 q 1213 953 1125 985 q 1365 857 1300 921 q 1468 699 1431 793 q 1506 482 1506 606 m 579 904 l 382 657 l 290 724 l 458 990 l 579 904 m 199 647 q 76 762 125 699 q 26 888 26 825 q 52 966 26 939 q 122 993 78 993 q 192 967 165 993 q 218 901 218 942 q 201 849 218 874 q 157 814 185 825 q 202 760 176 786 q 261 707 228 735 l 199 647 z "},"ὐ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 296 868 q 355 922 329 896 q 400 975 381 947 q 354 1010 372 986 q 336 1063 336 1035 q 364 1128 336 1103 q 435 1154 392 1154 q 510 1127 479 1154 q 540 1049 540 1100 q 489 924 540 986 q 358 808 438 861 l 296 868 z "},"ὑ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 488 808 q 357 924 408 861 q 306 1049 306 986 q 336 1127 306 1100 q 411 1154 367 1154 q 482 1128 454 1154 q 510 1063 510 1103 q 492 1010 510 1035 q 446 975 474 986 q 491 922 465 947 q 550 868 517 896 l 488 808 z "},"ὒ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 535 1151 l 703 885 l 611 818 l 414 1065 l 535 1151 m 125 868 q 184 922 158 896 q 229 975 210 947 q 185 1010 201 986 q 168 1063 168 1035 q 194 1128 168 1103 q 264 1154 221 1154 q 334 1127 308 1154 q 360 1049 360 1100 q 310 923 360 985 q 188 808 261 861 l 125 868 z "},"ὓ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 488 1151 l 656 885 l 564 818 l 367 1065 l 488 1151 m 296 808 q 173 923 222 860 q 124 1049 124 986 q 149 1127 124 1100 q 219 1154 175 1154 q 289 1128 263 1154 q 315 1063 315 1103 q 299 1010 315 1035 q 254 975 282 986 q 299 922 274 947 q 358 868 325 896 l 296 808 z "},"ὔ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 704 1065 l 507 818 l 415 885 l 583 1151 l 704 1065 m 169 868 q 228 922 203 896 q 274 975 254 947 q 229 1010 246 986 q 213 1063 213 1035 q 239 1128 213 1103 q 308 1154 265 1154 q 378 1127 353 1154 q 404 1049 404 1100 q 355 923 404 985 q 232 808 306 861 l 169 868 z "},"ὕ":{"ha":824,"x_min":90,"x_max":744,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 744 1065 l 547 818 l 456 885 l 624 1151 l 744 1065 m 364 808 q 241 923 290 860 q 192 1049 192 986 q 217 1127 192 1100 q 288 1154 243 1154 q 357 1128 331 1154 q 383 1063 383 1103 q 367 1010 383 1035 q 322 975 350 986 q 367 922 342 947 q 426 868 393 896 l 364 808 z "},"ὖ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 542 1061 q 530 1107 540 1088 q 503 1139 519 1126 q 468 1157 488 1151 q 431 1163 449 1163 q 392 1157 411 1163 q 358 1139 374 1151 q 331 1107 342 1126 q 319 1061 321 1088 l 213 1061 q 234 1160 215 1119 q 282 1228 253 1201 q 350 1268 311 1256 q 431 1281 389 1281 q 511 1268 472 1281 q 579 1228 550 1256 q 627 1160 608 1201 q 649 1061 646 1119 l 542 1061 m 324 864 q 359 894 340 878 q 392 926 378 911 q 356 957 365 938 q 347 996 347 976 q 367 1046 347 1024 q 428 1068 388 1068 q 486 1048 460 1068 q 513 986 513 1028 q 507 948 513 967 q 486 908 501 929 q 444 861 471 886 q 375 806 418 836 l 324 864 z "},"ὗ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 522 1061 q 510 1107 521 1088 q 484 1139 500 1126 q 449 1157 468 1151 q 411 1163 429 1163 q 373 1157 392 1163 q 338 1139 354 1151 q 312 1107 322 1126 q 300 1061 301 1088 l 193 1061 q 215 1160 196 1119 q 263 1228 233 1201 q 331 1268 292 1256 q 411 1281 369 1281 q 492 1268 453 1281 q 560 1228 531 1256 q 608 1160 589 1201 q 629 1061 626 1119 l 522 1061 m 467 806 q 397 861 424 836 q 356 908 371 886 q 335 948 340 929 q 329 986 329 967 q 356 1048 329 1028 q 414 1068 382 1068 q 474 1046 454 1068 q 494 996 494 1024 q 485 957 494 976 q 450 926 476 938 q 483 894 464 911 q 518 864 501 878 l 467 806 z "},"Ὑ":{"ha":1139,"x_min":-12,"x_max":1132,"o":"m 685 567 q 796 764 743 665 q 893 963 849 863 l 1132 963 q 968 661 1053 807 q 789 368 883 515 l 789 0 l 572 0 l 572 365 q 392 660 478 513 q 228 963 307 807 l 479 963 q 575 764 524 863 q 685 567 626 665 m 169 647 q 39 763 90 700 q -12 888 -12 825 q 18 966 -12 939 q 93 993 49 993 q 164 967 136 993 q 192 901 192 942 q 174 849 192 874 q 128 814 156 825 q 173 760 147 786 q 232 707 199 735 l 169 647 z "},"Ὓ":{"ha":1417,"x_min":-1,"x_max":1410,"o":"m 963 567 q 1074 764 1021 665 q 1171 963 1126 863 l 1410 963 q 1246 661 1331 807 q 1067 368 1161 515 l 1067 0 l 850 0 l 850 365 q 670 660 756 513 q 506 963 585 807 l 757 963 q 853 764 801 863 q 963 567 904 665 m 363 990 l 531 724 l 439 657 l 242 904 l 363 990 m 171 647 q 48 762 97 699 q -1 888 -1 825 q 24 966 -1 939 q 94 993 50 993 q 164 967 138 993 q 190 901 190 942 q 174 849 190 874 q 129 814 157 825 q 174 760 149 786 q 233 707 200 735 l 171 647 z "},"Ὕ":{"ha":1486,"x_min":-1,"x_max":1479,"o":"m 1032 567 q 1143 764 1090 665 q 1240 963 1196 863 l 1479 963 q 1315 661 1400 807 q 1136 368 1231 515 l 1136 0 l 919 0 l 919 365 q 740 660 825 513 q 575 963 654 807 l 826 963 q 922 764 871 863 q 1032 567 974 665 m 551 904 l 354 657 l 263 724 l 431 990 l 551 904 m 171 647 q 48 762 97 699 q -1 888 -1 825 q 24 966 -1 939 q 94 993 50 993 q 164 967 138 993 q 190 901 190 942 q 174 849 190 874 q 129 814 157 825 q 174 760 149 786 q 233 707 200 735 l 171 647 z "},"Ὗ":{"ha":1358,"x_min":-25,"x_max":1351,"o":"m 904 567 q 1015 764 963 665 q 1113 963 1068 863 l 1351 963 q 1188 661 1272 807 q 1008 368 1103 515 l 1008 0 l 792 0 l 792 365 q 612 660 697 513 q 447 963 526 807 l 699 963 q 794 764 743 863 q 904 567 846 665 m 304 900 q 292 946 303 926 q 266 978 282 965 q 231 996 250 990 q 193 1001 211 1001 q 155 996 174 1001 q 120 978 136 990 q 94 946 104 965 q 82 900 83 926 l -25 900 q -3 999 -22 958 q 44 1067 15 1040 q 113 1107 74 1094 q 193 1119 151 1119 q 274 1107 235 1119 q 342 1067 313 1094 q 390 999 371 1040 q 411 900 408 958 l 304 900 m 249 644 q 179 700 206 675 q 138 747 153 725 q 117 787 122 768 q 111 825 111 806 q 138 887 111 867 q 196 907 164 907 q 256 885 236 907 q 276 835 276 863 q 267 796 276 815 q 232 765 258 776 q 265 733 246 750 q 300 703 283 717 l 249 644 z "},"ὠ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 463 868 q 522 922 496 896 q 567 975 547 947 q 521 1010 539 986 q 503 1063 503 1035 q 531 1128 503 1103 q 601 1154 558 1154 q 676 1127 646 1154 q 707 1049 707 1100 q 656 924 707 986 q 525 808 604 861 l 463 868 z "},"ὡ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 640 808 q 510 924 561 861 q 458 1049 458 986 q 489 1127 458 1100 q 564 1154 519 1154 q 635 1128 607 1154 q 663 1063 663 1103 q 644 1010 663 1035 q 599 975 626 986 q 644 922 618 947 q 703 868 669 896 l 640 808 z "},"ὢ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 711 1151 l 879 885 l 788 818 l 590 1065 l 711 1151 m 301 868 q 360 922 335 896 q 406 975 386 947 q 361 1010 378 986 q 344 1063 344 1035 q 371 1128 344 1103 q 440 1154 397 1154 q 510 1127 485 1154 q 536 1049 536 1100 q 487 923 536 985 q 364 808 438 861 l 301 868 z "},"ὣ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 654 1151 l 822 885 l 731 818 l 533 1065 l 654 1151 m 463 808 q 340 923 389 860 q 290 1049 290 986 q 316 1127 290 1100 q 386 1154 342 1154 q 456 1128 429 1154 q 482 1063 482 1103 q 465 1010 482 1035 q 421 975 449 986 q 466 922 440 947 q 525 868 492 896 l 463 808 z "},"ὤ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 899 1065 l 701 818 l 610 885 l 778 1151 l 899 1065 m 364 868 q 423 922 397 896 q 468 975 449 947 q 424 1010 440 986 q 407 1063 407 1035 q 433 1128 407 1103 q 503 1154 460 1154 q 573 1127 547 1154 q 599 1049 599 1100 q 549 923 599 985 q 426 808 500 861 l 364 868 z "},"ὥ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 883 1065 l 686 818 l 594 885 l 763 1151 l 883 1065 m 503 808 q 380 923 429 860 q 331 1049 331 986 q 356 1127 331 1100 q 426 1154 382 1154 q 496 1128 469 1154 q 522 1063 522 1103 q 506 1010 522 1035 q 461 975 489 986 q 506 922 481 947 q 565 868 532 896 l 503 808 z "},"ὦ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 694 1061 q 683 1107 693 1088 q 656 1139 672 1126 q 621 1157 640 1151 q 583 1163 601 1163 q 545 1157 564 1163 q 510 1139 526 1151 q 484 1107 494 1126 q 472 1061 474 1088 l 365 1061 q 387 1160 368 1119 q 435 1228 406 1201 q 503 1268 464 1256 q 583 1281 542 1281 q 664 1268 625 1281 q 732 1228 703 1256 q 780 1160 761 1201 q 801 1061 799 1119 l 694 1061 m 476 864 q 512 894 493 878 q 544 926 531 911 q 509 957 518 938 q 500 996 500 976 q 520 1046 500 1024 q 581 1068 540 1068 q 639 1048 613 1068 q 665 986 665 1028 q 660 948 665 967 q 639 908 654 929 q 597 861 624 886 q 528 806 571 836 l 476 864 z "},"ὧ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 703 1061 q 691 1107 701 1088 q 665 1139 681 1126 q 629 1157 649 1151 q 592 1163 610 1163 q 553 1157 572 1163 q 519 1139 535 1151 q 492 1107 503 1126 q 481 1061 482 1088 l 374 1061 q 395 1160 376 1119 q 443 1228 414 1201 q 511 1268 472 1256 q 592 1281 550 1281 q 672 1268 633 1281 q 740 1228 711 1256 q 788 1160 769 1201 q 810 1061 807 1119 l 703 1061 m 647 806 q 578 861 604 836 q 536 908 551 886 q 515 948 521 929 q 510 986 510 967 q 536 1048 510 1028 q 594 1068 563 1068 q 655 1046 635 1068 q 675 996 675 1024 q 666 957 675 976 q 631 926 657 938 q 663 894 644 911 q 699 864 682 878 l 647 806 z "},"Ὠ":{"ha":1239,"x_min":6,"x_max":1183,"o":"m 696 985 q 881 955 796 985 q 1029 867 967 925 q 1127 723 1092 808 q 1163 528 1163 638 q 1018 179 1163 328 l 1183 179 l 1183 0 l 763 0 l 763 161 q 831 228 799 192 q 887 309 863 265 q 925 406 911 353 q 939 521 939 458 q 874 726 939 656 q 696 797 808 797 q 518 726 583 797 q 453 521 453 656 q 467 406 453 458 q 504 309 481 353 q 560 228 528 265 q 628 161 592 192 l 628 0 l 207 0 l 207 179 l 372 179 q 229 528 229 329 q 265 723 229 638 q 363 867 300 808 q 510 955 425 925 q 696 985 596 985 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 z "},"Ὡ":{"ha":1297,"x_min":4,"x_max":1242,"o":"m 754 985 q 940 955 854 985 q 1088 867 1025 925 q 1185 723 1150 808 q 1221 528 1221 638 q 1076 179 1221 328 l 1242 179 l 1242 0 l 821 0 l 821 161 q 889 228 857 192 q 945 309 921 265 q 983 406 969 353 q 997 521 997 458 q 932 726 997 656 q 754 797 867 797 q 576 726 642 797 q 511 521 511 656 q 525 406 511 458 q 563 309 539 353 q 618 228 586 265 q 686 161 650 192 l 686 0 l 265 0 l 265 179 l 431 179 q 288 528 288 329 q 323 723 288 638 q 421 867 358 808 q 569 955 483 925 q 754 985 654 985 m 186 647 q 56 763 107 700 q 4 888 4 825 q 35 966 4 939 q 110 993 65 993 q 181 967 153 993 q 208 901 208 942 q 190 849 208 874 q 144 814 172 825 q 190 760 164 786 q 249 707 215 735 l 186 647 z "},"Ὢ":{"ha":1614,"x_min":11,"x_max":1558,"o":"m 1071 985 q 1256 955 1171 985 q 1404 867 1342 925 q 1502 723 1467 808 q 1538 528 1538 638 q 1393 179 1538 328 l 1558 179 l 1558 0 l 1138 0 l 1138 161 q 1206 228 1174 192 q 1262 309 1238 265 q 1300 406 1286 353 q 1314 521 1314 458 q 1249 726 1314 656 q 1071 797 1183 797 q 893 726 958 797 q 828 521 828 656 q 842 406 828 458 q 879 309 856 353 q 935 228 903 265 q 1003 161 967 192 l 1003 0 l 582 0 l 582 179 l 747 179 q 604 528 604 329 q 640 723 604 638 q 738 867 675 808 q 885 955 800 925 q 1071 985 971 985 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 z "},"Ὣ":{"ha":1569,"x_min":13,"x_max":1514,"o":"m 1026 985 q 1212 955 1126 985 q 1360 867 1297 925 q 1458 723 1422 808 q 1493 528 1493 638 q 1349 179 1493 328 l 1514 179 l 1514 0 l 1093 0 l 1093 161 q 1161 228 1129 192 q 1217 309 1193 265 q 1256 406 1242 353 q 1269 521 1269 458 q 1204 726 1269 656 q 1026 797 1139 797 q 849 726 914 797 q 783 521 783 656 q 797 406 783 458 q 835 309 811 353 q 890 228 858 265 q 958 161 922 192 l 958 0 l 538 0 l 538 179 l 703 179 q 560 528 560 329 q 595 723 560 638 q 693 867 631 808 q 841 955 756 925 q 1026 985 926 985 m 376 990 l 544 724 l 453 657 l 256 904 l 376 990 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 z "},"Ὤ":{"ha":1490,"x_min":4,"x_max":1435,"o":"m 947 985 q 1133 955 1047 985 q 1281 867 1218 925 q 1378 723 1343 808 q 1414 528 1414 638 q 1269 179 1414 328 l 1435 179 l 1435 0 l 1014 0 l 1014 161 q 1082 228 1050 192 q 1138 309 1114 265 q 1176 406 1163 353 q 1190 521 1190 458 q 1125 726 1190 656 q 947 797 1060 797 q 769 726 835 797 q 704 521 704 656 q 718 406 704 458 q 756 309 732 353 q 811 228 779 265 q 879 161 843 192 l 879 0 l 458 0 l 458 179 l 624 179 q 481 528 481 329 q 516 723 481 638 q 614 867 551 808 q 762 955 676 925 q 947 985 847 985 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 z "},"Ὥ":{"ha":1517,"x_min":13,"x_max":1461,"o":"m 974 985 q 1159 955 1074 985 q 1307 867 1244 925 q 1405 723 1369 808 q 1440 528 1440 638 q 1296 179 1440 328 l 1461 179 l 1461 0 l 1040 0 l 1040 161 q 1108 228 1076 192 q 1165 309 1140 265 q 1203 406 1189 353 q 1217 521 1217 458 q 1151 726 1217 656 q 974 797 1086 797 q 796 726 861 797 q 731 521 731 656 q 744 406 731 458 q 782 309 758 353 q 838 228 806 265 q 906 161 869 192 l 906 0 l 485 0 l 485 179 l 650 179 q 507 528 507 329 q 542 723 507 638 q 640 867 578 808 q 788 955 703 925 q 974 985 874 985 m 565 904 l 368 657 l 276 724 l 444 990 l 565 904 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 z "},"Ὦ":{"ha":1394,"x_min":-11,"x_max":1339,"o":"m 851 985 q 1037 955 951 985 q 1185 867 1122 925 q 1283 723 1247 808 q 1318 528 1318 638 q 1174 179 1318 328 l 1339 179 l 1339 0 l 918 0 l 918 161 q 986 228 954 192 q 1042 309 1018 265 q 1081 406 1067 353 q 1094 521 1094 458 q 1029 726 1094 656 q 851 797 964 797 q 674 726 739 797 q 608 521 608 656 q 622 406 608 458 q 660 309 636 353 q 715 228 683 265 q 783 161 747 192 l 783 0 l 363 0 l 363 179 l 528 179 q 385 528 385 329 q 420 723 385 638 q 518 867 456 808 q 666 955 581 925 q 851 985 751 985 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 z "},"Ὧ":{"ha":1394,"x_min":-11,"x_max":1339,"o":"m 851 985 q 1037 955 951 985 q 1185 867 1122 925 q 1283 723 1247 808 q 1318 528 1318 638 q 1174 179 1318 328 l 1339 179 l 1339 0 l 918 0 l 918 161 q 986 228 954 192 q 1042 309 1018 265 q 1081 406 1067 353 q 1094 521 1094 458 q 1029 726 1094 656 q 851 797 964 797 q 674 726 739 797 q 608 521 608 656 q 622 406 608 458 q 660 309 636 353 q 715 228 683 265 q 783 161 747 192 l 783 0 l 363 0 l 363 179 l 528 179 q 385 528 385 329 q 420 723 385 638 q 518 867 456 808 q 666 955 581 925 q 851 985 751 985 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 z "},"ὰ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 336 1096 l 611 914 l 540 804 l 247 953 l 336 1096 z "},"ά":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 603 953 l 310 804 l 239 914 l 514 1096 l 603 953 z "},"ὲ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 267 1096 l 542 914 l 471 804 l 178 953 l 267 1096 z "},"έ":{"ha":715,"x_min":51,"x_max":681,"o":"m 403 750 q 472 747 436 750 q 540 737 507 743 q 598 723 572 731 q 639 708 624 715 l 606 554 q 507 581 558 574 q 415 588 456 588 q 327 572 363 588 q 292 519 292 556 q 301 482 292 496 q 324 461 310 468 q 356 452 339 454 q 389 450 374 450 l 529 450 l 529 299 l 386 299 q 343 296 364 299 q 306 285 322 293 q 281 263 290 278 q 271 224 271 249 q 303 165 271 183 q 404 147 335 147 q 543 161 479 147 q 636 186 607 175 l 681 31 q 570 -2 649 15 q 379 -19 492 -19 q 269 -10 326 -19 q 163 24 211 -1 q 83 95 115 50 q 51 213 51 140 q 76 306 51 261 q 158 382 101 351 q 97 442 118 406 q 75 524 75 478 q 99 622 75 579 q 167 692 124 664 q 270 735 210 721 q 403 750 331 750 m 542 953 l 249 804 l 178 914 l 453 1096 l 542 953 z "},"ὴ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 281 1096 l 556 914 l 485 804 l 192 953 l 281 1096 z "},"ή":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 583 953 l 290 804 l 219 914 l 494 1096 l 583 953 z "},"ὶ":{"ha":429,"x_min":17,"x_max":401,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 106 1096 l 381 914 l 310 804 l 17 953 l 106 1096 z "},"ί":{"ha":429,"x_min":7,"x_max":401,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 371 953 l 78 804 l 7 914 l 282 1096 l 371 953 z "},"ὸ":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 328 1096 l 603 914 l 532 804 l 239 953 l 328 1096 z "},"ό":{"ha":843,"x_min":63,"x_max":781,"o":"m 781 367 q 756 209 781 281 q 683 87 731 138 q 570 8 636 36 q 422 -19 504 -19 q 276 8 342 -19 q 163 87 210 36 q 89 209 115 138 q 63 367 63 281 q 90 524 63 453 q 165 644 117 594 q 278 722 213 694 q 422 750 344 750 q 567 722 501 750 q 681 644 633 694 q 754 524 728 594 q 781 367 781 453 m 569 367 q 531 517 569 463 q 422 572 493 572 q 313 517 351 572 q 274 367 274 463 q 313 215 274 271 q 422 158 351 158 q 531 215 493 158 q 569 367 569 271 m 604 953 l 311 804 l 240 914 l 515 1096 l 604 953 z "},"ὺ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 283 1096 l 558 914 l 488 804 l 194 953 l 283 1096 z "},"ύ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 594 953 l 301 804 l 231 914 l 506 1096 l 594 953 z "},"ὼ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 447 1096 l 722 914 l 651 804 l 358 953 l 447 1096 z "},"ώ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 796 953 l 503 804 l 432 914 l 707 1096 l 796 953 z "},"ᾀ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 324 868 q 383 922 357 896 q 428 975 408 947 q 382 1010 400 986 q 364 1063 364 1035 q 392 1128 364 1103 q 463 1154 419 1154 q 538 1127 507 1154 q 568 1049 568 1100 q 517 924 568 986 q 386 808 465 861 l 324 868 z "},"ᾁ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 501 808 q 371 924 422 861 q 319 1049 319 986 q 350 1127 319 1100 q 425 1154 381 1154 q 496 1128 468 1154 q 524 1063 524 1103 q 506 1010 524 1035 q 460 975 488 986 q 505 922 479 947 q 564 868 531 896 l 501 808 z "},"ᾂ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 586 1151 l 754 885 l 663 818 l 465 1065 l 586 1151 m 176 868 q 235 922 210 896 q 281 975 261 947 q 236 1010 253 986 q 219 1063 219 1035 q 246 1128 219 1103 q 315 1154 272 1154 q 385 1127 360 1154 q 411 1049 411 1100 q 362 923 411 985 q 239 808 313 861 l 176 868 z "},"ᾃ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 514 1151 l 682 885 l 590 818 l 393 1065 l 514 1151 m 322 808 q 199 923 249 860 q 150 1049 150 986 q 176 1127 150 1100 q 246 1154 201 1154 q 315 1128 289 1154 q 342 1063 342 1103 q 325 1010 342 1035 q 281 975 308 986 q 326 922 300 947 q 385 868 351 896 l 322 808 z "},"ᾄ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 746 1065 l 549 818 l 457 885 l 625 1151 l 746 1065 m 211 868 q 270 922 244 896 q 315 975 296 947 q 271 1010 288 986 q 254 1063 254 1035 q 281 1128 254 1103 q 350 1154 307 1154 q 420 1127 394 1154 q 446 1049 446 1100 q 397 923 446 985 q 274 808 347 861 l 211 868 z "},"ᾅ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 731 1065 l 533 818 l 442 885 l 610 1151 l 731 1065 m 350 808 q 227 923 276 860 q 178 1049 178 986 q 203 1127 178 1100 q 274 1154 229 1154 q 343 1128 317 1154 q 369 1063 369 1103 q 353 1010 369 1035 q 308 975 336 986 q 353 922 328 947 q 413 868 379 896 l 350 808 z "},"ᾆ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 556 1061 q 544 1107 554 1088 q 517 1139 533 1126 q 482 1157 501 1151 q 444 1163 463 1163 q 406 1157 425 1163 q 372 1139 388 1151 q 345 1107 356 1126 q 333 1061 335 1088 l 226 1061 q 248 1160 229 1119 q 296 1228 267 1201 q 364 1268 325 1256 q 444 1281 403 1281 q 525 1268 486 1281 q 593 1228 564 1256 q 641 1160 622 1201 q 663 1061 660 1119 l 556 1061 m 338 864 q 373 894 354 878 q 406 926 392 911 q 370 957 379 938 q 361 996 361 976 q 381 1046 361 1024 q 442 1068 401 1068 q 500 1048 474 1068 q 526 986 526 1028 q 521 948 526 967 q 500 908 515 929 q 458 861 485 886 q 389 806 432 836 l 338 864 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 z "},"ᾇ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 522 1061 q 510 1107 521 1088 q 484 1139 500 1126 q 449 1157 468 1151 q 411 1163 429 1163 q 373 1157 392 1163 q 338 1139 354 1151 q 312 1107 322 1126 q 300 1061 301 1088 l 193 1061 q 215 1160 196 1119 q 263 1228 233 1201 q 331 1268 292 1256 q 411 1281 369 1281 q 492 1268 453 1281 q 560 1228 531 1256 q 608 1160 589 1201 q 629 1061 626 1119 l 522 1061 m 467 806 q 397 861 424 836 q 356 908 371 886 q 335 948 340 929 q 329 986 329 967 q 356 1048 329 1028 q 414 1068 382 1068 q 474 1046 454 1068 q 494 996 494 1024 q 485 957 494 976 q 450 926 476 938 q 483 894 464 911 q 518 864 501 878 l 467 806 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 z "},"ᾈ":{"ha":1429,"x_min":17,"x_max":1401,"o":"m 1376 -15 q 1239 2 1293 -15 q 1152 51 1185 19 q 1107 126 1119 82 q 1094 224 1094 169 l 1094 731 l 1301 731 l 1301 246 q 1320 172 1301 197 q 1401 143 1339 147 l 1376 -15 m 793 0 q 759 103 778 50 q 722 208 740 156 l 347 208 q 310 103 329 156 q 276 0 292 50 l 51 0 q 154 288 106 156 q 249 536 203 419 q 341 758 296 653 q 435 963 386 863 l 642 963 q 735 758 689 863 q 827 536 781 653 q 922 288 874 419 q 1025 0 971 156 l 793 0 m 533 744 q 513 688 526 724 q 481 604 499 651 q 441 500 463 557 q 397 381 419 443 l 671 381 q 628 500 649 443 q 588 604 607 557 q 556 688 569 651 q 533 744 542 724 m 17 707 q 76 760 50 735 q 121 814 101 786 q 75 849 93 825 q 57 901 57 874 q 85 967 57 942 q 156 993 113 993 q 231 966 200 993 q 261 888 261 939 q 210 763 261 825 q 79 647 158 700 l 17 707 z "},"ᾉ":{"ha":1472,"x_min":15,"x_max":1444,"o":"m 1419 -15 q 1282 2 1336 -15 q 1195 51 1228 19 q 1150 126 1163 82 q 1138 224 1138 169 l 1138 731 l 1344 731 l 1344 246 q 1363 172 1344 197 q 1444 143 1382 147 l 1419 -15 m 796 0 q 762 103 781 50 q 725 208 743 156 l 350 208 q 313 103 332 156 q 279 0 294 50 l 54 0 q 157 288 108 156 q 252 536 206 419 q 344 758 299 653 q 438 963 389 863 l 644 963 q 738 758 692 863 q 830 536 783 653 q 925 288 876 419 q 1028 0 974 156 l 796 0 m 536 744 q 515 688 529 724 q 483 604 501 651 q 444 500 465 557 q 400 381 422 443 l 674 381 q 631 500 651 443 q 591 604 610 557 q 558 688 572 651 q 536 744 544 724 m 197 647 q 67 763 118 700 q 15 888 15 825 q 46 966 15 939 q 121 993 76 993 q 192 967 164 993 q 219 901 219 942 q 201 849 219 874 q 156 814 183 825 q 201 760 175 786 q 260 707 226 735 l 197 647 z "},"ᾊ":{"ha":1782,"x_min":-3,"x_max":1754,"o":"m 1729 -15 q 1592 2 1646 -15 q 1505 51 1538 19 q 1460 126 1472 82 q 1447 224 1447 169 l 1447 731 l 1654 731 l 1654 246 q 1673 172 1654 197 q 1754 143 1692 147 l 1729 -15 m 1101 0 q 1067 103 1086 50 q 1031 208 1049 156 l 656 208 q 619 103 638 156 q 585 0 600 50 l 360 0 q 463 288 414 156 q 558 536 511 419 q 649 758 604 653 q 743 963 694 863 l 950 963 q 1043 758 997 863 q 1135 536 1089 653 q 1231 288 1182 419 q 1333 0 1279 156 l 1101 0 m 842 744 q 821 688 835 724 q 789 604 807 651 q 749 500 771 557 q 706 381 728 443 l 979 381 q 936 500 957 443 q 897 604 915 557 q 864 688 878 651 q 842 744 850 724 m 407 990 l 575 724 l 483 657 l 286 904 l 407 990 m -3 707 q 56 760 31 735 q 101 814 82 786 q 57 849 74 825 q 40 901 40 874 q 67 967 40 942 q 136 993 93 993 q 206 966 181 993 q 232 888 232 939 q 183 762 232 824 q 60 647 133 700 l -3 707 z "},"ᾋ":{"ha":1736,"x_min":-1,"x_max":1708,"o":"m 1683 -15 q 1546 2 1600 -15 q 1459 51 1492 19 q 1414 126 1426 82 q 1401 224 1401 169 l 1401 731 l 1608 731 l 1608 246 q 1627 172 1608 197 q 1708 143 1646 147 l 1683 -15 m 363 990 l 531 724 l 439 657 l 242 904 l 363 990 m 171 647 q 48 762 97 699 q -1 888 -1 825 q 24 966 -1 939 q 94 993 50 993 q 164 967 138 993 q 190 901 190 942 q 174 849 190 874 q 129 814 157 825 q 174 760 149 786 q 233 707 200 735 l 171 647 m 1060 0 q 1026 103 1044 50 q 989 208 1007 156 l 614 208 q 577 103 596 156 q 543 0 558 50 l 318 0 q 421 288 372 156 q 516 536 469 419 q 608 758 563 653 q 701 963 653 863 l 908 963 q 1001 758 956 863 q 1094 536 1047 653 q 1189 288 1140 419 q 1292 0 1238 156 l 1060 0 m 800 744 q 779 688 793 724 q 747 604 765 651 q 708 500 729 557 q 664 381 686 443 l 938 381 q 894 500 915 443 q 855 604 874 557 q 822 688 836 651 q 800 744 808 724 z "},"ᾌ":{"ha":1667,"x_min":-10,"x_max":1639,"o":"m 1614 -15 q 1476 2 1531 -15 q 1390 51 1422 19 q 1344 126 1357 82 q 1332 224 1332 169 l 1332 731 l 1539 731 l 1539 246 q 1558 172 1539 197 q 1639 143 1576 147 l 1614 -15 m 525 904 l 328 657 l 236 724 l 404 990 l 525 904 m -10 707 q 49 760 24 735 q 94 814 75 786 q 50 849 67 825 q 33 901 33 874 q 60 967 33 942 q 129 993 86 993 q 199 966 174 993 q 225 888 225 939 q 176 762 225 824 q 53 647 126 700 l -10 707 m 990 0 q 956 103 975 50 q 919 208 938 156 l 544 208 q 508 103 526 156 q 474 0 489 50 l 249 0 q 351 288 303 156 q 447 536 400 419 q 538 758 493 653 q 632 963 583 863 l 839 963 q 932 758 886 863 q 1024 536 978 653 q 1119 288 1071 419 q 1222 0 1168 156 l 990 0 m 731 744 q 710 688 724 724 q 678 604 696 651 q 638 500 660 557 q 594 381 617 443 l 868 381 q 825 500 846 443 q 785 604 804 557 q 753 688 767 651 q 731 744 739 724 z "},"ᾍ":{"ha":1708,"x_min":13,"x_max":1681,"o":"m 1656 -15 q 1518 2 1572 -15 q 1431 51 1464 19 q 1386 126 1399 82 q 1374 224 1374 169 l 1374 731 l 1581 731 l 1581 246 q 1599 172 1581 197 q 1681 143 1618 147 l 1656 -15 m 1032 0 q 998 103 1017 50 q 961 208 979 156 l 586 208 q 549 103 568 156 q 515 0 531 50 l 290 0 q 393 288 344 156 q 488 536 442 419 q 580 758 535 653 q 674 963 625 863 l 881 963 q 974 758 928 863 q 1066 536 1019 653 q 1161 288 1113 419 q 1264 0 1210 156 l 1032 0 m 772 744 q 751 688 765 724 q 719 604 738 651 q 680 500 701 557 q 636 381 658 443 l 910 381 q 867 500 888 443 q 827 604 846 557 q 794 688 808 651 q 772 744 781 724 m 565 904 l 368 657 l 276 724 l 444 990 l 565 904 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 z "},"ᾎ":{"ha":1569,"x_min":-11,"x_max":1542,"o":"m 890 0 q 856 103 875 50 q 819 208 838 156 l 444 208 q 408 103 426 156 q 374 0 389 50 l 149 0 q 251 288 203 156 q 347 536 300 419 q 438 758 393 653 q 532 963 483 863 l 739 963 q 832 758 786 863 q 924 536 878 653 q 1019 288 971 419 q 1122 0 1068 156 l 890 0 m 631 744 q 610 688 624 724 q 578 604 596 651 q 538 500 560 557 q 494 381 517 443 l 768 381 q 725 500 746 443 q 685 604 704 557 q 653 688 667 651 q 631 744 639 724 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 m 1517 -15 q 1379 2 1433 -15 q 1292 51 1325 19 q 1247 126 1260 82 q 1235 224 1235 169 l 1235 731 l 1442 731 l 1442 246 q 1460 172 1442 197 q 1542 143 1479 147 l 1517 -15 z "},"ᾏ":{"ha":1569,"x_min":-11,"x_max":1542,"o":"m 890 0 q 856 103 875 50 q 819 208 838 156 l 444 208 q 408 103 426 156 q 374 0 389 50 l 149 0 q 251 288 203 156 q 347 536 300 419 q 438 758 393 653 q 532 963 483 863 l 739 963 q 832 758 786 863 q 924 536 878 653 q 1019 288 971 419 q 1122 0 1068 156 l 890 0 m 631 744 q 610 688 624 724 q 578 604 596 651 q 538 500 560 557 q 494 381 517 443 l 768 381 q 725 500 746 443 q 685 604 704 557 q 653 688 667 651 q 631 744 639 724 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 m 1517 -15 q 1379 2 1433 -15 q 1292 51 1325 19 q 1247 126 1260 82 q 1235 224 1235 169 l 1235 731 l 1442 731 l 1442 246 q 1460 172 1442 197 q 1542 143 1479 147 l 1517 -15 z "},"ᾐ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 282 868 q 341 922 315 896 q 386 975 367 947 q 340 1010 358 986 q 322 1063 322 1035 q 350 1128 322 1103 q 421 1154 378 1154 q 496 1127 465 1154 q 526 1049 526 1100 q 475 924 526 986 q 344 808 424 861 l 282 868 z "},"ᾑ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 474 808 q 343 924 394 861 q 292 1049 292 986 q 322 1127 292 1100 q 397 1154 353 1154 q 468 1128 440 1154 q 496 1063 496 1103 q 478 1010 496 1035 q 432 975 460 986 q 477 922 451 947 q 536 868 503 896 l 474 808 z "},"ᾒ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 528 1151 l 696 885 l 604 818 l 407 1065 l 528 1151 m 118 868 q 177 922 151 896 q 222 975 203 947 q 178 1010 194 986 q 161 1063 161 1035 q 188 1128 161 1103 q 257 1154 214 1154 q 327 1127 301 1154 q 353 1049 353 1100 q 303 923 353 985 q 181 808 254 861 l 118 868 z "},"ᾓ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 478 1151 l 646 885 l 554 818 l 357 1065 l 478 1151 m 286 808 q 163 923 213 860 q 114 1049 114 986 q 140 1127 114 1100 q 210 1154 165 1154 q 279 1128 253 1154 q 306 1063 306 1103 q 289 1010 306 1035 q 244 975 272 986 q 290 922 264 947 q 349 868 315 896 l 286 808 z "},"ᾔ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 704 1065 l 507 818 l 415 885 l 583 1151 l 704 1065 m 169 868 q 228 922 203 896 q 274 975 254 947 q 229 1010 246 986 q 213 1063 213 1035 q 239 1128 213 1103 q 308 1154 265 1154 q 378 1127 353 1154 q 404 1049 404 1100 q 355 923 404 985 q 232 808 306 861 l 169 868 z "},"ᾕ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 693 1065 l 496 818 l 404 885 l 572 1151 l 693 1065 m 313 808 q 190 923 239 860 q 140 1049 140 986 q 166 1127 140 1100 q 236 1154 192 1154 q 306 1128 279 1154 q 332 1063 332 1103 q 315 1010 332 1035 q 271 975 299 986 q 316 922 290 947 q 375 868 342 896 l 313 808 z "},"ᾖ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 528 1061 q 516 1107 526 1088 q 490 1139 506 1126 q 454 1157 474 1151 q 417 1163 435 1163 q 378 1157 397 1163 q 344 1139 360 1151 q 317 1107 328 1126 q 306 1061 307 1088 l 199 1061 q 220 1160 201 1119 q 268 1228 239 1201 q 336 1268 297 1256 q 417 1281 375 1281 q 497 1268 458 1281 q 565 1228 536 1256 q 613 1160 594 1201 q 635 1061 632 1119 l 528 1061 m 310 864 q 345 894 326 878 q 378 926 364 911 q 342 957 351 938 q 333 996 333 976 q 353 1046 333 1024 q 414 1068 374 1068 q 472 1048 446 1068 q 499 986 499 1028 q 493 948 499 967 q 472 908 488 929 q 431 861 457 886 q 361 806 404 836 l 310 864 z "},"ᾗ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 514 1061 q 502 1107 513 1088 q 476 1139 492 1126 q 440 1157 460 1151 q 403 1163 421 1163 q 365 1157 383 1163 q 330 1139 346 1151 q 303 1107 314 1126 q 292 1061 293 1088 l 185 1061 q 206 1160 188 1119 q 254 1228 225 1201 q 322 1268 283 1256 q 403 1281 361 1281 q 483 1268 444 1281 q 551 1228 522 1256 q 599 1160 581 1201 q 621 1061 618 1119 l 514 1061 m 458 806 q 389 861 415 836 q 347 908 363 886 q 326 948 332 929 q 321 986 321 967 q 347 1048 321 1028 q 406 1068 374 1068 q 466 1046 446 1068 q 486 996 486 1024 q 477 957 486 976 q 442 926 468 938 q 474 894 456 911 q 510 864 493 878 l 458 806 z "},"ᾘ":{"ha":1674,"x_min":6,"x_max":1646,"o":"m 915 963 l 1132 963 l 1132 0 l 915 0 l 915 408 l 551 408 l 551 0 l 335 0 l 335 963 l 551 963 l 551 594 l 915 594 l 915 963 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 m 1621 -15 q 1483 2 1538 -15 q 1397 51 1429 19 q 1351 126 1364 82 q 1339 224 1339 169 l 1339 731 l 1546 731 l 1546 246 q 1565 172 1546 197 q 1646 143 1583 147 l 1621 -15 z "},"ᾙ":{"ha":1672,"x_min":1,"x_max":1644,"o":"m 913 963 l 1129 963 l 1129 0 l 913 0 l 913 408 l 549 408 l 549 0 l 332 0 l 332 963 l 549 963 l 549 594 l 913 594 l 913 963 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 m 1619 -15 q 1482 2 1536 -15 q 1395 51 1428 19 q 1350 126 1363 82 q 1338 224 1338 169 l 1338 731 l 1544 731 l 1544 246 q 1563 172 1544 197 q 1644 143 1582 147 l 1619 -15 z "},"ᾚ":{"ha":2007,"x_min":11,"x_max":1979,"o":"m 1246 963 l 1463 963 l 1463 0 l 1246 0 l 1246 408 l 882 408 l 882 0 l 665 0 l 665 963 l 882 963 l 882 594 l 1246 594 l 1246 963 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 m 1954 -15 q 1817 2 1871 -15 q 1730 51 1763 19 q 1685 126 1697 82 q 1672 224 1672 169 l 1672 731 l 1879 731 l 1879 246 q 1898 172 1879 197 q 1979 143 1917 147 l 1954 -15 z "},"ᾛ":{"ha":1964,"x_min":13,"x_max":1936,"o":"m 1204 963 l 1421 963 l 1421 0 l 1204 0 l 1204 408 l 840 408 l 840 0 l 624 0 l 624 963 l 840 963 l 840 594 l 1204 594 l 1204 963 m 376 990 l 544 724 l 453 657 l 256 904 l 376 990 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 m 1911 -15 q 1774 2 1828 -15 q 1687 51 1719 19 q 1642 126 1654 82 q 1629 224 1629 169 l 1629 731 l 1836 731 l 1836 246 q 1855 172 1836 197 q 1936 143 1874 147 l 1911 -15 z "},"ᾜ":{"ha":1964,"x_min":4,"x_max":1936,"o":"m 1206 963 l 1422 963 l 1422 0 l 1206 0 l 1206 408 l 842 408 l 842 0 l 625 0 l 625 963 l 842 963 l 842 594 l 1206 594 l 1206 963 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 m 1911 -15 q 1774 2 1828 -15 q 1687 51 1719 19 q 1642 126 1654 82 q 1629 224 1629 169 l 1629 731 l 1836 731 l 1836 246 q 1855 172 1836 197 q 1936 143 1874 147 l 1911 -15 z "},"ᾝ":{"ha":2013,"x_min":26,"x_max":1985,"o":"m 1253 963 l 1469 963 l 1469 0 l 1253 0 l 1253 408 l 889 408 l 889 0 l 672 0 l 672 963 l 889 963 l 889 594 l 1253 594 l 1253 963 m 579 904 l 382 657 l 290 724 l 458 990 l 579 904 m 199 647 q 76 762 125 699 q 26 888 26 825 q 52 966 26 939 q 122 993 78 993 q 192 967 165 993 q 218 901 218 942 q 201 849 218 874 q 157 814 185 825 q 202 760 176 786 q 261 707 228 735 l 199 647 m 1960 -15 q 1822 2 1876 -15 q 1735 51 1768 19 q 1690 126 1703 82 q 1678 224 1678 169 l 1678 731 l 1885 731 l 1885 246 q 1903 172 1885 197 q 1985 143 1922 147 l 1960 -15 z "},"ᾞ":{"ha":1813,"x_min":-11,"x_max":1785,"o":"m 1054 963 l 1271 963 l 1271 0 l 1054 0 l 1054 408 l 690 408 l 690 0 l 474 0 l 474 963 l 690 963 l 690 594 l 1054 594 l 1054 963 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 m 1760 -15 q 1622 2 1676 -15 q 1535 51 1568 19 q 1490 126 1503 82 q 1478 224 1478 169 l 1478 731 l 1685 731 l 1685 246 q 1703 172 1685 197 q 1785 143 1722 147 l 1760 -15 z "},"ᾟ":{"ha":1811,"x_min":-11,"x_max":1783,"o":"m 1051 963 l 1268 963 l 1268 0 l 1051 0 l 1051 408 l 688 408 l 688 0 l 471 0 l 471 963 l 688 963 l 688 594 l 1051 594 l 1051 963 m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 m 1758 -15 q 1621 2 1675 -15 q 1534 51 1567 19 q 1489 126 1501 82 q 1476 224 1476 169 l 1476 731 l 1683 731 l 1683 246 q 1702 172 1683 197 q 1783 143 1721 147 l 1758 -15 z "},"ᾠ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 463 868 q 522 922 496 896 q 567 975 547 947 q 521 1010 539 986 q 503 1063 503 1035 q 531 1128 503 1103 q 601 1154 558 1154 q 676 1127 646 1154 q 707 1049 707 1100 q 656 924 707 986 q 525 808 604 861 l 463 868 z "},"ᾡ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 640 808 q 510 924 561 861 q 458 1049 458 986 q 489 1127 458 1100 q 564 1154 519 1154 q 635 1128 607 1154 q 663 1063 663 1103 q 644 1010 663 1035 q 599 975 626 986 q 644 922 618 947 q 703 868 669 896 l 640 808 z "},"ᾢ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 711 1151 l 879 885 l 788 818 l 590 1065 l 711 1151 m 301 868 q 360 922 335 896 q 406 975 386 947 q 361 1010 378 986 q 344 1063 344 1035 q 371 1128 344 1103 q 440 1154 397 1154 q 510 1127 485 1154 q 536 1049 536 1100 q 487 923 536 985 q 364 808 438 861 l 301 868 z "},"ᾣ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 654 1151 l 822 885 l 731 818 l 533 1065 l 654 1151 m 463 808 q 340 923 389 860 q 290 1049 290 986 q 316 1127 290 1100 q 386 1154 342 1154 q 456 1128 429 1154 q 482 1063 482 1103 q 465 1010 482 1035 q 421 975 449 986 q 466 922 440 947 q 525 868 492 896 l 463 808 z "},"ᾤ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 899 1065 l 701 818 l 610 885 l 778 1151 l 899 1065 m 364 868 q 423 922 397 896 q 468 975 449 947 q 424 1010 440 986 q 407 1063 407 1035 q 433 1128 407 1103 q 503 1154 460 1154 q 573 1127 547 1154 q 599 1049 599 1100 q 549 923 599 985 q 426 808 500 861 l 364 868 z "},"ᾥ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 883 1065 l 686 818 l 594 885 l 763 1151 l 883 1065 m 503 808 q 380 923 429 860 q 331 1049 331 986 q 356 1127 331 1100 q 426 1154 382 1154 q 496 1128 469 1154 q 522 1063 522 1103 q 506 1010 522 1035 q 461 975 489 986 q 506 922 481 947 q 565 868 532 896 l 503 808 z "},"ᾦ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 694 1061 q 683 1107 693 1088 q 656 1139 672 1126 q 621 1157 640 1151 q 583 1163 601 1163 q 545 1157 564 1163 q 510 1139 526 1151 q 484 1107 494 1126 q 472 1061 474 1088 l 365 1061 q 387 1160 368 1119 q 435 1228 406 1201 q 503 1268 464 1256 q 583 1281 542 1281 q 664 1268 625 1281 q 732 1228 703 1256 q 780 1160 761 1201 q 801 1061 799 1119 l 694 1061 m 476 864 q 512 894 493 878 q 544 926 531 911 q 509 957 518 938 q 500 996 500 976 q 520 1046 500 1024 q 581 1068 540 1068 q 639 1048 613 1068 q 665 986 665 1028 q 660 948 665 967 q 639 908 654 929 q 597 861 624 886 q 528 806 571 836 l 476 864 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 z "},"ᾧ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 703 1061 q 691 1107 701 1088 q 665 1139 681 1126 q 629 1157 649 1151 q 592 1163 610 1163 q 553 1157 572 1163 q 519 1139 535 1151 q 492 1107 503 1126 q 481 1061 482 1088 l 374 1061 q 395 1160 376 1119 q 443 1228 414 1201 q 511 1268 472 1256 q 592 1281 550 1281 q 672 1268 633 1281 q 740 1228 711 1256 q 788 1160 769 1201 q 810 1061 807 1119 l 703 1061 m 647 806 q 578 861 604 836 q 536 908 551 886 q 515 948 521 929 q 510 986 510 967 q 536 1048 510 1028 q 594 1068 563 1068 q 655 1046 635 1068 q 675 996 675 1024 q 666 957 675 976 q 631 926 657 938 q 663 894 644 911 q 699 864 682 878 l 647 806 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 z "},"ᾨ":{"ha":1669,"x_min":6,"x_max":1642,"o":"m 696 985 q 881 955 796 985 q 1029 867 967 925 q 1127 723 1092 808 q 1163 528 1163 638 q 1018 179 1163 328 l 1183 179 l 1183 0 l 763 0 l 763 161 q 831 228 799 192 q 887 309 863 265 q 925 406 911 353 q 939 521 939 458 q 874 726 939 656 q 696 797 808 797 q 518 726 583 797 q 453 521 453 656 q 467 406 453 458 q 504 309 481 353 q 560 228 528 265 q 628 161 592 192 l 628 0 l 207 0 l 207 179 l 372 179 q 229 528 229 329 q 265 723 229 638 q 363 867 300 808 q 510 955 425 925 q 696 985 596 985 m 6 707 q 65 760 39 735 q 110 814 90 786 q 64 849 82 825 q 46 901 46 874 q 74 967 46 942 q 144 993 101 993 q 219 966 189 993 q 250 888 250 939 q 199 763 250 825 q 68 647 147 700 l 6 707 m 1617 -15 q 1479 2 1533 -15 q 1392 51 1425 19 q 1347 126 1360 82 q 1335 224 1335 169 l 1335 731 l 1542 731 l 1542 246 q 1560 172 1542 197 q 1642 143 1579 147 l 1617 -15 z "},"ᾩ":{"ha":1738,"x_min":1,"x_max":1710,"o":"m 765 985 q 951 955 865 985 q 1099 867 1036 925 q 1197 723 1161 808 q 1232 528 1232 638 q 1088 179 1232 328 l 1253 179 l 1253 0 l 832 0 l 832 161 q 900 228 868 192 q 956 309 932 265 q 994 406 981 353 q 1008 521 1008 458 q 943 726 1008 656 q 765 797 878 797 q 588 726 653 797 q 522 521 522 656 q 536 406 522 458 q 574 309 550 353 q 629 228 597 265 q 697 161 661 192 l 697 0 l 276 0 l 276 179 l 442 179 q 299 528 299 329 q 334 723 299 638 q 432 867 369 808 q 580 955 494 925 q 765 985 665 985 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 m 1685 -15 q 1547 2 1601 -15 q 1460 51 1493 19 q 1415 126 1428 82 q 1403 224 1403 169 l 1403 731 l 1610 731 l 1610 246 q 1628 172 1610 197 q 1710 143 1647 147 l 1685 -15 z "},"ᾪ":{"ha":2044,"x_min":11,"x_max":2017,"o":"m 1071 985 q 1256 955 1171 985 q 1404 867 1342 925 q 1502 723 1467 808 q 1538 528 1538 638 q 1393 179 1538 328 l 1558 179 l 1558 0 l 1138 0 l 1138 161 q 1206 228 1174 192 q 1262 309 1238 265 q 1300 406 1286 353 q 1314 521 1314 458 q 1249 726 1314 656 q 1071 797 1183 797 q 893 726 958 797 q 828 521 828 656 q 842 406 828 458 q 879 309 856 353 q 935 228 903 265 q 1003 161 967 192 l 1003 0 l 582 0 l 582 179 l 747 179 q 604 528 604 329 q 640 723 604 638 q 738 867 675 808 q 885 955 800 925 q 1071 985 971 985 m 421 990 l 589 724 l 497 657 l 300 904 l 421 990 m 11 707 q 70 760 44 735 q 115 814 96 786 q 71 849 88 825 q 54 901 54 874 q 81 967 54 942 q 150 993 107 993 q 220 966 194 993 q 246 888 246 939 q 197 762 246 824 q 74 647 147 700 l 11 707 m 1992 -15 q 1854 2 1908 -15 q 1767 51 1800 19 q 1722 126 1735 82 q 1710 224 1710 169 l 1710 731 l 1917 731 l 1917 246 q 1935 172 1917 197 q 2017 143 1954 147 l 1992 -15 z "},"ᾫ":{"ha":2004,"x_min":13,"x_max":1976,"o":"m 1029 985 q 1215 955 1129 985 q 1363 867 1300 925 q 1460 723 1425 808 q 1496 528 1496 638 q 1351 179 1496 328 l 1517 179 l 1517 0 l 1096 0 l 1096 161 q 1164 228 1132 192 q 1220 309 1196 265 q 1258 406 1244 353 q 1272 521 1272 458 q 1207 726 1272 656 q 1029 797 1142 797 q 851 726 917 797 q 786 521 786 656 q 800 406 786 458 q 838 309 814 353 q 893 228 861 265 q 961 161 925 192 l 961 0 l 540 0 l 540 179 l 706 179 q 563 528 563 329 q 598 723 563 638 q 696 867 633 808 q 844 955 758 925 q 1029 985 929 985 m 376 990 l 544 724 l 453 657 l 256 904 l 376 990 m 185 647 q 62 762 111 699 q 13 888 13 825 q 38 966 13 939 q 108 993 64 993 q 178 967 151 993 q 204 901 204 942 q 188 849 204 874 q 143 814 171 825 q 188 760 163 786 q 247 707 214 735 l 185 647 m 1951 -15 q 1814 2 1868 -15 q 1727 51 1760 19 q 1682 126 1694 82 q 1669 224 1669 169 l 1669 731 l 1876 731 l 1876 246 q 1895 172 1876 197 q 1976 143 1914 147 l 1951 -15 z "},"ᾬ":{"ha":1924,"x_min":4,"x_max":1896,"o":"m 947 985 q 1133 955 1047 985 q 1281 867 1218 925 q 1378 723 1343 808 q 1414 528 1414 638 q 1269 179 1414 328 l 1435 179 l 1435 0 l 1014 0 l 1014 161 q 1082 228 1050 192 q 1138 309 1114 265 q 1176 406 1163 353 q 1190 521 1190 458 q 1125 726 1190 656 q 947 797 1060 797 q 769 726 835 797 q 704 521 704 656 q 718 406 704 458 q 756 309 732 353 q 811 228 779 265 q 879 161 843 192 l 879 0 l 458 0 l 458 179 l 624 179 q 481 528 481 329 q 516 723 481 638 q 614 867 551 808 q 762 955 676 925 q 947 985 847 985 m 539 904 l 342 657 l 250 724 l 418 990 l 539 904 m 4 707 q 63 760 38 735 q 108 814 89 786 q 64 849 81 825 q 47 901 47 874 q 74 967 47 942 q 143 993 100 993 q 213 966 188 993 q 239 888 239 939 q 190 762 239 824 q 67 647 140 700 l 4 707 m 1871 -15 q 1733 2 1788 -15 q 1647 51 1679 19 q 1601 126 1614 82 q 1589 224 1589 169 l 1589 731 l 1796 731 l 1796 246 q 1815 172 1796 197 q 1896 143 1833 147 l 1871 -15 z "},"ᾭ":{"ha":1997,"x_min":26,"x_max":1969,"o":"m 1022 985 q 1208 955 1122 985 q 1356 867 1293 925 q 1453 723 1418 808 q 1489 528 1489 638 q 1344 179 1489 328 l 1510 179 l 1510 0 l 1089 0 l 1089 161 q 1157 228 1125 192 q 1213 309 1189 265 q 1251 406 1238 353 q 1265 521 1265 458 q 1200 726 1265 656 q 1022 797 1135 797 q 844 726 910 797 q 779 521 779 656 q 793 406 779 458 q 831 309 807 353 q 886 228 854 265 q 954 161 918 192 l 954 0 l 533 0 l 533 179 l 699 179 q 556 528 556 329 q 591 723 556 638 q 689 867 626 808 q 837 955 751 925 q 1022 985 922 985 m 579 904 l 382 657 l 290 724 l 458 990 l 579 904 m 199 647 q 76 762 125 699 q 26 888 26 825 q 52 966 26 939 q 122 993 78 993 q 192 967 165 993 q 218 901 218 942 q 201 849 218 874 q 157 814 185 825 q 202 760 176 786 q 261 707 228 735 l 199 647 m 1944 -15 q 1807 2 1861 -15 q 1720 51 1753 19 q 1675 126 1688 82 q 1663 224 1663 169 l 1663 731 l 1869 731 l 1869 246 q 1888 172 1869 197 q 1969 143 1907 147 l 1944 -15 z "},"ᾮ":{"ha":1825,"x_min":-11,"x_max":1797,"o":"m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 100 703 q 135 733 117 717 q 168 765 154 750 q 133 796 142 776 q 124 835 124 815 q 144 885 124 863 q 204 907 164 907 q 263 887 236 907 q 289 825 289 867 q 283 787 289 806 q 263 747 278 768 q 221 700 247 725 q 151 644 194 675 l 100 703 m 851 985 q 1037 955 951 985 q 1185 867 1122 925 q 1283 723 1247 808 q 1318 528 1318 638 q 1174 179 1318 328 l 1339 179 l 1339 0 l 918 0 l 918 161 q 986 228 954 192 q 1042 309 1018 265 q 1081 406 1067 353 q 1094 521 1094 458 q 1029 726 1094 656 q 851 797 964 797 q 674 726 739 797 q 608 521 608 656 q 622 406 608 458 q 660 309 636 353 q 715 228 683 265 q 783 161 747 192 l 783 0 l 363 0 l 363 179 l 528 179 q 385 528 385 329 q 420 723 385 638 q 518 867 456 808 q 666 955 581 925 q 851 985 751 985 m 1772 -15 q 1635 2 1689 -15 q 1548 51 1581 19 q 1503 126 1515 82 q 1490 224 1490 169 l 1490 731 l 1697 731 l 1697 246 q 1716 172 1697 197 q 1797 143 1735 147 l 1772 -15 z "},"ᾯ":{"ha":1825,"x_min":-11,"x_max":1797,"o":"m 318 900 q 306 946 317 926 q 280 978 296 965 q 244 996 264 990 q 207 1001 225 1001 q 169 996 188 1001 q 134 978 150 990 q 108 946 118 965 q 96 900 97 926 l -11 900 q 10 999 -8 958 q 58 1067 29 1040 q 126 1107 88 1094 q 207 1119 165 1119 q 288 1107 249 1119 q 356 1067 326 1094 q 403 999 385 1040 q 425 900 422 958 l 318 900 m 263 644 q 193 700 219 675 q 151 747 167 725 q 131 787 136 768 q 125 825 125 806 q 151 887 125 867 q 210 907 178 907 q 270 885 250 907 q 290 835 290 863 q 281 796 290 815 q 246 765 272 776 q 278 733 260 750 q 314 703 297 717 l 263 644 m 851 985 q 1037 955 951 985 q 1185 867 1122 925 q 1283 723 1247 808 q 1318 528 1318 638 q 1174 179 1318 328 l 1339 179 l 1339 0 l 918 0 l 918 161 q 986 228 954 192 q 1042 309 1018 265 q 1081 406 1067 353 q 1094 521 1094 458 q 1029 726 1094 656 q 851 797 964 797 q 674 726 739 797 q 608 521 608 656 q 622 406 608 458 q 660 309 636 353 q 715 228 683 265 q 783 161 747 192 l 783 0 l 363 0 l 363 179 l 528 179 q 385 528 385 329 q 420 723 385 638 q 518 867 456 808 q 666 955 581 925 q 851 985 751 985 m 1772 -15 q 1635 2 1689 -15 q 1548 51 1581 19 q 1503 126 1515 82 q 1490 224 1490 169 l 1490 731 l 1697 731 l 1697 246 q 1716 172 1697 197 q 1797 143 1735 147 l 1772 -15 z "},"ᾰ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 429 831 q 340 846 381 831 q 269 889 299 861 q 222 958 239 917 q 204 1050 204 999 l 204 1061 l 344 1061 q 372 983 349 1003 q 429 963 396 963 q 486 983 463 963 q 514 1061 510 1003 l 654 1061 l 654 1050 q 637 958 654 999 q 590 889 619 917 q 518 846 560 861 q 429 831 476 831 z "},"ᾱ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 206 1007 l 653 1007 l 653 865 l 206 865 l 206 1007 z "},"ᾲ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 335 1096 l 610 914 l 539 804 l 246 953 l 335 1096 z "},"ᾳ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 z "},"ᾴ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 610 953 l 317 804 l 246 914 l 521 1096 l 610 953 z "},"ᾶ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 443 1061 q 532 1046 490 1061 q 603 1003 574 1031 q 651 934 633 975 q 668 842 668 893 l 668 831 l 528 831 q 500 909 524 889 q 443 929 476 929 q 386 909 410 929 q 358 831 363 889 l 218 831 l 218 842 q 235 934 218 893 q 283 1003 253 975 q 353 1046 313 1031 q 443 1061 394 1061 z "},"ᾷ":{"ha":858,"x_min":63,"x_max":838,"o":"m 810 -15 q 682 3 733 -15 q 597 54 631 21 q 515 8 568 32 q 386 -15 461 -15 q 147 85 231 -15 q 63 365 63 186 q 88 520 63 450 q 163 641 114 590 q 281 719 211 692 q 438 747 350 747 q 594 735 514 747 q 731 706 674 722 l 731 275 q 736 219 731 240 q 754 184 742 197 q 788 165 767 171 q 838 157 808 160 l 810 -15 m 415 158 q 481 168 451 158 q 533 193 510 178 q 525 296 525 240 l 525 564 q 489 569 507 567 q 439 571 471 571 q 316 513 360 571 q 272 360 272 456 q 310 209 272 260 q 415 158 349 158 m 494 -92 q 502 -140 494 -122 q 523 -166 510 -157 q 555 -178 536 -175 q 594 -181 574 -181 l 594 -297 q 565 -303 586 -300 q 524 -306 544 -306 q 451 -297 486 -306 q 388 -267 415 -287 q 343 -211 360 -246 q 326 -124 326 -176 q 327 -103 326 -118 q 331 -72 328 -87 l 494 -72 l 494 -92 m 443 1061 q 532 1046 490 1061 q 603 1003 574 1031 q 651 934 633 975 q 668 842 668 893 l 668 831 l 528 831 q 500 909 524 889 q 443 929 476 929 q 386 909 410 929 q 358 831 363 889 l 218 831 l 218 842 q 235 934 218 893 q 283 1003 253 975 q 353 1046 313 1031 q 443 1061 394 1061 z "},"Ᾰ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 500 1063 q 410 1078 451 1063 q 340 1121 369 1093 q 292 1190 310 1149 q 275 1282 275 1231 l 275 1293 l 415 1293 q 443 1215 419 1235 q 500 1194 467 1194 q 557 1215 533 1194 q 585 1293 581 1235 l 725 1293 l 725 1282 q 708 1190 725 1231 q 660 1121 690 1149 q 589 1078 631 1093 q 500 1063 547 1063 z "},"Ᾱ":{"ha":1001,"x_min":14,"x_max":988,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 276 1239 l 724 1239 l 724 1097 l 276 1097 l 276 1239 z "},"Ὰ":{"ha":1119,"x_min":7,"x_max":1106,"o":"m 874 0 q 840 103 858 50 q 803 208 821 156 l 428 208 q 391 103 410 156 q 357 0 372 50 l 132 0 q 235 288 186 156 q 330 536 283 419 q 422 758 376 653 q 515 963 467 863 l 722 963 q 815 758 769 863 q 908 536 861 653 q 1003 288 954 419 q 1106 0 1051 156 l 874 0 m 614 744 q 593 688 607 724 q 561 604 579 651 q 522 500 543 557 q 478 381 500 443 l 751 381 q 708 500 729 443 q 669 604 688 557 q 636 688 650 651 q 614 744 622 724 m 133 992 l 331 767 l 236 682 l 7 875 l 133 992 z "},"Ά":{"ha":1086,"x_min":25,"x_max":1072,"o":"m 840 0 q 806 103 825 50 q 769 208 788 156 l 394 208 q 358 103 376 156 q 324 0 339 50 l 99 0 q 201 288 153 156 q 297 536 250 419 q 388 758 343 653 q 482 963 433 863 l 689 963 q 782 758 736 863 q 874 536 828 653 q 969 288 921 419 q 1072 0 1018 156 l 840 0 m 581 744 q 560 688 574 724 q 528 604 546 651 q 488 500 510 557 q 444 381 467 443 l 718 381 q 675 500 696 443 q 635 604 654 557 q 603 688 617 651 q 581 744 589 724 m 349 875 l 119 682 l 25 767 l 222 992 l 349 875 z "},"ᾼ":{"ha":1432,"x_min":14,"x_max":1404,"o":"m 756 0 q 722 103 740 50 q 685 208 703 156 l 310 208 q 273 103 292 156 q 239 0 254 50 l 14 0 q 117 288 68 156 q 212 536 165 419 q 303 758 258 653 q 397 963 349 863 l 604 963 q 697 758 651 863 q 790 536 743 653 q 885 288 836 419 q 988 0 933 156 l 756 0 m 496 744 q 475 688 489 724 q 443 604 461 651 q 403 500 425 557 q 360 381 382 443 l 633 381 q 590 500 611 443 q 551 604 569 557 q 518 688 532 651 q 496 744 504 724 m 1379 -15 q 1242 2 1296 -15 q 1155 51 1188 19 q 1110 126 1122 82 q 1097 224 1097 169 l 1097 731 l 1304 731 l 1304 246 q 1323 172 1304 197 q 1404 143 1342 147 l 1379 -15 z "},"᾽":{"ha":492,"x_min":129,"x_max":374,"o":"m 129 868 q 188 922 163 896 q 233 975 214 947 q 188 1010 206 986 q 169 1063 169 1035 q 197 1128 169 1103 q 268 1154 225 1154 q 343 1127 313 1154 q 374 1049 374 1100 q 322 924 374 986 q 192 808 271 861 l 129 868 z "},"ι":{"ha":429,"x_min":104,"x_max":372,"o":"m 272 -92 q 280 -140 272 -122 q 301 -166 288 -157 q 333 -178 314 -175 q 372 -181 351 -181 l 372 -297 q 343 -303 364 -300 q 301 -306 322 -306 q 228 -297 264 -306 q 165 -267 193 -287 q 121 -211 138 -246 q 104 -124 104 -176 q 105 -103 104 -118 q 108 -72 106 -87 l 272 -72 l 272 -92 z "},"᾿":{"ha":492,"x_min":129,"x_max":374,"o":"m 129 868 q 188 922 163 896 q 233 975 214 947 q 188 1010 206 986 q 169 1063 169 1035 q 197 1128 169 1103 q 268 1154 225 1154 q 343 1127 313 1154 q 374 1049 374 1100 q 322 924 374 986 q 192 808 271 861 l 129 868 z "},"῀":{"ha":539,"x_min":38,"x_max":488,"o":"m 263 1061 q 351 1046 310 1061 q 423 1003 393 1031 q 470 934 453 975 q 488 842 488 893 l 488 831 l 347 831 q 319 909 343 889 q 263 929 296 929 q 206 909 229 929 q 178 831 182 889 l 38 831 l 38 842 q 55 934 38 893 q 102 1003 72 975 q 173 1046 132 1031 q 263 1061 214 1061 z "},"῁":{"ha":744,"x_min":129,"x_max":614,"o":"m 314 917 q 286 850 314 875 q 221 825 258 825 q 156 850 182 825 q 129 917 129 875 q 156 985 129 960 q 221 1010 182 1010 q 286 985 258 1010 q 314 917 314 960 m 614 917 q 587 850 614 875 q 522 825 560 825 q 457 850 485 825 q 429 917 429 875 q 457 985 429 960 q 522 1010 485 1010 q 587 985 560 1010 q 614 917 614 960 m 482 1061 q 470 1107 481 1088 q 444 1139 460 1126 q 408 1157 428 1151 q 371 1163 389 1163 q 333 1157 351 1163 q 298 1139 314 1151 q 272 1107 282 1126 q 260 1061 261 1088 l 153 1061 q 174 1160 156 1119 q 222 1228 193 1201 q 290 1268 251 1256 q 371 1281 329 1281 q 451 1268 413 1281 q 519 1228 490 1256 q 567 1160 549 1201 q 589 1061 586 1119 l 482 1061 z "},"ῂ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 281 1096 l 556 914 l 485 804 l 192 953 l 281 1096 z "},"ῃ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 z "},"ῄ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 524 953 l 231 804 l 160 914 l 435 1096 l 524 953 z "},"ῆ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 403 1061 q 492 1046 450 1061 q 563 1003 533 1031 q 610 934 593 975 q 628 842 628 893 l 628 831 l 488 831 q 460 909 483 889 q 403 929 436 929 q 346 909 369 929 q 318 831 322 889 l 178 831 l 178 842 q 195 934 178 893 q 242 1003 213 975 q 313 1046 272 1031 q 403 1061 354 1061 z "},"ῇ":{"ha":818,"x_min":97,"x_max":728,"o":"m 97 706 q 233 734 150 721 q 408 747 317 747 q 563 723 501 747 q 661 654 625 699 q 713 549 697 610 q 728 413 728 488 l 728 -257 l 521 -257 l 521 388 q 494 529 521 488 q 396 571 468 571 q 349 569 374 571 q 304 564 324 567 l 304 0 l 97 0 l 97 706 m 282 -92 q 290 -140 282 -122 q 310 -166 297 -157 q 342 -178 324 -175 q 382 -181 361 -181 l 382 -297 q 353 -303 374 -300 q 311 -306 332 -306 q 238 -297 274 -306 q 175 -267 203 -287 q 131 -211 147 -246 q 114 -124 114 -176 q 115 -103 114 -118 q 118 -72 115 -87 l 282 -72 l 282 -92 m 403 1061 q 492 1046 450 1061 q 563 1003 533 1031 q 610 934 593 975 q 628 842 628 893 l 628 831 l 488 831 q 460 909 483 889 q 403 929 436 929 q 346 909 369 929 q 318 831 322 889 l 178 831 l 178 842 q 195 934 178 893 q 242 1003 213 975 q 313 1046 272 1031 q 403 1061 354 1061 z "},"Ὲ":{"ha":1119,"x_min":0,"x_max":1071,"o":"m 389 0 l 389 963 l 1039 963 l 1039 781 l 606 781 l 606 592 l 990 592 l 990 414 l 606 414 l 606 182 l 1071 182 l 1071 0 l 389 0 m 126 992 l 324 767 l 229 682 l 0 875 l 126 992 z "},"Έ":{"ha":1129,"x_min":18,"x_max":1081,"o":"m 399 0 l 399 963 l 1049 963 l 1049 781 l 615 781 l 615 592 l 1000 592 l 1000 414 l 615 414 l 615 182 l 1081 182 l 1081 0 l 399 0 m 342 875 l 113 682 l 18 767 l 215 992 l 342 875 z "},"Ὴ":{"ha":1297,"x_min":0,"x_max":1186,"o":"m 969 963 l 1186 963 l 1186 0 l 969 0 l 969 408 l 606 408 l 606 0 l 389 0 l 389 963 l 606 963 l 606 594 l 969 594 l 969 963 m 126 992 l 324 767 l 229 682 l 0 875 l 126 992 z "},"Ή":{"ha":1307,"x_min":18,"x_max":1196,"o":"m 979 963 l 1196 963 l 1196 0 l 979 0 l 979 408 l 615 408 l 615 0 l 399 0 l 399 963 l 615 963 l 615 594 l 979 594 l 979 963 m 342 875 l 113 682 l 18 767 l 215 992 l 342 875 z "},"ῌ":{"ha":1451,"x_min":111,"x_max":1424,"o":"m 692 963 l 908 963 l 908 0 l 692 0 l 692 408 l 328 408 l 328 0 l 111 0 l 111 963 l 328 963 l 328 594 l 692 594 l 692 963 m 1399 -15 q 1261 2 1315 -15 q 1174 51 1207 19 q 1129 126 1142 82 q 1117 224 1117 169 l 1117 731 l 1324 731 l 1324 246 q 1342 172 1324 197 q 1424 143 1361 147 l 1399 -15 z "},"῍":{"ha":875,"x_min":149,"x_max":726,"o":"m 558 1151 l 726 885 l 635 818 l 438 1065 l 558 1151 m 149 868 q 208 922 182 896 q 253 975 233 947 q 208 1010 225 986 q 192 1063 192 1035 q 218 1128 192 1103 q 288 1154 244 1154 q 358 1127 332 1154 q 383 1049 383 1100 q 334 923 383 985 q 211 808 285 861 l 149 868 z "},"῎":{"ha":790,"x_min":128,"x_max":663,"o":"m 663 1065 l 465 818 l 374 885 l 542 1151 l 663 1065 m 128 868 q 187 922 161 896 q 232 975 213 947 q 188 1010 204 986 q 171 1063 171 1035 q 197 1128 171 1103 q 267 1154 224 1154 q 337 1127 311 1154 q 363 1049 363 1100 q 313 923 363 985 q 190 808 264 861 l 128 868 z "},"῏":{"ha":531,"x_min":46,"x_max":482,"o":"m 375 1061 q 363 1107 374 1088 q 337 1139 353 1126 q 301 1157 321 1151 q 264 1163 282 1163 q 226 1157 244 1163 q 191 1139 207 1151 q 165 1107 175 1126 q 153 1061 154 1088 l 46 1061 q 67 1160 49 1119 q 115 1228 86 1201 q 183 1268 144 1256 q 264 1281 222 1281 q 344 1268 306 1281 q 413 1228 383 1256 q 460 1160 442 1201 q 482 1061 479 1119 l 375 1061 m 157 864 q 192 894 174 878 q 225 926 211 911 q 190 957 199 938 q 181 996 181 976 q 201 1046 181 1024 q 261 1068 221 1068 q 319 1048 293 1068 q 346 986 346 1028 q 340 948 346 967 q 319 908 335 929 q 278 861 304 886 q 208 806 251 836 l 157 864 z "},"ῐ":{"ha":429,"x_min":-7,"x_max":443,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 218 831 q 128 846 169 831 q 58 889 88 861 q 10 958 28 917 q -7 1050 -7 999 l -7 1061 l 133 1061 q 161 983 138 1003 q 218 963 185 963 q 275 983 251 963 q 303 1061 299 1003 l 443 1061 l 443 1050 q 426 958 443 999 q 378 889 408 917 q 307 846 349 861 q 218 831 265 831 z "},"ῑ":{"ha":429,"x_min":-6,"x_max":442,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m -6 1007 l 442 1007 l 442 865 l -6 865 l -6 1007 z "},"ῒ":{"ha":429,"x_min":-128,"x_max":531,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 78 940 q 47 866 78 893 q -25 839 17 839 q -98 866 -68 839 q -128 940 -128 893 q -98 1016 -128 989 q -25 1043 -68 1043 q 47 1016 17 1043 q 78 940 78 989 m 531 940 q 500 866 531 893 q 428 839 469 839 q 356 866 386 839 q 325 940 325 893 q 356 1016 325 989 q 428 1043 386 1043 q 500 1016 469 1043 q 531 940 531 989 m 189 1135 l 310 842 l 214 796 l 63 1074 l 189 1135 z "},"ΐ":{"ha":429,"x_min":-93,"x_max":565,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 113 940 q 82 866 113 893 q 10 839 51 839 q -63 866 -33 839 q -93 940 -93 893 q -63 1016 -93 989 q 10 1043 -33 1043 q 82 1016 51 1043 q 113 940 113 989 m 565 940 q 535 866 565 893 q 463 839 504 839 q 390 866 421 839 q 360 940 360 893 q 390 1016 360 989 q 463 1043 421 1043 q 535 1016 504 1043 q 565 940 565 989 m 374 1074 l 222 796 l 126 842 l 247 1135 l 374 1074 z "},"ῖ":{"ha":429,"x_min":-18,"x_max":432,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 207 1061 q 296 1046 254 1061 q 367 1003 338 1031 q 415 934 397 975 q 432 842 432 893 l 432 831 l 292 831 q 264 909 288 889 q 207 929 240 929 q 150 909 174 929 q 122 831 126 889 l -18 831 l -18 842 q -1 934 -18 893 q 47 1003 17 975 q 117 1046 76 1031 q 207 1061 158 1061 z "},"ῗ":{"ha":429,"x_min":-31,"x_max":454,"o":"m 376 -15 q 239 2 293 -15 q 152 51 185 19 q 107 126 119 82 q 94 224 94 169 l 94 731 l 301 731 l 301 246 q 320 172 301 197 q 401 143 339 147 l 376 -15 m 154 917 q 126 850 154 875 q 61 825 99 825 q -4 850 22 825 q -31 917 -31 875 q -4 985 -31 960 q 61 1010 22 1010 q 126 985 99 1010 q 154 917 154 960 m 454 917 q 427 850 454 875 q 363 825 400 825 q 297 850 325 825 q 269 917 269 875 q 297 985 269 960 q 363 1010 325 1010 q 427 985 400 1010 q 454 917 454 960 m 322 1061 q 310 1107 321 1088 q 284 1139 300 1126 q 249 1157 268 1151 q 211 1163 229 1163 q 173 1157 192 1163 q 138 1139 154 1151 q 112 1107 122 1126 q 100 1061 101 1088 l -7 1061 q 15 1160 -4 1119 q 63 1228 33 1201 q 131 1268 92 1256 q 211 1281 169 1281 q 292 1268 253 1281 q 360 1228 331 1256 q 408 1160 389 1201 q 429 1061 426 1119 l 322 1061 z "},"Ῐ":{"ha":439,"x_min":-3,"x_max":447,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m 222 1063 q 133 1078 174 1063 q 62 1121 92 1093 q 15 1190 32 1149 q -3 1282 -3 1231 l -3 1293 l 138 1293 q 165 1215 142 1235 q 222 1194 189 1194 q 279 1215 256 1194 q 307 1293 303 1235 l 447 1293 l 447 1282 q 430 1190 447 1231 q 383 1121 413 1149 q 311 1078 353 1093 q 222 1063 269 1063 z "},"Ῑ":{"ha":439,"x_min":-1,"x_max":446,"o":"m 111 963 l 328 963 l 328 0 l 111 0 l 111 963 m -1 1239 l 446 1239 l 446 1097 l -1 1097 l -1 1239 z "},"Ὶ":{"ha":751,"x_min":7,"x_max":640,"o":"m 424 963 l 640 963 l 640 0 l 424 0 l 424 963 m 133 992 l 331 767 l 236 682 l 7 875 l 133 992 z "},"Ί":{"ha":774,"x_min":25,"x_max":663,"o":"m 446 963 l 663 963 l 663 0 l 446 0 l 446 963 m 349 875 l 119 682 l 25 767 l 222 992 l 349 875 z "},"῝":{"ha":804,"x_min":136,"x_max":668,"o":"m 500 1151 l 668 885 l 576 818 l 379 1065 l 500 1151 m 308 808 q 185 923 235 860 q 136 1049 136 986 q 162 1127 136 1100 q 232 1154 188 1154 q 301 1128 275 1154 q 328 1063 328 1103 q 311 1010 328 1035 q 267 975 294 986 q 312 922 286 947 q 371 868 338 896 l 308 808 z "},"῞":{"ha":853,"x_min":150,"x_max":703,"o":"m 703 1065 l 506 818 l 414 885 l 582 1151 l 703 1065 m 322 808 q 199 923 249 860 q 150 1049 150 986 q 176 1127 150 1100 q 246 1154 201 1154 q 315 1128 289 1154 q 342 1063 342 1103 q 325 1010 342 1035 q 281 975 308 986 q 326 922 300 947 q 385 868 351 896 l 322 808 z "},"῟":{"ha":543,"x_min":46,"x_max":482,"o":"m 375 1061 q 363 1107 374 1088 q 337 1139 353 1126 q 301 1157 321 1151 q 264 1163 282 1163 q 226 1157 244 1163 q 191 1139 207 1151 q 165 1107 175 1126 q 153 1061 154 1088 l 46 1061 q 67 1160 49 1119 q 115 1228 86 1201 q 183 1268 144 1256 q 264 1281 222 1281 q 344 1268 306 1281 q 413 1228 383 1256 q 460 1160 442 1201 q 482 1061 479 1119 l 375 1061 m 319 806 q 250 861 276 836 q 208 908 224 886 q 188 948 193 929 q 182 986 182 967 q 208 1048 182 1028 q 267 1068 235 1068 q 327 1046 307 1068 q 347 996 347 1024 q 338 957 347 976 q 303 926 329 938 q 335 894 317 911 q 371 864 354 878 l 319 806 z "},"ῠ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 411 831 q 322 846 363 831 q 251 889 281 861 q 203 958 221 917 q 186 1050 186 999 l 186 1061 l 326 1061 q 354 983 331 1003 q 411 963 378 963 q 468 983 444 963 q 496 1061 492 1003 l 636 1061 l 636 1050 q 619 958 636 999 q 572 889 601 917 q 500 846 542 861 q 411 831 458 831 z "},"ῡ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 188 1007 l 635 1007 l 635 865 l 188 865 l 188 1007 z "},"ῢ":{"ha":824,"x_min":81,"x_max":739,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 286 940 q 256 866 286 893 q 183 839 225 839 q 110 866 140 839 q 81 940 81 893 q 110 1016 81 989 q 183 1043 140 1043 q 256 1016 225 1043 q 286 940 286 989 m 739 940 q 708 866 739 893 q 636 839 678 839 q 564 866 594 839 q 533 940 533 893 q 564 1016 533 989 q 636 1043 594 1043 q 708 1016 678 1043 q 739 940 739 989 m 397 1135 l 518 842 l 422 796 l 271 1074 l 397 1135 z "},"ΰ":{"ha":824,"x_min":90,"x_max":749,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 296 940 q 265 866 296 893 q 193 839 235 839 q 120 866 150 839 q 90 940 90 893 q 120 1016 90 989 q 193 1043 150 1043 q 265 1016 235 1043 q 296 940 296 989 m 749 940 q 718 866 749 893 q 646 839 688 839 q 574 866 604 839 q 543 940 543 893 q 574 1016 543 989 q 646 1043 604 1043 q 718 1016 688 1043 q 749 940 749 989 m 557 1074 l 406 796 l 310 842 l 431 1135 l 557 1074 z "},"ῤ":{"ha":850,"x_min":97,"x_max":788,"o":"m 457 -14 q 369 -4 407 -14 q 304 21 332 6 l 304 -257 l 97 -257 l 97 407 q 120 547 97 483 q 186 654 143 610 q 291 723 229 699 q 431 747 353 747 q 698 645 608 747 q 788 365 788 543 q 765 211 788 281 q 700 92 743 142 q 596 14 657 42 q 457 -14 535 -14 m 304 188 q 353 169 324 176 q 418 161 382 161 q 534 208 492 161 q 576 367 576 254 q 543 522 576 474 q 438 571 510 571 q 387 561 411 571 q 344 531 363 551 q 315 479 326 511 q 304 401 304 447 l 304 188 m 313 868 q 372 922 346 896 q 417 975 397 947 q 371 1010 389 986 q 353 1063 353 1035 q 381 1128 353 1103 q 451 1154 408 1154 q 526 1127 496 1154 q 557 1049 557 1100 q 506 924 557 986 q 375 808 454 861 l 313 868 z "},"ῥ":{"ha":850,"x_min":97,"x_max":788,"o":"m 457 -14 q 369 -4 407 -14 q 304 21 332 6 l 304 -257 l 97 -257 l 97 407 q 120 547 97 483 q 186 654 143 610 q 291 723 229 699 q 431 747 353 747 q 698 645 608 747 q 788 365 788 543 q 765 211 788 281 q 700 92 743 142 q 596 14 657 42 q 457 -14 535 -14 m 304 188 q 353 169 324 176 q 418 161 382 161 q 534 208 492 161 q 576 367 576 254 q 543 522 576 474 q 438 571 510 571 q 387 561 411 571 q 344 531 363 551 q 315 479 326 511 q 304 401 304 447 l 304 188 m 483 808 q 353 924 404 861 q 301 1049 301 986 q 332 1127 301 1100 q 407 1154 363 1154 q 478 1128 450 1154 q 506 1063 506 1103 q 488 1010 506 1035 q 442 975 469 986 q 487 922 461 947 q 546 868 513 896 l 483 808 z "},"ῦ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 414 1061 q 503 1046 461 1061 q 574 1003 544 1031 q 622 934 604 975 q 639 842 639 893 l 639 831 l 499 831 q 471 909 494 889 q 414 929 447 929 q 357 909 381 929 q 329 831 333 889 l 189 831 l 189 842 q 206 934 189 893 q 253 1003 224 975 q 324 1046 283 1031 q 414 1061 365 1061 z "},"ῧ":{"ha":824,"x_min":90,"x_max":733,"o":"m 413 -19 q 171 61 251 -19 q 90 315 90 142 l 90 731 l 297 731 l 297 339 q 322 201 297 243 q 413 158 346 158 q 503 201 479 158 q 526 339 526 243 l 526 731 l 733 731 l 733 315 q 653 61 733 142 q 413 -19 574 -19 m 354 917 q 326 850 354 875 q 261 825 299 825 q 196 850 222 825 q 169 917 169 875 q 196 985 169 960 q 261 1010 222 1010 q 326 985 299 1010 q 354 917 354 960 m 654 917 q 627 850 654 875 q 563 825 600 825 q 497 850 525 825 q 469 917 469 875 q 497 985 469 960 q 563 1010 525 1010 q 627 985 600 1010 q 654 917 654 960 m 522 1061 q 510 1107 521 1088 q 484 1139 500 1126 q 449 1157 468 1151 q 411 1163 429 1163 q 373 1157 392 1163 q 338 1139 354 1151 q 312 1107 322 1126 q 300 1061 301 1088 l 193 1061 q 215 1160 196 1119 q 263 1228 233 1201 q 331 1268 292 1256 q 411 1281 369 1281 q 492 1268 453 1281 q 560 1228 531 1256 q 608 1160 589 1201 q 629 1061 626 1119 l 522 1061 z "},"Ῠ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 458 1063 q 369 1078 410 1063 q 298 1121 328 1093 q 251 1190 268 1149 q 233 1282 233 1231 l 233 1293 l 374 1293 q 401 1215 378 1235 q 458 1194 425 1194 q 515 1215 492 1194 q 543 1293 539 1235 l 683 1293 l 683 1282 q 666 1190 683 1231 q 619 1121 649 1149 q 547 1078 589 1093 q 458 1063 506 1063 z "},"Ῡ":{"ha":918,"x_min":7,"x_max":911,"o":"m 464 567 q 575 764 522 665 q 672 963 628 863 l 911 963 q 747 661 832 807 q 568 368 663 515 l 568 0 l 351 0 l 351 365 q 172 660 257 513 q 7 963 86 807 l 258 963 q 354 764 303 863 q 464 567 406 665 m 235 1239 l 682 1239 l 682 1097 l 235 1097 l 235 1239 z "},"Ὺ":{"ha":1224,"x_min":0,"x_max":1217,"o":"m 769 567 q 881 764 828 665 q 978 963 933 863 l 1217 963 q 1053 661 1138 807 q 874 368 968 515 l 874 0 l 657 0 l 657 365 q 477 660 563 513 q 313 963 392 807 l 564 963 q 660 764 608 863 q 769 567 711 665 m 126 992 l 324 767 l 229 682 l 0 875 l 126 992 z "},"Ύ":{"ha":1272,"x_min":18,"x_max":1265,"o":"m 818 567 q 929 764 876 665 q 1026 963 982 863 l 1265 963 q 1101 661 1186 807 q 922 368 1017 515 l 922 0 l 706 0 l 706 365 q 526 660 611 513 q 361 963 440 807 l 613 963 q 708 764 657 863 q 818 567 760 665 m 342 875 l 113 682 l 18 767 l 215 992 l 342 875 z "},"Ῥ":{"ha":1129,"x_min":1,"x_max":1081,"o":"m 635 974 q 965 898 850 974 q 1081 650 1081 822 q 964 399 1081 476 q 631 322 847 322 l 563 322 l 563 0 l 346 0 l 346 949 q 496 968 417 963 q 635 974 575 974 m 649 789 q 602 788 625 789 q 563 785 579 786 l 563 507 l 631 507 q 800 538 743 507 q 857 651 857 568 q 842 718 857 692 q 801 760 828 744 q 735 783 774 776 q 649 789 696 789 m 183 647 q 53 763 104 700 q 1 888 1 825 q 32 966 1 939 q 107 993 63 993 q 178 967 150 993 q 206 901 206 942 q 188 849 206 874 q 142 814 169 825 q 187 760 161 786 q 246 707 213 735 l 183 647 z "},"῭":{"ha":744,"x_min":99,"x_max":757,"o":"m 304 940 q 274 866 304 893 q 201 839 243 839 q 128 866 158 839 q 99 940 99 893 q 128 1016 99 989 q 201 1043 158 1043 q 274 1016 243 1043 q 304 940 304 989 m 757 940 q 726 866 757 893 q 654 839 696 839 q 582 866 613 839 q 551 940 551 893 q 582 1016 551 989 q 654 1043 613 1043 q 726 1016 696 1043 q 757 940 757 989 m 415 1135 l 536 842 l 440 796 l 289 1074 l 415 1135 z "},"΅":{"ha":854,"x_min":99,"x_max":757,"o":"m 304 940 q 274 866 304 893 q 201 839 243 839 q 128 866 158 839 q 99 940 99 893 q 128 1016 99 989 q 201 1043 158 1043 q 274 1016 243 1043 q 304 940 304 989 m 757 940 q 726 866 757 893 q 654 839 696 839 q 582 866 613 839 q 551 940 551 893 q 582 1016 551 989 q 654 1043 613 1043 q 726 1016 696 1043 q 757 940 757 989 m 565 1074 l 414 796 l 318 842 l 439 1135 l 565 1074 z "},"`":{"ha":397,"x_min":17,"x_max":381,"o":"m 106 1096 l 381 914 l 310 804 l 17 953 l 106 1096 z "},"ῲ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 447 1096 l 722 914 l 651 804 l 358 953 l 447 1096 z "},"ῳ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 z "},"ῴ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 786 953 l 493 804 l 422 914 l 697 1096 l 786 953 z "},"ῶ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 585 1061 q 674 1046 632 1061 q 745 1003 715 1031 q 792 934 775 975 q 810 842 810 893 l 810 831 l 669 831 q 642 909 665 889 q 585 929 618 929 q 528 909 551 929 q 500 831 504 889 l 360 831 l 360 842 q 377 934 360 893 q 424 1003 394 975 q 495 1046 454 1031 q 585 1061 536 1061 z "},"ῷ":{"ha":1169,"x_min":67,"x_max":1103,"o":"m 688 344 q 706 209 688 260 q 788 158 725 158 q 870 211 846 158 q 894 360 894 264 q 869 526 894 444 q 781 692 843 607 l 950 750 q 1065 560 1028 665 q 1103 350 1103 456 q 1081 181 1103 250 q 1018 68 1058 111 q 923 6 978 25 q 801 -14 868 -14 q 669 21 718 -14 q 585 110 619 56 q 501 21 550 56 q 368 -14 451 -14 q 247 6 301 -14 q 151 68 192 25 q 89 181 111 111 q 67 350 67 250 q 104 560 67 456 q 219 750 142 665 l 389 692 q 301 526 326 607 q 275 360 275 444 q 299 211 275 264 q 382 158 324 158 q 463 209 444 158 q 482 344 482 260 l 482 583 l 688 583 l 688 344 m 668 -92 q 676 -140 668 -122 q 697 -166 683 -157 q 728 -178 710 -175 q 768 -181 747 -181 l 768 -297 q 739 -303 760 -300 q 697 -306 718 -306 q 624 -297 660 -306 q 561 -267 589 -287 q 517 -211 533 -246 q 500 -124 500 -176 q 501 -103 500 -118 q 504 -72 501 -87 l 668 -72 l 668 -92 m 585 1061 q 674 1046 632 1061 q 745 1003 715 1031 q 792 934 775 975 q 810 842 810 893 l 810 831 l 669 831 q 642 909 665 889 q 585 929 618 929 q 528 909 551 929 q 500 831 504 889 l 360 831 l 360 842 q 377 934 360 893 q 424 1003 394 975 q 495 1046 454 1031 q 585 1061 536 1061 z "},"Ὸ":{"ha":1397,"x_min":7,"x_max":1328,"o":"m 593 482 q 610 354 593 411 q 660 256 628 297 q 740 193 693 215 q 849 171 788 171 q 956 193 908 171 q 1037 256 1004 215 q 1087 354 1069 297 q 1104 482 1104 411 q 1087 610 1104 553 q 1037 709 1069 668 q 956 772 1004 750 q 849 794 908 794 q 740 772 788 794 q 660 708 693 749 q 610 609 628 667 q 593 482 593 551 m 1328 482 q 1291 265 1328 358 q 1190 108 1254 171 q 1038 13 1126 44 q 849 -19 950 -19 q 663 13 750 -19 q 510 108 575 44 q 407 265 444 171 q 369 482 369 358 q 408 699 369 606 q 513 857 447 793 q 666 953 579 921 q 849 985 753 985 q 1035 953 947 985 q 1188 857 1122 921 q 1290 699 1253 793 q 1328 482 1328 606 m 133 992 l 331 767 l 236 682 l 7 875 l 133 992 z "},"Ό":{"ha":1346,"x_min":25,"x_max":1276,"o":"m 542 482 q 559 354 542 411 q 609 256 576 297 q 689 193 642 215 q 797 171 736 171 q 905 193 857 171 q 985 256 953 215 q 1035 354 1018 297 q 1053 482 1053 411 q 1035 610 1053 553 q 985 709 1018 668 q 905 772 953 750 q 797 794 857 794 q 689 772 736 794 q 609 708 642 749 q 559 609 576 667 q 542 482 542 551 m 1276 482 q 1240 265 1276 358 q 1139 108 1203 171 q 987 13 1075 44 q 797 -19 899 -19 q 611 13 699 -19 q 458 108 524 44 q 356 265 393 171 q 318 482 318 358 q 357 699 318 606 q 462 857 396 793 q 615 953 528 921 q 797 985 701 985 q 983 953 896 985 q 1136 857 1071 921 q 1239 699 1201 793 q 1276 482 1276 606 m 349 875 l 119 682 l 25 767 l 222 992 l 349 875 z "},"Ὼ":{"ha":1400,"x_min":7,"x_max":1344,"o":"m 857 985 q 1042 955 957 985 q 1190 867 1128 925 q 1288 723 1253 808 q 1324 528 1324 638 q 1179 179 1324 328 l 1344 179 l 1344 0 l 924 0 l 924 161 q 992 228 960 192 q 1048 309 1024 265 q 1086 406 1072 353 q 1100 521 1100 458 q 1035 726 1100 656 q 857 797 969 797 q 679 726 744 797 q 614 521 614 656 q 628 406 614 458 q 665 309 642 353 q 721 228 689 265 q 789 161 753 192 l 789 0 l 368 0 l 368 179 l 533 179 q 390 528 390 329 q 426 723 390 638 q 524 867 461 808 q 672 955 586 925 q 857 985 757 985 m 133 992 l 331 767 l 236 682 l 7 875 l 133 992 z "},"Ώ":{"ha":1335,"x_min":25,"x_max":1279,"o":"m 792 985 q 977 955 892 985 q 1125 867 1063 925 q 1223 723 1188 808 q 1258 528 1258 638 q 1114 179 1258 328 l 1279 179 l 1279 0 l 858 0 l 858 161 q 926 228 894 192 q 983 309 958 265 q 1021 406 1007 353 q 1035 521 1035 458 q 969 726 1035 656 q 792 797 904 797 q 614 726 679 797 q 549 521 549 656 q 563 406 549 458 q 600 309 576 353 q 656 228 624 265 q 724 161 688 192 l 724 0 l 303 0 l 303 179 l 468 179 q 325 528 325 329 q 360 723 325 638 q 458 867 396 808 q 606 955 521 925 q 792 985 692 985 m 349 875 l 119 682 l 25 767 l 222 992 l 349 875 z "},"ῼ":{"ha":1521,"x_min":56,"x_max":1493,"o":"m 544 985 q 730 955 644 985 q 878 867 815 925 q 976 723 940 808 q 1011 528 1011 638 q 867 179 1011 328 l 1032 179 l 1032 0 l 611 0 l 611 161 q 679 228 647 192 q 735 309 711 265 q 774 406 760 353 q 788 521 788 458 q 722 726 788 656 q 544 797 657 797 q 367 726 432 797 q 301 521 301 656 q 315 406 301 458 q 353 309 329 353 q 408 228 376 265 q 476 161 440 192 l 476 0 l 56 0 l 56 179 l 221 179 q 78 528 78 329 q 113 723 78 638 q 211 867 149 808 q 359 955 274 925 q 544 985 444 985 m 1468 -15 q 1331 2 1385 -15 q 1244 51 1276 19 q 1199 126 1211 82 q 1186 224 1186 169 l 1186 731 l 1393 731 l 1393 246 q 1412 172 1393 197 q 1493 143 1431 147 l 1468 -15 z "},"´":{"ha":397,"x_min":7,"x_max":371,"o":"m 371 953 l 78 804 l 7 914 l 282 1096 l 371 953 z "},"῾":{"ha":492,"x_min":125,"x_max":369,"o":"m 307 808 q 176 924 228 861 q 125 1049 125 986 q 156 1127 125 1100 q 231 1154 186 1154 q 301 1128 274 1154 q 329 1063 329 1103 q 311 1010 329 1035 q 265 975 293 986 q 310 922 285 947 q 369 868 336 896 l 307 808 z "},"₹":{"ha":789,"x_min":63,"x_max":826,"o":"m 469 726 q 444 776 461 757 q 403 806 426 794 q 353 821 381 817 q 300 825 326 825 l 63 825 l 63 963 l 826 963 l 800 825 l 621 825 q 676 726 664 782 l 785 726 l 758 589 l 668 589 q 619 494 653 533 q 538 428 585 456 q 435 386 492 401 q 319 363 379 371 q 394 286 354 329 q 475 195 435 243 q 554 97 515 147 q 624 0 593 47 l 374 0 q 299 97 339 49 q 219 192 260 146 q 138 279 178 238 q 63 354 97 321 l 63 494 l 208 494 q 356 515 290 494 q 453 589 421 535 l 63 589 l 63 726 l 469 726 z "},"":{"ha":1086,"x_min":40,"x_max":1046,"o":"m 1046 481 q 1007 285 1046 376 q 900 126 968 193 q 740 19 832 58 q 543 -21 649 -21 q 347 19 439 -21 q 188 126 256 58 q 80 285 119 193 q 40 481 40 376 q 80 678 40 586 q 188 839 119 771 q 347 946 256 907 q 543 985 439 985 q 740 946 649 985 q 900 839 832 907 q 1007 678 968 771 q 1046 481 1046 586 m 199 549 q 153 528 172 549 q 133 481 133 508 q 153 434 133 453 q 199 415 172 415 q 247 434 226 415 q 267 481 267 453 q 247 528 267 508 q 199 549 226 549 m 782 188 q 760 235 782 219 q 717 250 739 250 q 667 230 686 250 q 649 182 649 210 q 669 135 649 153 q 715 117 689 117 q 763 138 743 117 q 782 188 782 160 m 346 481 q 369 574 346 532 q 432 644 392 617 l 379 728 q 306 652 338 696 q 260 554 274 608 q 285 524 275 543 q 296 481 296 504 q 285 440 296 460 q 260 408 275 421 q 306 313 274 356 q 379 236 338 269 l 432 322 q 369 390 392 347 q 346 481 346 432 m 414 744 l 460 661 q 543 681 499 681 q 616 667 582 681 q 676 628 650 653 q 719 572 703 604 q 738 503 735 540 l 835 503 q 808 604 831 556 q 747 689 785 653 q 731 687 738 688 q 717 686 724 686 q 684 692 700 686 q 655 708 668 697 q 633 733 642 718 q 624 764 625 747 q 583 773 601 771 q 543 775 564 775 q 414 744 475 775 m 460 301 l 414 221 q 476 199 443 206 q 543 192 508 192 q 583 194 564 192 q 624 200 601 196 q 633 233 625 218 q 655 258 642 247 q 684 274 668 268 q 717 279 700 279 q 731 278 724 279 q 747 276 738 278 q 808 361 785 313 q 835 467 831 410 l 738 467 q 719 394 735 428 q 676 337 703 361 q 616 299 650 313 q 543 285 582 285 q 499 290 519 285 q 460 301 479 294 m 717 713 q 760 729 739 713 q 782 776 782 746 q 764 823 782 800 q 715 846 746 846 q 669 828 690 846 q 649 778 649 811 q 669 732 649 751 q 717 713 689 713 z "},"":{"ha":2358,"x_min":21,"x_max":2338,"o":"m 21 281 q 81 493 21 418 q 253 568 142 568 q 423 493 363 568 q 483 281 483 418 q 423 67 483 142 q 253 -8 363 -8 q 81 67 142 -8 q 21 281 21 142 m 335 281 q 318 398 335 353 q 254 443 301 443 q 188 398 207 443 q 169 281 169 353 q 188 162 169 207 q 254 117 207 117 q 318 162 301 117 q 335 281 335 207 m 804 110 q 765 15 804 47 q 675 -18 725 -18 q 585 15 625 -18 q 546 110 546 47 q 585 205 546 172 q 675 238 625 238 q 765 205 725 238 q 804 110 804 172 m 1322 157 q 1310 90 1322 121 q 1270 38 1297 60 q 1201 4 1243 17 q 1097 -8 1158 -8 q 985 7 1028 -8 q 917 46 942 22 q 884 97 893 69 q 875 147 875 124 q 900 227 875 196 q 961 282 925 258 q 906 338 922 310 q 889 407 889 365 q 901 468 889 439 q 940 519 914 497 q 1006 555 967 542 q 1099 568 1046 568 q 1200 554 1160 568 q 1265 518 1240 540 q 1299 469 1289 496 q 1308 417 1308 443 q 1287 347 1308 379 q 1231 294 1265 314 q 1302 232 1282 264 q 1322 157 1322 200 m 1021 157 q 1038 119 1021 138 q 1099 100 1054 100 q 1159 118 1142 100 q 1176 157 1176 136 q 1148 211 1176 192 q 1072 240 1119 231 q 1035 205 1049 225 q 1021 157 1021 185 m 1167 408 q 1151 443 1167 425 q 1100 461 1136 461 q 1049 443 1064 461 q 1033 408 1033 425 q 1051 364 1033 385 q 1113 329 1068 343 q 1153 363 1140 344 q 1167 408 1167 381 m 1557 122 q 1625 137 1606 122 q 1644 174 1644 151 q 1547 231 1644 231 l 1490 231 l 1490 344 l 1547 344 q 1600 357 1579 344 q 1621 394 1621 369 q 1560 439 1621 439 q 1496 428 1528 439 q 1435 404 1464 418 l 1382 514 q 1469 552 1417 536 q 1571 568 1521 568 q 1665 556 1626 568 q 1726 522 1703 543 q 1758 472 1749 500 q 1768 413 1768 443 q 1755 357 1768 383 q 1710 306 1742 331 q 1774 250 1754 285 q 1794 172 1794 215 q 1782 101 1794 135 q 1742 44 1769 68 q 1669 6 1714 19 q 1558 -8 1624 -8 q 1509 -6 1535 -8 q 1458 3 1483 -3 q 1412 15 1433 8 q 1374 29 1390 21 l 1406 153 q 1485 128 1453 133 q 1557 122 1518 122 m 1875 281 q 1935 493 1875 418 q 2107 568 1996 568 q 2277 493 2217 568 q 2338 281 2338 418 q 2277 67 2338 142 q 2107 -8 2217 -8 q 1935 67 1996 -8 q 1875 281 1875 142 m 2189 281 q 2172 398 2189 353 q 2108 443 2156 443 q 2042 398 2061 443 q 2024 281 2024 353 q 2042 162 2024 207 q 2108 117 2061 117 q 2172 162 2156 117 q 2189 281 2189 207 z "},"":{"ha":1357,"x_min":101,"x_max":1254,"o":"m 1214 504 l 1214 918 l 1254 918 l 1254 504 l 1214 504 m 1214 43 l 1214 457 l 1254 457 l 1254 43 l 1214 43 m 786 922 l 786 963 l 1214 963 l 1214 922 l 786 922 m 786 0 l 786 40 l 1214 40 l 1214 0 l 786 0 m 746 504 l 746 918 l 786 918 l 786 504 l 746 504 m 786 461 l 786 501 l 1214 501 l 1214 461 l 786 461 m 746 43 l 746 457 l 786 457 l 786 43 l 746 43 m 571 504 l 571 918 l 611 918 l 611 504 l 571 504 m 571 43 l 571 457 l 611 457 l 611 43 l 571 43 m 142 922 l 142 963 l 571 963 l 571 922 l 142 922 m 142 0 l 142 40 l 571 40 l 571 0 l 142 0 m 101 504 l 101 918 l 142 918 l 142 504 l 101 504 m 142 461 l 142 501 l 571 501 l 571 461 l 142 461 m 101 43 l 101 457 l 142 457 l 142 43 l 101 43 z "},"":{"ha":4876,"x_min":28,"x_max":4826,"o":"m 611 21 q 494 -3 567 10 q 325 -15 421 -15 q 185 9 242 -15 q 93 78 128 33 q 43 183 58 122 q 28 317 28 243 l 28 722 l 157 722 l 157 344 q 199 156 157 213 q 339 99 240 99 q 382 100 360 99 q 424 103 404 101 q 460 108 444 106 q 482 113 475 110 l 482 722 l 611 722 l 611 21 m 918 690 q 990 722 942 706 q 1100 739 1038 739 q 1238 711 1178 739 q 1340 633 1299 683 q 1403 514 1382 583 q 1425 361 1425 444 q 1399 203 1425 274 q 1326 85 1374 133 q 1213 10 1279 36 q 1063 -17 1146 -17 q 902 -4 971 -17 q 789 21 833 8 l 789 1056 l 918 1078 l 918 690 m 918 113 q 973 102 938 107 q 1061 97 1008 97 q 1228 166 1165 97 q 1290 361 1290 235 q 1279 465 1290 417 q 1243 549 1268 514 q 1178 605 1218 585 q 1083 625 1139 625 q 986 607 1031 625 q 918 569 942 589 l 918 113 m 2126 21 q 2009 -3 2082 10 q 1840 -15 1936 -15 q 1700 9 1757 -15 q 1608 78 1643 33 q 1558 183 1574 122 q 1543 317 1543 243 l 1543 722 l 1672 722 l 1672 344 q 1714 156 1672 213 q 1854 99 1756 99 q 1897 100 1875 99 q 1940 103 1919 101 q 1975 108 1960 106 q 1997 113 1990 110 l 1997 722 l 2126 722 l 2126 21 m 2296 701 q 2414 725 2340 713 q 2583 738 2488 738 q 2726 713 2669 738 q 2817 645 2783 689 q 2865 540 2851 601 q 2879 406 2879 479 l 2879 0 l 2750 0 l 2750 378 q 2741 492 2750 444 q 2711 568 2732 539 q 2656 610 2690 597 q 2569 624 2621 624 q 2526 622 2549 624 q 2484 619 2504 621 q 2448 614 2464 617 q 2425 610 2432 611 l 2425 0 l 2296 0 l 2296 701 m 3169 722 l 3443 722 l 3443 614 l 3169 614 l 3169 281 q 3178 191 3169 226 q 3203 135 3186 156 q 3244 107 3219 115 q 3303 99 3269 99 q 3397 112 3361 99 q 3446 131 3432 125 l 3471 24 q 3403 -1 3451 14 q 3292 -15 3354 -15 q 3170 3 3218 -15 q 3093 60 3122 22 q 3052 152 3064 97 q 3040 279 3040 207 l 3040 924 l 3169 946 l 3169 722 m 4131 21 q 4013 -3 4086 10 q 3844 -15 3940 -15 q 3704 9 3761 -15 q 3613 78 3647 33 q 3563 183 3578 122 q 3547 317 3547 243 l 3547 722 l 3676 722 l 3676 344 q 3718 156 3676 213 q 3858 99 3760 99 q 3901 100 3879 99 q 3944 103 3924 101 q 3979 108 3964 106 q 4001 113 3994 110 l 4001 722 l 4131 722 l 4131 21 m 4826 778 q 4803 661 4826 715 q 4739 567 4779 607 q 4644 503 4699 526 q 4526 479 4589 479 q 4410 503 4464 479 q 4315 567 4356 526 q 4251 661 4275 607 q 4228 778 4228 715 q 4251 895 4228 840 q 4315 990 4275 950 q 4410 1054 4356 1031 q 4526 1078 4464 1078 q 4644 1054 4589 1078 q 4739 990 4699 1031 q 4803 895 4779 950 q 4826 778 4826 840 m 4324 818 q 4296 806 4308 818 q 4283 778 4283 794 q 4296 751 4283 763 q 4324 739 4308 739 q 4352 751 4340 739 q 4364 778 4364 763 q 4352 806 4364 794 q 4324 818 4340 818 m 4589 600 q 4601 572 4589 582 q 4628 561 4614 561 q 4657 574 4646 561 q 4668 603 4668 588 q 4656 632 4668 622 q 4629 642 4643 642 q 4599 628 4610 642 q 4589 600 4589 615 m 4410 778 q 4424 833 4410 808 q 4461 874 4438 858 l 4431 924 q 4385 878 4404 904 q 4358 821 4367 853 q 4381 778 4381 807 q 4358 735 4381 750 q 4385 678 4367 703 q 4431 633 4404 653 l 4461 683 q 4424 724 4438 699 q 4410 778 4410 749 m 4526 896 q 4606 865 4574 896 q 4643 789 4639 833 l 4700 789 q 4647 901 4696 856 q 4629 899 4636 899 q 4593 912 4610 899 q 4574 946 4576 925 q 4526 951 4553 951 q 4450 933 4485 951 l 4478 885 q 4526 896 4500 896 m 4526 661 q 4478 672 4500 661 l 4450 624 q 4526 606 4485 606 q 4574 611 4553 606 q 4593 645 4576 632 q 4629 658 4610 658 q 4647 656 4636 658 q 4700 768 4696 701 l 4643 768 q 4606 692 4639 724 q 4526 661 4574 661 m 4629 914 q 4656 924 4643 914 q 4668 954 4668 935 q 4658 982 4668 969 q 4628 994 4647 994 q 4600 984 4613 994 q 4588 956 4588 974 q 4601 926 4588 939 q 4629 914 4614 914 z "},"":{"ha":626,"x_min":14,"x_max":613,"o":"m 613 778 q 589 661 613 715 q 525 567 565 607 q 430 503 485 526 q 313 479 375 479 q 196 503 250 479 q 101 567 142 526 q 38 661 61 607 q 14 778 14 715 q 38 895 14 840 q 101 990 61 950 q 196 1054 142 1031 q 313 1078 250 1078 q 430 1054 375 1078 q 525 990 485 1031 q 589 895 565 950 q 613 778 613 840 m 110 818 q 82 806 94 818 q 69 778 69 794 q 82 751 69 763 q 110 739 94 739 q 138 751 126 739 q 150 778 150 763 q 138 806 150 794 q 110 818 126 818 m 375 600 q 388 572 375 582 q 414 561 400 561 q 443 574 432 561 q 454 603 454 588 q 442 632 454 622 q 415 642 429 642 q 385 628 396 642 q 375 600 375 615 m 196 778 q 210 833 196 808 q 247 874 224 858 l 217 924 q 172 878 190 904 q 144 821 153 853 q 167 778 167 807 q 144 735 167 750 q 172 678 153 703 q 217 633 190 653 l 247 683 q 210 724 224 699 q 196 778 196 749 m 313 896 q 392 865 360 896 q 429 789 425 833 l 486 789 q 433 901 482 856 q 415 899 422 899 q 379 912 396 899 q 360 946 363 925 q 313 951 339 951 q 236 933 271 951 l 264 885 q 313 896 286 896 m 313 661 q 264 672 286 661 l 236 624 q 313 606 271 606 q 360 611 339 606 q 379 645 363 632 q 415 658 396 658 q 433 656 422 658 q 486 768 482 701 l 429 768 q 392 692 425 724 q 313 661 360 661 m 415 914 q 442 924 429 914 q 454 954 454 935 q 444 982 454 969 q 414 994 433 994 q 386 984 399 994 q 374 956 374 974 q 387 926 374 939 q 415 914 400 914 z "}},"familyName":"Ubuntu","ascender":1294,"descender":-262,"underlinePosition":-171,"underlineThickness":167,"boundingBox":{"yMin":-307,"xMin":-236,"yMax":1336,"xMax":4826},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2011 Canonical Ltd.  Licensed under the Ubuntu Font Licence 1.0","fontFamily":"Ubuntu","fontSubfamily":"Bold","uniqueID":"0.83;DAMA;Ubuntu-Bold","fullName":"Ubuntu Bold","version":"0.83","postScriptName":"Ubuntu-Bold","trademark":"Ubuntu and Canonical are registered trademarks of Canonical Ltd.","manufacturer":"Dalton Maag Ltd","designer":"Dalton Maag Ltd","manufacturerURL":"http://www.daltonmaag.com/","designerURL":"http://www.daltonmaag.com/"},"cssFontWeight":"bold","cssFontStyle":"normal"}')},function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));var i="WEST",r="EAST",a="SOUTH",o="NORTH",q="UP",l="DOWN";class s{constructor(){}toString(){return JSON.stringify(this)}}class c extends s{constructor(e){super(),this.direction=e}}class h extends c{constructor(e){super(e),this.moveStartCommand=!0}}class u extends c{constructor(e){super(e),this.moveStopCommand=!0}}var m=n(6),p=n(14),d=n.n(p);class f extends s{constructor({nickname:e}){super(),this.startGameCommand=!0,this.nickname=e}}const x={goUp:new h(q).toString(),goDown:new h(l).toString(),goWest:new h(i).toString(),goEast:new h(r).toString(),goNorth:new h(o).toString(),goSouth:new h(a).toString(),stopUp:new u(q).toString(),stopDown:new u(l).toString(),stopWest:new u(i).toString(),stopEast:new u(r).toString(),stopNorth:new u(o).toString(),stopSouth:new u(a).toString()};class g{constructor(e){this.connectionURL=e}userData({nickname:e}){return this._nickname=e,this}onGreeting(e){return this._onGreeting=e,this}onMessage(e){return this._onMessage=e,this}onClose(e){return this._onClose=e,this}handleMessage(e){this._onMessage(e)}connect(){let e=t=>{let n=JSON.parse(t.data);if(!n.greeting)throw console.error(n),Error("There is no valid greeting from server");this._onGreeting(n),e=this.handleMessage.bind(this)};return this._socket=new WebSocket(this.connectionURL),window.onbeforeunload=()=>{this._socket.close()},this._socket.onmessage=function(t){return e(t)},this._socket.onerror=()=>{this._socket.close(1e3,"Something wrong")},this._socket.onclose=()=>{this._onClose&&this._onClose(),Object(m.a)().show(),d()({title:"Oops!",text:"Connection closed!",icon:"warning",dangerMode:!0})},this._socket.onopen=e=>this.send(new f({nickname:this._nickname})),this}send(e){this._socket.send(e.toString())}sendPlayerMoveUp(){this._socket.send(x.goUp)}sendPlayerMoveDown(){this._socket.send(x.goDown)}sendPlayerMoveNorth(){this._socket.send(x.goNorth)}sendPlayerMoveSouth(){this._socket.send(x.goSouth)}sendPlayerMoveWest(){this._socket.send(x.goWest)}sendPlayerMoveEast(){this._socket.send(x.goEast)}sendPlayerStopMoveUp(){this._socket.send(x.stopUp)}sendPlayerStopMoveDown(){this._socket.send(x.stopDown)}sendPlayerStopMoveNorth(){this._socket.send(x.stopNorth)}sendPlayerStopMoveSouth(){this._socket.send(x.stopSouth)}sendPlayerStopMoveWest(){this._socket.send(x.stopWest)}sendPlayerStopMoveEast(){this._socket.send(x.stopEast)}}},function(e,t,n){var i=n(19);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".game-menu-area {\n    width: 100%;\n    height: 100%;\n}\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,a=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(r=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},function(e,t,n){var i=n(22);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".game-menu {\n    top: 25%;\n    left: 40%;\n    width: 20%;\n    height: 40%;\n    position: absolute;\n    background-color: green;\n}\n\n.game-title {\n    line-height: 50px;\n    font-weight: bold;\n    font-size: xx-large;\n    text-align: center;\n}\n",""])},function(e,t,n){var i=n(24);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".play-button {\n    margin: 5% 35%;\n    width: 30%;\n    color: chartreuse;\n    background-color: darkgreen;\n    border-color: darkslategrey;\n    border-radius: 5px;\n    cursor: pointer;\n}\n",""])},function(e,t,n){var i=n(26);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"html {\n    height: 100%;\n}\n\nbody {\n    height: 100%;\n    margin: 0;\n    overflow: hidden;\n}\n\ncanvas {\n    width: 100%;\n    height: 100%;\n}\n\n.nickname-input-wrapper {\n    width: auto;\n    padding: 5px;\n}\n\n.nickname-field {\n    width: 97%\n}\n",""])},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,a,o,q,l=1,s={},c=!1,h=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){a.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(r=h.documentElement,i=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(o="setImmediate$"+Math.random()+"$",q=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&p(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",q,!1):e.attachEvent("onmessage",q),i=function(t){e.postMessage(o+t,"*")}),u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return s[l]=r,i(l),l++},u.clearImmediate=m}function m(e){delete s[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=s[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{m(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(11),n(9))},function(e,t,n){"use strict";n.r(t);var i={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{let e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),webgl2:function(){try{let e=document.createElement("canvas");return!(!window.WebGL2RenderingContext||!e.getContext("webgl2"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){let e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join("\n")),e}},r=n(6),a=n(1),o=n.n(a);window.onload=function(){if(i.webgl)o()("body").append(Object(r.a)());else{let e=i.getWebGLErrorMessage();document.body.appendChild(e)}}}]);
//# sourceMappingURL=main.js.map